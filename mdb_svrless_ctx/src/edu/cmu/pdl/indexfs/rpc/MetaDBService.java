/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.cmu.pdl.indexfs.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
//import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
//@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2021-06-10")
public class MetaDBService {

  public interface Iface {

    public void Flush() throws IOError, ServerInternalError, org.apache.thrift.TException;

    public void NewFile(KeyInfo_THRIFT key) throws IOError, ServerInternalError, org.apache.thrift.TException;

    public void NewDirectory(KeyInfo_THRIFT key, short zeroth_server, long inode_no) throws IOError, ServerInternalError, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void Flush(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void NewFile(KeyInfo_THRIFT key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void NewDirectory(KeyInfo_THRIFT key, short zeroth_server, long inode_no, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void Flush() throws IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_Flush();
      recv_Flush();
    }

    public void send_Flush() throws org.apache.thrift.TException
    {
      Flush_args args = new Flush_args();
      sendBase("Flush", args);
    }

    public void recv_Flush() throws IOError, ServerInternalError, org.apache.thrift.TException
    {
      Flush_result result = new Flush_result();
      receiveBase(result, "Flush");
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      return;
    }

    public void NewFile(KeyInfo_THRIFT key) throws IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_NewFile(key);
      recv_NewFile();
    }

    public void send_NewFile(KeyInfo_THRIFT key) throws org.apache.thrift.TException
    {
      NewFile_args args = new NewFile_args();
      args.setKey(key);
      sendBase("NewFile", args);
    }

    public void recv_NewFile() throws IOError, ServerInternalError, org.apache.thrift.TException
    {
      NewFile_result result = new NewFile_result();
      receiveBase(result, "NewFile");
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      return;
    }

    public void NewDirectory(KeyInfo_THRIFT key, short zeroth_server, long inode_no) throws IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_NewDirectory(key, zeroth_server, inode_no);
      recv_NewDirectory();
    }

    public void send_NewDirectory(KeyInfo_THRIFT key, short zeroth_server, long inode_no) throws org.apache.thrift.TException
    {
      NewDirectory_args args = new NewDirectory_args();
      args.setKey(key);
      args.setZeroth_server(zeroth_server);
      args.setInode_no(inode_no);
      sendBase("NewDirectory", args);
    }

    public void recv_NewDirectory() throws IOError, ServerInternalError, org.apache.thrift.TException
    {
      NewDirectory_result result = new NewDirectory_result();
      receiveBase(result, "NewDirectory");
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void Flush(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Flush_call method_call = new Flush_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Flush_call extends org.apache.thrift.async.TAsyncMethodCall {
      public Flush_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Flush", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Flush_args args = new Flush_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Flush();
      }
    }

    public void NewFile(KeyInfo_THRIFT key, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      NewFile_call method_call = new NewFile_call(key, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class NewFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private KeyInfo_THRIFT key;
      public NewFile_call(KeyInfo_THRIFT key, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("NewFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        NewFile_args args = new NewFile_args();
        args.setKey(key);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_NewFile();
      }
    }

    public void NewDirectory(KeyInfo_THRIFT key, short zeroth_server, long inode_no, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      NewDirectory_call method_call = new NewDirectory_call(key, zeroth_server, inode_no, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class NewDirectory_call extends org.apache.thrift.async.TAsyncMethodCall {
      private KeyInfo_THRIFT key;
      private short zeroth_server;
      private long inode_no;
      public NewDirectory_call(KeyInfo_THRIFT key, short zeroth_server, long inode_no, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.key = key;
        this.zeroth_server = zeroth_server;
        this.inode_no = inode_no;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("NewDirectory", org.apache.thrift.protocol.TMessageType.CALL, 0));
        NewDirectory_args args = new NewDirectory_args();
        args.setKey(key);
        args.setZeroth_server(zeroth_server);
        args.setInode_no(inode_no);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_NewDirectory();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("Flush", new Flush());
      processMap.put("NewFile", new NewFile());
      processMap.put("NewDirectory", new NewDirectory());
      return processMap;
    }

    public static class Flush<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Flush_args> {
      public Flush() {
        super("Flush");
      }

      public Flush_args getEmptyArgsInstance() {
        return new Flush_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Flush_result getResult(I iface, Flush_args args) throws org.apache.thrift.TException {
        Flush_result result = new Flush_result();
        try {
          iface.Flush();
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class NewFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, NewFile_args> {
      public NewFile() {
        super("NewFile");
      }

      public NewFile_args getEmptyArgsInstance() {
        return new NewFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public NewFile_result getResult(I iface, NewFile_args args) throws org.apache.thrift.TException {
        NewFile_result result = new NewFile_result();
        try {
          iface.NewFile(args.key);
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class NewDirectory<I extends Iface> extends org.apache.thrift.ProcessFunction<I, NewDirectory_args> {
      public NewDirectory() {
        super("NewDirectory");
      }

      public NewDirectory_args getEmptyArgsInstance() {
        return new NewDirectory_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public NewDirectory_result getResult(I iface, NewDirectory_args args) throws org.apache.thrift.TException {
        NewDirectory_result result = new NewDirectory_result();
        try {
          iface.NewDirectory(args.key, args.zeroth_server, args.inode_no);
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("Flush", new Flush());
      processMap.put("NewFile", new NewFile());
      processMap.put("NewDirectory", new NewDirectory());
      return processMap;
    }

    public static class Flush<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Flush_args, Void> {
      public Flush() {
        super("Flush");
      }

      public Flush_args getEmptyArgsInstance() {
        return new Flush_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Flush_result result = new Flush_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Flush_result result = new Flush_result();
            if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Flush_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Flush(resultHandler);
      }
    }

    public static class NewFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, NewFile_args, Void> {
      public NewFile() {
        super("NewFile");
      }

      public NewFile_args getEmptyArgsInstance() {
        return new NewFile_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            NewFile_result result = new NewFile_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            NewFile_result result = new NewFile_result();
            if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, NewFile_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.NewFile(args.key,resultHandler);
      }
    }

    public static class NewDirectory<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, NewDirectory_args, Void> {
      public NewDirectory() {
        super("NewDirectory");
      }

      public NewDirectory_args getEmptyArgsInstance() {
        return new NewDirectory_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            NewDirectory_result result = new NewDirectory_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            NewDirectory_result result = new NewDirectory_result();
            if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, NewDirectory_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.NewDirectory(args.key, args.zeroth_server, args.inode_no,resultHandler);
      }
    }

  }

  public static class Flush_args implements org.apache.thrift.TBase<Flush_args, Flush_args._Fields>, java.io.Serializable, Cloneable, Comparable<Flush_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Flush_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Flush_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Flush_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Flush_args.class, metaDataMap);
    }

    public Flush_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Flush_args(Flush_args other) {
    }

    public Flush_args deepCopy() {
      return new Flush_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Flush_args)
        return this.equals((Flush_args)that);
      return false;
    }

    public boolean equals(Flush_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Flush_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Flush_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Flush_argsStandardSchemeFactory implements SchemeFactory {
      public Flush_argsStandardScheme getScheme() {
        return new Flush_argsStandardScheme();
      }
    }

    private static class Flush_argsStandardScheme extends StandardScheme<Flush_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Flush_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Flush_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Flush_argsTupleSchemeFactory implements SchemeFactory {
      public Flush_argsTupleScheme getScheme() {
        return new Flush_argsTupleScheme();
      }
    }

    private static class Flush_argsTupleScheme extends TupleScheme<Flush_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Flush_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Flush_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Flush_result implements org.apache.thrift.TBase<Flush_result, Flush_result._Fields>, java.io.Serializable, Cloneable, Comparable<Flush_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Flush_result");

    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Flush_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Flush_resultTupleSchemeFactory());
    }

    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IO_ERROR((short)1, "io_error"),
      SRV_ERROR((short)2, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IO_ERROR
            return IO_ERROR;
          case 2: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Flush_result.class, metaDataMap);
    }

    public Flush_result() {
    }

    public Flush_result(
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Flush_result(Flush_result other) {
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public Flush_result deepCopy() {
      return new Flush_result(this);
    }

    @Override
    public void clear() {
      this.io_error = null;
      this.srv_error = null;
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public Flush_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public Flush_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Flush_result)
        return this.equals((Flush_result)that);
      return false;
    }

    public boolean equals(Flush_result that) {
      if (that == null)
        return false;

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(Flush_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Flush_result(");
      boolean first = true;

      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Flush_resultStandardSchemeFactory implements SchemeFactory {
      public Flush_resultStandardScheme getScheme() {
        return new Flush_resultStandardScheme();
      }
    }

    private static class Flush_resultStandardScheme extends StandardScheme<Flush_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Flush_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Flush_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Flush_resultTupleSchemeFactory implements SchemeFactory {
      public Flush_resultTupleScheme getScheme() {
        return new Flush_resultTupleScheme();
      }
    }

    private static class Flush_resultTupleScheme extends TupleScheme<Flush_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Flush_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIo_error()) {
          optionals.set(0);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Flush_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class NewFile_args implements org.apache.thrift.TBase<NewFile_args, NewFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<NewFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NewFile_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new NewFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new NewFile_argsTupleSchemeFactory());
    }

    public KeyInfo_THRIFT key; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyInfo_THRIFT.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NewFile_args.class, metaDataMap);
    }

    public NewFile_args() {
    }

    public NewFile_args(
      KeyInfo_THRIFT key)
    {
      this();
      this.key = key;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public NewFile_args(NewFile_args other) {
      if (other.isSetKey()) {
        this.key = new KeyInfo_THRIFT(other.key);
      }
    }

    public NewFile_args deepCopy() {
      return new NewFile_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
    }

    public KeyInfo_THRIFT getKey() {
      return this.key;
    }

    public NewFile_args setKey(KeyInfo_THRIFT key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((KeyInfo_THRIFT)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof NewFile_args)
        return this.equals((NewFile_args)that);
      return false;
    }

    public boolean equals(NewFile_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      return list.hashCode();
    }

    @Override
    public int compareTo(NewFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("NewFile_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (key != null) {
        key.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class NewFile_argsStandardSchemeFactory implements SchemeFactory {
      public NewFile_argsStandardScheme getScheme() {
        return new NewFile_argsStandardScheme();
      }
    }

    private static class NewFile_argsStandardScheme extends StandardScheme<NewFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, NewFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.key = new KeyInfo_THRIFT();
                struct.key.read(iprot);
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, NewFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          struct.key.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class NewFile_argsTupleSchemeFactory implements SchemeFactory {
      public NewFile_argsTupleScheme getScheme() {
        return new NewFile_argsTupleScheme();
      }
    }

    private static class NewFile_argsTupleScheme extends TupleScheme<NewFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, NewFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetKey()) {
          struct.key.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, NewFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.key = new KeyInfo_THRIFT();
          struct.key.read(iprot);
          struct.setKeyIsSet(true);
        }
      }
    }

  }

  public static class NewFile_result implements org.apache.thrift.TBase<NewFile_result, NewFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<NewFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NewFile_result");

    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new NewFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new NewFile_resultTupleSchemeFactory());
    }

    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IO_ERROR((short)1, "io_error"),
      SRV_ERROR((short)2, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IO_ERROR
            return IO_ERROR;
          case 2: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NewFile_result.class, metaDataMap);
    }

    public NewFile_result() {
    }

    public NewFile_result(
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public NewFile_result(NewFile_result other) {
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public NewFile_result deepCopy() {
      return new NewFile_result(this);
    }

    @Override
    public void clear() {
      this.io_error = null;
      this.srv_error = null;
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public NewFile_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public NewFile_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof NewFile_result)
        return this.equals((NewFile_result)that);
      return false;
    }

    public boolean equals(NewFile_result that) {
      if (that == null)
        return false;

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(NewFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("NewFile_result(");
      boolean first = true;

      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class NewFile_resultStandardSchemeFactory implements SchemeFactory {
      public NewFile_resultStandardScheme getScheme() {
        return new NewFile_resultStandardScheme();
      }
    }

    private static class NewFile_resultStandardScheme extends StandardScheme<NewFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, NewFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, NewFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class NewFile_resultTupleSchemeFactory implements SchemeFactory {
      public NewFile_resultTupleScheme getScheme() {
        return new NewFile_resultTupleScheme();
      }
    }

    private static class NewFile_resultTupleScheme extends TupleScheme<NewFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, NewFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIo_error()) {
          optionals.set(0);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, NewFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class NewDirectory_args implements org.apache.thrift.TBase<NewDirectory_args, NewDirectory_args._Fields>, java.io.Serializable, Cloneable, Comparable<NewDirectory_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NewDirectory_args");

    private static final org.apache.thrift.protocol.TField KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("key", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ZEROTH_SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("zeroth_server", org.apache.thrift.protocol.TType.I16, (short)2);
    private static final org.apache.thrift.protocol.TField INODE_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("inode_no", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new NewDirectory_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new NewDirectory_argsTupleSchemeFactory());
    }

    public KeyInfo_THRIFT key; // required
    public short zeroth_server; // required
    public long inode_no; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      KEY((short)1, "key"),
      ZEROTH_SERVER((short)2, "zeroth_server"),
      INODE_NO((short)3, "inode_no");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // KEY
            return KEY;
          case 2: // ZEROTH_SERVER
            return ZEROTH_SERVER;
          case 3: // INODE_NO
            return INODE_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ZEROTH_SERVER_ISSET_ID = 0;
    private static final int __INODE_NO_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.KEY, new org.apache.thrift.meta_data.FieldMetaData("key", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, KeyInfo_THRIFT.class)));
      tmpMap.put(_Fields.ZEROTH_SERVER, new org.apache.thrift.meta_data.FieldMetaData("zeroth_server", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.INODE_NO, new org.apache.thrift.meta_data.FieldMetaData("inode_no", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NewDirectory_args.class, metaDataMap);
    }

    public NewDirectory_args() {
    }

    public NewDirectory_args(
      KeyInfo_THRIFT key,
      short zeroth_server,
      long inode_no)
    {
      this();
      this.key = key;
      this.zeroth_server = zeroth_server;
      setZeroth_serverIsSet(true);
      this.inode_no = inode_no;
      setInode_noIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public NewDirectory_args(NewDirectory_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetKey()) {
        this.key = new KeyInfo_THRIFT(other.key);
      }
      this.zeroth_server = other.zeroth_server;
      this.inode_no = other.inode_no;
    }

    public NewDirectory_args deepCopy() {
      return new NewDirectory_args(this);
    }

    @Override
    public void clear() {
      this.key = null;
      setZeroth_serverIsSet(false);
      this.zeroth_server = 0;
      setInode_noIsSet(false);
      this.inode_no = 0;
    }

    public KeyInfo_THRIFT getKey() {
      return this.key;
    }

    public NewDirectory_args setKey(KeyInfo_THRIFT key) {
      this.key = key;
      return this;
    }

    public void unsetKey() {
      this.key = null;
    }

    /** Returns true if field key is set (has been assigned a value) and false otherwise */
    public boolean isSetKey() {
      return this.key != null;
    }

    public void setKeyIsSet(boolean value) {
      if (!value) {
        this.key = null;
      }
    }

    public short getZeroth_server() {
      return this.zeroth_server;
    }

    public NewDirectory_args setZeroth_server(short zeroth_server) {
      this.zeroth_server = zeroth_server;
      setZeroth_serverIsSet(true);
      return this;
    }

    public void unsetZeroth_server() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ZEROTH_SERVER_ISSET_ID);
    }

    /** Returns true if field zeroth_server is set (has been assigned a value) and false otherwise */
    public boolean isSetZeroth_server() {
      return EncodingUtils.testBit(__isset_bitfield, __ZEROTH_SERVER_ISSET_ID);
    }

    public void setZeroth_serverIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ZEROTH_SERVER_ISSET_ID, value);
    }

    public long getInode_no() {
      return this.inode_no;
    }

    public NewDirectory_args setInode_no(long inode_no) {
      this.inode_no = inode_no;
      setInode_noIsSet(true);
      return this;
    }

    public void unsetInode_no() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INODE_NO_ISSET_ID);
    }

    /** Returns true if field inode_no is set (has been assigned a value) and false otherwise */
    public boolean isSetInode_no() {
      return EncodingUtils.testBit(__isset_bitfield, __INODE_NO_ISSET_ID);
    }

    public void setInode_noIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INODE_NO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case KEY:
        if (value == null) {
          unsetKey();
        } else {
          setKey((KeyInfo_THRIFT)value);
        }
        break;

      case ZEROTH_SERVER:
        if (value == null) {
          unsetZeroth_server();
        } else {
          setZeroth_server((Short)value);
        }
        break;

      case INODE_NO:
        if (value == null) {
          unsetInode_no();
        } else {
          setInode_no((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case KEY:
        return getKey();

      case ZEROTH_SERVER:
        return getZeroth_server();

      case INODE_NO:
        return getInode_no();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case KEY:
        return isSetKey();
      case ZEROTH_SERVER:
        return isSetZeroth_server();
      case INODE_NO:
        return isSetInode_no();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof NewDirectory_args)
        return this.equals((NewDirectory_args)that);
      return false;
    }

    public boolean equals(NewDirectory_args that) {
      if (that == null)
        return false;

      boolean this_present_key = true && this.isSetKey();
      boolean that_present_key = true && that.isSetKey();
      if (this_present_key || that_present_key) {
        if (!(this_present_key && that_present_key))
          return false;
        if (!this.key.equals(that.key))
          return false;
      }

      boolean this_present_zeroth_server = true;
      boolean that_present_zeroth_server = true;
      if (this_present_zeroth_server || that_present_zeroth_server) {
        if (!(this_present_zeroth_server && that_present_zeroth_server))
          return false;
        if (this.zeroth_server != that.zeroth_server)
          return false;
      }

      boolean this_present_inode_no = true;
      boolean that_present_inode_no = true;
      if (this_present_inode_no || that_present_inode_no) {
        if (!(this_present_inode_no && that_present_inode_no))
          return false;
        if (this.inode_no != that.inode_no)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_key = true && (isSetKey());
      list.add(present_key);
      if (present_key)
        list.add(key);

      boolean present_zeroth_server = true;
      list.add(present_zeroth_server);
      if (present_zeroth_server)
        list.add(zeroth_server);

      boolean present_inode_no = true;
      list.add(present_inode_no);
      if (present_inode_no)
        list.add(inode_no);

      return list.hashCode();
    }

    @Override
    public int compareTo(NewDirectory_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetKey()).compareTo(other.isSetKey());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetKey()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.key, other.key);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetZeroth_server()).compareTo(other.isSetZeroth_server());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZeroth_server()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zeroth_server, other.zeroth_server);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetInode_no()).compareTo(other.isSetInode_no());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInode_no()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inode_no, other.inode_no);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("NewDirectory_args(");
      boolean first = true;

      sb.append("key:");
      if (this.key == null) {
        sb.append("null");
      } else {
        sb.append(this.key);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("zeroth_server:");
      sb.append(this.zeroth_server);
      first = false;
      if (!first) sb.append(", ");
      sb.append("inode_no:");
      sb.append(this.inode_no);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (key != null) {
        key.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class NewDirectory_argsStandardSchemeFactory implements SchemeFactory {
      public NewDirectory_argsStandardScheme getScheme() {
        return new NewDirectory_argsStandardScheme();
      }
    }

    private static class NewDirectory_argsStandardScheme extends StandardScheme<NewDirectory_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, NewDirectory_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // KEY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.key = new KeyInfo_THRIFT();
                struct.key.read(iprot);
                struct.setKeyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ZEROTH_SERVER
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.zeroth_server = iprot.readI16();
                struct.setZeroth_serverIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // INODE_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.inode_no = iprot.readI64();
                struct.setInode_noIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, NewDirectory_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.key != null) {
          oprot.writeFieldBegin(KEY_FIELD_DESC);
          struct.key.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ZEROTH_SERVER_FIELD_DESC);
        oprot.writeI16(struct.zeroth_server);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INODE_NO_FIELD_DESC);
        oprot.writeI64(struct.inode_no);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class NewDirectory_argsTupleSchemeFactory implements SchemeFactory {
      public NewDirectory_argsTupleScheme getScheme() {
        return new NewDirectory_argsTupleScheme();
      }
    }

    private static class NewDirectory_argsTupleScheme extends TupleScheme<NewDirectory_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, NewDirectory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetKey()) {
          optionals.set(0);
        }
        if (struct.isSetZeroth_server()) {
          optionals.set(1);
        }
        if (struct.isSetInode_no()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetKey()) {
          struct.key.write(oprot);
        }
        if (struct.isSetZeroth_server()) {
          oprot.writeI16(struct.zeroth_server);
        }
        if (struct.isSetInode_no()) {
          oprot.writeI64(struct.inode_no);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, NewDirectory_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.key = new KeyInfo_THRIFT();
          struct.key.read(iprot);
          struct.setKeyIsSet(true);
        }
        if (incoming.get(1)) {
          struct.zeroth_server = iprot.readI16();
          struct.setZeroth_serverIsSet(true);
        }
        if (incoming.get(2)) {
          struct.inode_no = iprot.readI64();
          struct.setInode_noIsSet(true);
        }
      }
    }

  }

  public static class NewDirectory_result implements org.apache.thrift.TBase<NewDirectory_result, NewDirectory_result._Fields>, java.io.Serializable, Cloneable, Comparable<NewDirectory_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NewDirectory_result");

    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new NewDirectory_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new NewDirectory_resultTupleSchemeFactory());
    }

    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IO_ERROR((short)1, "io_error"),
      SRV_ERROR((short)2, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IO_ERROR
            return IO_ERROR;
          case 2: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NewDirectory_result.class, metaDataMap);
    }

    public NewDirectory_result() {
    }

    public NewDirectory_result(
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public NewDirectory_result(NewDirectory_result other) {
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public NewDirectory_result deepCopy() {
      return new NewDirectory_result(this);
    }

    @Override
    public void clear() {
      this.io_error = null;
      this.srv_error = null;
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public NewDirectory_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public NewDirectory_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof NewDirectory_result)
        return this.equals((NewDirectory_result)that);
      return false;
    }

    public boolean equals(NewDirectory_result that) {
      if (that == null)
        return false;

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(NewDirectory_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("NewDirectory_result(");
      boolean first = true;

      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class NewDirectory_resultStandardSchemeFactory implements SchemeFactory {
      public NewDirectory_resultStandardScheme getScheme() {
        return new NewDirectory_resultStandardScheme();
      }
    }

    private static class NewDirectory_resultStandardScheme extends StandardScheme<NewDirectory_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, NewDirectory_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, NewDirectory_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class NewDirectory_resultTupleSchemeFactory implements SchemeFactory {
      public NewDirectory_resultTupleScheme getScheme() {
        return new NewDirectory_resultTupleScheme();
      }
    }

    private static class NewDirectory_resultTupleScheme extends TupleScheme<NewDirectory_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, NewDirectory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIo_error()) {
          optionals.set(0);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, NewDirectory_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

}
