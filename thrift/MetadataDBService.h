/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef MetadataDBService_H
#define MetadataDBService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "indexfs_types.h"

namespace indexfs {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class MetadataDBServiceIf {
 public:
  virtual ~MetadataDBServiceIf() {}
};

class MetadataDBServiceIfFactory {
 public:
  typedef MetadataDBServiceIf Handler;

  virtual ~MetadataDBServiceIfFactory() {}

  virtual MetadataDBServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(MetadataDBServiceIf* /* handler */) = 0;
};

class MetadataDBServiceIfSingletonFactory : virtual public MetadataDBServiceIfFactory {
 public:
  MetadataDBServiceIfSingletonFactory(const boost::shared_ptr<MetadataDBServiceIf>& iface) : iface_(iface) {}
  virtual ~MetadataDBServiceIfSingletonFactory() {}

  virtual MetadataDBServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(MetadataDBServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<MetadataDBServiceIf> iface_;
};

class MetadataDBServiceNull : virtual public MetadataDBServiceIf {
 public:
  virtual ~MetadataDBServiceNull() {}
};

class MetadataDBServiceClient : virtual public MetadataDBServiceIf {
 public:
  MetadataDBServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MetadataDBServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class MetadataDBServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<MetadataDBServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (MetadataDBServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
 public:
  MetadataDBServiceProcessor(boost::shared_ptr<MetadataDBServiceIf> iface) :
    iface_(iface) {
  }

  virtual ~MetadataDBServiceProcessor() {}
};

class MetadataDBServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  MetadataDBServiceProcessorFactory(const ::boost::shared_ptr< MetadataDBServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< MetadataDBServiceIfFactory > handlerFactory_;
};

class MetadataDBServiceMultiface : virtual public MetadataDBServiceIf {
 public:
  MetadataDBServiceMultiface(std::vector<boost::shared_ptr<MetadataDBServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~MetadataDBServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<MetadataDBServiceIf> > ifaces_;
  MetadataDBServiceMultiface() {}
  void add(boost::shared_ptr<MetadataDBServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class MetadataDBServiceConcurrentClient : virtual public MetadataDBServiceIf {
 public:
  MetadataDBServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  MetadataDBServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
