/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.cmu.pdl.indexfs.rpc;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2021-06-10")
public class MetadataIndexService {

  public interface Iface {

    public void Ping() throws ServerInternalError, org.apache.thrift.TException;

    public void FlushDB() throws IOError, ServerInternalError, org.apache.thrift.TException;

    public LookupInfo Access(OID obj_id) throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, DirectoryExpectedError, IOError, ServerInternalError, org.apache.thrift.TException;

    public LookupInfo Renew(OID obj_id) throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, DirectoryExpectedError, IOError, ServerInternalError, org.apache.thrift.TException;

    public StatInfo Getattr(OID obj_id) throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, IOError, ServerInternalError, org.apache.thrift.TException;

    public void Mknod(OID obj_id, short perm) throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException;

    public void Mknod_Bulk(OIDS obj_ids, short perm) throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException;

    public void Mkdir(OID obj_id, short perm, short hint_server1, short hint_server2) throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException;

    public void Mkdir_Presplit(OID obj_id, short perm, short hint_server1, short hint_server2) throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException;

    public boolean Chmod(OID obj_id, short perm) throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, IOError, ServerInternalError, org.apache.thrift.TException;

    public boolean Chown(OID obj_id, short uid, short gid) throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, IOError, ServerInternalError, org.apache.thrift.TException;

    public void CreateZeroth(long dir_id, short zeroth_server) throws WrongServerError, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException;

    public EntryList Readdir(long dir_id, short index) throws UnrecognizedDirectoryError, IOError, ServerInternalError, org.apache.thrift.TException;

    public String ReadBitmap(long dir_id) throws UnrecognizedDirectoryError, IOError, ServerInternalError, org.apache.thrift.TException;

    public void UpdateBitmap(long dir_id, String dmap_data) throws UnrecognizedDirectoryError, IOError, ServerInternalError, org.apache.thrift.TException;

    public void InsertSplit(long dir_id, short parent_index, short child_index, String path_split_files, String dmap_data, long min_seq, long max_seq, long num_entries) throws WrongServerError, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void Ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void FlushDB(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Access(OID obj_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Renew(OID obj_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Getattr(OID obj_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Mknod(OID obj_id, short perm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Mknod_Bulk(OIDS obj_ids, short perm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Mkdir(OID obj_id, short perm, short hint_server1, short hint_server2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Mkdir_Presplit(OID obj_id, short perm, short hint_server1, short hint_server2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Chmod(OID obj_id, short perm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Chown(OID obj_id, short uid, short gid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void CreateZeroth(long dir_id, short zeroth_server, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Readdir(long dir_id, short index, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ReadBitmap(long dir_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateBitmap(long dir_id, String dmap_data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void InsertSplit(long dir_id, short parent_index, short child_index, String path_split_files, String dmap_data, long min_seq, long max_seq, long num_entries, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void Ping() throws ServerInternalError, org.apache.thrift.TException
    {
      send_Ping();
      recv_Ping();
    }

    public void send_Ping() throws org.apache.thrift.TException
    {
      Ping_args args = new Ping_args();
      sendBase("Ping", args);
    }

    public void recv_Ping() throws ServerInternalError, org.apache.thrift.TException
    {
      Ping_result result = new Ping_result();
      receiveBase(result, "Ping");
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      return;
    }

    public void FlushDB() throws IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_FlushDB();
      recv_FlushDB();
    }

    public void send_FlushDB() throws org.apache.thrift.TException
    {
      FlushDB_args args = new FlushDB_args();
      sendBase("FlushDB", args);
    }

    public void recv_FlushDB() throws IOError, ServerInternalError, org.apache.thrift.TException
    {
      FlushDB_result result = new FlushDB_result();
      receiveBase(result, "FlushDB");
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      return;
    }

    public LookupInfo Access(OID obj_id) throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, DirectoryExpectedError, IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_Access(obj_id);
      return recv_Access();
    }

    public void send_Access(OID obj_id) throws org.apache.thrift.TException
    {
      Access_args args = new Access_args();
      args.setObj_id(obj_id);
      sendBase("Access", args);
    }

    public LookupInfo recv_Access() throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, DirectoryExpectedError, IOError, ServerInternalError, org.apache.thrift.TException
    {
      Access_result result = new Access_result();
      receiveBase(result, "Access");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknown_dir != null) {
        throw result.unknown_dir;
      }
      if (result.srv_redirect != null) {
        throw result.srv_redirect;
      }
      if (result.not_found != null) {
        throw result.not_found;
      }
      if (result.not_a_dir != null) {
        throw result.not_a_dir;
      }
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Access failed: unknown result");
    }

    public LookupInfo Renew(OID obj_id) throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, DirectoryExpectedError, IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_Renew(obj_id);
      return recv_Renew();
    }

    public void send_Renew(OID obj_id) throws org.apache.thrift.TException
    {
      Renew_args args = new Renew_args();
      args.setObj_id(obj_id);
      sendBase("Renew", args);
    }

    public LookupInfo recv_Renew() throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, DirectoryExpectedError, IOError, ServerInternalError, org.apache.thrift.TException
    {
      Renew_result result = new Renew_result();
      receiveBase(result, "Renew");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknown_dir != null) {
        throw result.unknown_dir;
      }
      if (result.srv_redirect != null) {
        throw result.srv_redirect;
      }
      if (result.not_found != null) {
        throw result.not_found;
      }
      if (result.not_a_dir != null) {
        throw result.not_a_dir;
      }
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Renew failed: unknown result");
    }

    public StatInfo Getattr(OID obj_id) throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_Getattr(obj_id);
      return recv_Getattr();
    }

    public void send_Getattr(OID obj_id) throws org.apache.thrift.TException
    {
      Getattr_args args = new Getattr_args();
      args.setObj_id(obj_id);
      sendBase("Getattr", args);
    }

    public StatInfo recv_Getattr() throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      Getattr_result result = new Getattr_result();
      receiveBase(result, "Getattr");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknown_dir != null) {
        throw result.unknown_dir;
      }
      if (result.srv_redirect != null) {
        throw result.srv_redirect;
      }
      if (result.not_found != null) {
        throw result.not_found;
      }
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Getattr failed: unknown result");
    }

    public void Mknod(OID obj_id, short perm) throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_Mknod(obj_id, perm);
      recv_Mknod();
    }

    public void send_Mknod(OID obj_id, short perm) throws org.apache.thrift.TException
    {
      Mknod_args args = new Mknod_args();
      args.setObj_id(obj_id);
      args.setPerm(perm);
      sendBase("Mknod", args);
    }

    public void recv_Mknod() throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      Mknod_result result = new Mknod_result();
      receiveBase(result, "Mknod");
      if (result.unknown_dir != null) {
        throw result.unknown_dir;
      }
      if (result.srv_redirect != null) {
        throw result.srv_redirect;
      }
      if (result.file_exists != null) {
        throw result.file_exists;
      }
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      return;
    }

    public void Mknod_Bulk(OIDS obj_ids, short perm) throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_Mknod_Bulk(obj_ids, perm);
      recv_Mknod_Bulk();
    }

    public void send_Mknod_Bulk(OIDS obj_ids, short perm) throws org.apache.thrift.TException
    {
      Mknod_Bulk_args args = new Mknod_Bulk_args();
      args.setObj_ids(obj_ids);
      args.setPerm(perm);
      sendBase("Mknod_Bulk", args);
    }

    public void recv_Mknod_Bulk() throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      Mknod_Bulk_result result = new Mknod_Bulk_result();
      receiveBase(result, "Mknod_Bulk");
      if (result.unknown_dir != null) {
        throw result.unknown_dir;
      }
      if (result.srv_redirect != null) {
        throw result.srv_redirect;
      }
      if (result.file_exists != null) {
        throw result.file_exists;
      }
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      return;
    }

    public void Mkdir(OID obj_id, short perm, short hint_server1, short hint_server2) throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_Mkdir(obj_id, perm, hint_server1, hint_server2);
      recv_Mkdir();
    }

    public void send_Mkdir(OID obj_id, short perm, short hint_server1, short hint_server2) throws org.apache.thrift.TException
    {
      Mkdir_args args = new Mkdir_args();
      args.setObj_id(obj_id);
      args.setPerm(perm);
      args.setHint_server1(hint_server1);
      args.setHint_server2(hint_server2);
      sendBase("Mkdir", args);
    }

    public void recv_Mkdir() throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      Mkdir_result result = new Mkdir_result();
      receiveBase(result, "Mkdir");
      if (result.unknown_dir != null) {
        throw result.unknown_dir;
      }
      if (result.srv_redirect != null) {
        throw result.srv_redirect;
      }
      if (result.file_exists != null) {
        throw result.file_exists;
      }
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      return;
    }

    public void Mkdir_Presplit(OID obj_id, short perm, short hint_server1, short hint_server2) throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_Mkdir_Presplit(obj_id, perm, hint_server1, hint_server2);
      recv_Mkdir_Presplit();
    }

    public void send_Mkdir_Presplit(OID obj_id, short perm, short hint_server1, short hint_server2) throws org.apache.thrift.TException
    {
      Mkdir_Presplit_args args = new Mkdir_Presplit_args();
      args.setObj_id(obj_id);
      args.setPerm(perm);
      args.setHint_server1(hint_server1);
      args.setHint_server2(hint_server2);
      sendBase("Mkdir_Presplit", args);
    }

    public void recv_Mkdir_Presplit() throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      Mkdir_Presplit_result result = new Mkdir_Presplit_result();
      receiveBase(result, "Mkdir_Presplit");
      if (result.unknown_dir != null) {
        throw result.unknown_dir;
      }
      if (result.srv_redirect != null) {
        throw result.srv_redirect;
      }
      if (result.file_exists != null) {
        throw result.file_exists;
      }
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      return;
    }

    public boolean Chmod(OID obj_id, short perm) throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_Chmod(obj_id, perm);
      return recv_Chmod();
    }

    public void send_Chmod(OID obj_id, short perm) throws org.apache.thrift.TException
    {
      Chmod_args args = new Chmod_args();
      args.setObj_id(obj_id);
      args.setPerm(perm);
      sendBase("Chmod", args);
    }

    public boolean recv_Chmod() throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      Chmod_result result = new Chmod_result();
      receiveBase(result, "Chmod");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknown_dir != null) {
        throw result.unknown_dir;
      }
      if (result.srv_redirect != null) {
        throw result.srv_redirect;
      }
      if (result.not_found != null) {
        throw result.not_found;
      }
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Chmod failed: unknown result");
    }

    public boolean Chown(OID obj_id, short uid, short gid) throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_Chown(obj_id, uid, gid);
      return recv_Chown();
    }

    public void send_Chown(OID obj_id, short uid, short gid) throws org.apache.thrift.TException
    {
      Chown_args args = new Chown_args();
      args.setObj_id(obj_id);
      args.setUid(uid);
      args.setGid(gid);
      sendBase("Chown", args);
    }

    public boolean recv_Chown() throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      Chown_result result = new Chown_result();
      receiveBase(result, "Chown");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknown_dir != null) {
        throw result.unknown_dir;
      }
      if (result.srv_redirect != null) {
        throw result.srv_redirect;
      }
      if (result.not_found != null) {
        throw result.not_found;
      }
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Chown failed: unknown result");
    }

    public void CreateZeroth(long dir_id, short zeroth_server) throws WrongServerError, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_CreateZeroth(dir_id, zeroth_server);
      recv_CreateZeroth();
    }

    public void send_CreateZeroth(long dir_id, short zeroth_server) throws org.apache.thrift.TException
    {
      CreateZeroth_args args = new CreateZeroth_args();
      args.setDir_id(dir_id);
      args.setZeroth_server(zeroth_server);
      sendBase("CreateZeroth", args);
    }

    public void recv_CreateZeroth() throws WrongServerError, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      CreateZeroth_result result = new CreateZeroth_result();
      receiveBase(result, "CreateZeroth");
      if (result.wrong_srv != null) {
        throw result.wrong_srv;
      }
      if (result.file_exists != null) {
        throw result.file_exists;
      }
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      return;
    }

    public EntryList Readdir(long dir_id, short index) throws UnrecognizedDirectoryError, IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_Readdir(dir_id, index);
      return recv_Readdir();
    }

    public void send_Readdir(long dir_id, short index) throws org.apache.thrift.TException
    {
      Readdir_args args = new Readdir_args();
      args.setDir_id(dir_id);
      args.setIndex(index);
      sendBase("Readdir", args);
    }

    public EntryList recv_Readdir() throws UnrecognizedDirectoryError, IOError, ServerInternalError, org.apache.thrift.TException
    {
      Readdir_result result = new Readdir_result();
      receiveBase(result, "Readdir");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknown_dir != null) {
        throw result.unknown_dir;
      }
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Readdir failed: unknown result");
    }

    public String ReadBitmap(long dir_id) throws UnrecognizedDirectoryError, IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_ReadBitmap(dir_id);
      return recv_ReadBitmap();
    }

    public void send_ReadBitmap(long dir_id) throws org.apache.thrift.TException
    {
      ReadBitmap_args args = new ReadBitmap_args();
      args.setDir_id(dir_id);
      sendBase("ReadBitmap", args);
    }

    public String recv_ReadBitmap() throws UnrecognizedDirectoryError, IOError, ServerInternalError, org.apache.thrift.TException
    {
      ReadBitmap_result result = new ReadBitmap_result();
      receiveBase(result, "ReadBitmap");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.unknown_dir != null) {
        throw result.unknown_dir;
      }
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ReadBitmap failed: unknown result");
    }

    public void UpdateBitmap(long dir_id, String dmap_data) throws UnrecognizedDirectoryError, IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_UpdateBitmap(dir_id, dmap_data);
      recv_UpdateBitmap();
    }

    public void send_UpdateBitmap(long dir_id, String dmap_data) throws org.apache.thrift.TException
    {
      UpdateBitmap_args args = new UpdateBitmap_args();
      args.setDir_id(dir_id);
      args.setDmap_data(dmap_data);
      sendBase("UpdateBitmap", args);
    }

    public void recv_UpdateBitmap() throws UnrecognizedDirectoryError, IOError, ServerInternalError, org.apache.thrift.TException
    {
      UpdateBitmap_result result = new UpdateBitmap_result();
      receiveBase(result, "UpdateBitmap");
      if (result.unknown_dir != null) {
        throw result.unknown_dir;
      }
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      return;
    }

    public void InsertSplit(long dir_id, short parent_index, short child_index, String path_split_files, String dmap_data, long min_seq, long max_seq, long num_entries) throws WrongServerError, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      send_InsertSplit(dir_id, parent_index, child_index, path_split_files, dmap_data, min_seq, max_seq, num_entries);
      recv_InsertSplit();
    }

    public void send_InsertSplit(long dir_id, short parent_index, short child_index, String path_split_files, String dmap_data, long min_seq, long max_seq, long num_entries) throws org.apache.thrift.TException
    {
      InsertSplit_args args = new InsertSplit_args();
      args.setDir_id(dir_id);
      args.setParent_index(parent_index);
      args.setChild_index(child_index);
      args.setPath_split_files(path_split_files);
      args.setDmap_data(dmap_data);
      args.setMin_seq(min_seq);
      args.setMax_seq(max_seq);
      args.setNum_entries(num_entries);
      sendBase("InsertSplit", args);
    }

    public void recv_InsertSplit() throws WrongServerError, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException
    {
      InsertSplit_result result = new InsertSplit_result();
      receiveBase(result, "InsertSplit");
      if (result.wrong_srv != null) {
        throw result.wrong_srv;
      }
      if (result.file_exists != null) {
        throw result.file_exists;
      }
      if (result.io_error != null) {
        throw result.io_error;
      }
      if (result.srv_error != null) {
        throw result.srv_error;
      }
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void Ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Ping_call method_call = new Ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public Ping_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Ping_args args = new Ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Ping();
      }
    }

    public void FlushDB(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      FlushDB_call method_call = new FlushDB_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class FlushDB_call extends org.apache.thrift.async.TAsyncMethodCall {
      public FlushDB_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("FlushDB", org.apache.thrift.protocol.TMessageType.CALL, 0));
        FlushDB_args args = new FlushDB_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_FlushDB();
      }
    }

    public void Access(OID obj_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Access_call method_call = new Access_call(obj_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Access_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OID obj_id;
      public Access_call(OID obj_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.obj_id = obj_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Access", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Access_args args = new Access_args();
        args.setObj_id(obj_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LookupInfo getResult() throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, DirectoryExpectedError, IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Access();
      }
    }

    public void Renew(OID obj_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Renew_call method_call = new Renew_call(obj_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Renew_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OID obj_id;
      public Renew_call(OID obj_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.obj_id = obj_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Renew", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Renew_args args = new Renew_args();
        args.setObj_id(obj_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public LookupInfo getResult() throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, DirectoryExpectedError, IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Renew();
      }
    }

    public void Getattr(OID obj_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Getattr_call method_call = new Getattr_call(obj_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Getattr_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OID obj_id;
      public Getattr_call(OID obj_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.obj_id = obj_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Getattr", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Getattr_args args = new Getattr_args();
        args.setObj_id(obj_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StatInfo getResult() throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Getattr();
      }
    }

    public void Mknod(OID obj_id, short perm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Mknod_call method_call = new Mknod_call(obj_id, perm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Mknod_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OID obj_id;
      private short perm;
      public Mknod_call(OID obj_id, short perm, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.obj_id = obj_id;
        this.perm = perm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Mknod", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Mknod_args args = new Mknod_args();
        args.setObj_id(obj_id);
        args.setPerm(perm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Mknod();
      }
    }

    public void Mknod_Bulk(OIDS obj_ids, short perm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Mknod_Bulk_call method_call = new Mknod_Bulk_call(obj_ids, perm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Mknod_Bulk_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OIDS obj_ids;
      private short perm;
      public Mknod_Bulk_call(OIDS obj_ids, short perm, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.obj_ids = obj_ids;
        this.perm = perm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Mknod_Bulk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Mknod_Bulk_args args = new Mknod_Bulk_args();
        args.setObj_ids(obj_ids);
        args.setPerm(perm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Mknod_Bulk();
      }
    }

    public void Mkdir(OID obj_id, short perm, short hint_server1, short hint_server2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Mkdir_call method_call = new Mkdir_call(obj_id, perm, hint_server1, hint_server2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Mkdir_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OID obj_id;
      private short perm;
      private short hint_server1;
      private short hint_server2;
      public Mkdir_call(OID obj_id, short perm, short hint_server1, short hint_server2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.obj_id = obj_id;
        this.perm = perm;
        this.hint_server1 = hint_server1;
        this.hint_server2 = hint_server2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Mkdir", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Mkdir_args args = new Mkdir_args();
        args.setObj_id(obj_id);
        args.setPerm(perm);
        args.setHint_server1(hint_server1);
        args.setHint_server2(hint_server2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Mkdir();
      }
    }

    public void Mkdir_Presplit(OID obj_id, short perm, short hint_server1, short hint_server2, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Mkdir_Presplit_call method_call = new Mkdir_Presplit_call(obj_id, perm, hint_server1, hint_server2, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Mkdir_Presplit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OID obj_id;
      private short perm;
      private short hint_server1;
      private short hint_server2;
      public Mkdir_Presplit_call(OID obj_id, short perm, short hint_server1, short hint_server2, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.obj_id = obj_id;
        this.perm = perm;
        this.hint_server1 = hint_server1;
        this.hint_server2 = hint_server2;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Mkdir_Presplit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Mkdir_Presplit_args args = new Mkdir_Presplit_args();
        args.setObj_id(obj_id);
        args.setPerm(perm);
        args.setHint_server1(hint_server1);
        args.setHint_server2(hint_server2);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws UnrecognizedDirectoryError, ServerRedirectionException, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Mkdir_Presplit();
      }
    }

    public void Chmod(OID obj_id, short perm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Chmod_call method_call = new Chmod_call(obj_id, perm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Chmod_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OID obj_id;
      private short perm;
      public Chmod_call(OID obj_id, short perm, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.obj_id = obj_id;
        this.perm = perm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Chmod", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Chmod_args args = new Chmod_args();
        args.setObj_id(obj_id);
        args.setPerm(perm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Chmod();
      }
    }

    public void Chown(OID obj_id, short uid, short gid, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Chown_call method_call = new Chown_call(obj_id, uid, gid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Chown_call extends org.apache.thrift.async.TAsyncMethodCall {
      private OID obj_id;
      private short uid;
      private short gid;
      public Chown_call(OID obj_id, short uid, short gid, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.obj_id = obj_id;
        this.uid = uid;
        this.gid = gid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Chown", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Chown_args args = new Chown_args();
        args.setObj_id(obj_id);
        args.setUid(uid);
        args.setGid(gid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws UnrecognizedDirectoryError, ServerRedirectionException, FileNotFoundException, IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Chown();
      }
    }

    public void CreateZeroth(long dir_id, short zeroth_server, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      CreateZeroth_call method_call = new CreateZeroth_call(dir_id, zeroth_server, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class CreateZeroth_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long dir_id;
      private short zeroth_server;
      public CreateZeroth_call(long dir_id, short zeroth_server, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dir_id = dir_id;
        this.zeroth_server = zeroth_server;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("CreateZeroth", org.apache.thrift.protocol.TMessageType.CALL, 0));
        CreateZeroth_args args = new CreateZeroth_args();
        args.setDir_id(dir_id);
        args.setZeroth_server(zeroth_server);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws WrongServerError, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_CreateZeroth();
      }
    }

    public void Readdir(long dir_id, short index, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Readdir_call method_call = new Readdir_call(dir_id, index, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Readdir_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long dir_id;
      private short index;
      public Readdir_call(long dir_id, short index, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dir_id = dir_id;
        this.index = index;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Readdir", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Readdir_args args = new Readdir_args();
        args.setDir_id(dir_id);
        args.setIndex(index);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public EntryList getResult() throws UnrecognizedDirectoryError, IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Readdir();
      }
    }

    public void ReadBitmap(long dir_id, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ReadBitmap_call method_call = new ReadBitmap_call(dir_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ReadBitmap_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long dir_id;
      public ReadBitmap_call(long dir_id, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dir_id = dir_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ReadBitmap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ReadBitmap_args args = new ReadBitmap_args();
        args.setDir_id(dir_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public String getResult() throws UnrecognizedDirectoryError, IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ReadBitmap();
      }
    }

    public void UpdateBitmap(long dir_id, String dmap_data, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateBitmap_call method_call = new UpdateBitmap_call(dir_id, dmap_data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateBitmap_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long dir_id;
      private String dmap_data;
      public UpdateBitmap_call(long dir_id, String dmap_data, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dir_id = dir_id;
        this.dmap_data = dmap_data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateBitmap", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateBitmap_args args = new UpdateBitmap_args();
        args.setDir_id(dir_id);
        args.setDmap_data(dmap_data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws UnrecognizedDirectoryError, IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateBitmap();
      }
    }

    public void InsertSplit(long dir_id, short parent_index, short child_index, String path_split_files, String dmap_data, long min_seq, long max_seq, long num_entries, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      InsertSplit_call method_call = new InsertSplit_call(dir_id, parent_index, child_index, path_split_files, dmap_data, min_seq, max_seq, num_entries, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class InsertSplit_call extends org.apache.thrift.async.TAsyncMethodCall {
      private long dir_id;
      private short parent_index;
      private short child_index;
      private String path_split_files;
      private String dmap_data;
      private long min_seq;
      private long max_seq;
      private long num_entries;
      public InsertSplit_call(long dir_id, short parent_index, short child_index, String path_split_files, String dmap_data, long min_seq, long max_seq, long num_entries, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.dir_id = dir_id;
        this.parent_index = parent_index;
        this.child_index = child_index;
        this.path_split_files = path_split_files;
        this.dmap_data = dmap_data;
        this.min_seq = min_seq;
        this.max_seq = max_seq;
        this.num_entries = num_entries;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("InsertSplit", org.apache.thrift.protocol.TMessageType.CALL, 0));
        InsertSplit_args args = new InsertSplit_args();
        args.setDir_id(dir_id);
        args.setParent_index(parent_index);
        args.setChild_index(child_index);
        args.setPath_split_files(path_split_files);
        args.setDmap_data(dmap_data);
        args.setMin_seq(min_seq);
        args.setMax_seq(max_seq);
        args.setNum_entries(num_entries);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws WrongServerError, FileAlreadyExistsException, IOError, ServerInternalError, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_InsertSplit();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("Ping", new Ping());
      processMap.put("FlushDB", new FlushDB());
      processMap.put("Access", new Access());
      processMap.put("Renew", new Renew());
      processMap.put("Getattr", new Getattr());
      processMap.put("Mknod", new Mknod());
      processMap.put("Mknod_Bulk", new Mknod_Bulk());
      processMap.put("Mkdir", new Mkdir());
      processMap.put("Mkdir_Presplit", new Mkdir_Presplit());
      processMap.put("Chmod", new Chmod());
      processMap.put("Chown", new Chown());
      processMap.put("CreateZeroth", new CreateZeroth());
      processMap.put("Readdir", new Readdir());
      processMap.put("ReadBitmap", new ReadBitmap());
      processMap.put("UpdateBitmap", new UpdateBitmap());
      processMap.put("InsertSplit", new InsertSplit());
      return processMap;
    }

    public static class Ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Ping_args> {
      public Ping() {
        super("Ping");
      }

      public Ping_args getEmptyArgsInstance() {
        return new Ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Ping_result getResult(I iface, Ping_args args) throws org.apache.thrift.TException {
        Ping_result result = new Ping_result();
        try {
          iface.Ping();
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class FlushDB<I extends Iface> extends org.apache.thrift.ProcessFunction<I, FlushDB_args> {
      public FlushDB() {
        super("FlushDB");
      }

      public FlushDB_args getEmptyArgsInstance() {
        return new FlushDB_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public FlushDB_result getResult(I iface, FlushDB_args args) throws org.apache.thrift.TException {
        FlushDB_result result = new FlushDB_result();
        try {
          iface.FlushDB();
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class Access<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Access_args> {
      public Access() {
        super("Access");
      }

      public Access_args getEmptyArgsInstance() {
        return new Access_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Access_result getResult(I iface, Access_args args) throws org.apache.thrift.TException {
        Access_result result = new Access_result();
        try {
          result.success = iface.Access(args.obj_id);
        } catch (UnrecognizedDirectoryError unknown_dir) {
          result.unknown_dir = unknown_dir;
        } catch (ServerRedirectionException srv_redirect) {
          result.srv_redirect = srv_redirect;
        } catch (FileNotFoundException not_found) {
          result.not_found = not_found;
        } catch (DirectoryExpectedError not_a_dir) {
          result.not_a_dir = not_a_dir;
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class Renew<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Renew_args> {
      public Renew() {
        super("Renew");
      }

      public Renew_args getEmptyArgsInstance() {
        return new Renew_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Renew_result getResult(I iface, Renew_args args) throws org.apache.thrift.TException {
        Renew_result result = new Renew_result();
        try {
          result.success = iface.Renew(args.obj_id);
        } catch (UnrecognizedDirectoryError unknown_dir) {
          result.unknown_dir = unknown_dir;
        } catch (ServerRedirectionException srv_redirect) {
          result.srv_redirect = srv_redirect;
        } catch (FileNotFoundException not_found) {
          result.not_found = not_found;
        } catch (DirectoryExpectedError not_a_dir) {
          result.not_a_dir = not_a_dir;
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class Getattr<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Getattr_args> {
      public Getattr() {
        super("Getattr");
      }

      public Getattr_args getEmptyArgsInstance() {
        return new Getattr_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Getattr_result getResult(I iface, Getattr_args args) throws org.apache.thrift.TException {
        Getattr_result result = new Getattr_result();
        try {
          result.success = iface.Getattr(args.obj_id);
        } catch (UnrecognizedDirectoryError unknown_dir) {
          result.unknown_dir = unknown_dir;
        } catch (ServerRedirectionException srv_redirect) {
          result.srv_redirect = srv_redirect;
        } catch (FileNotFoundException not_found) {
          result.not_found = not_found;
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class Mknod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Mknod_args> {
      public Mknod() {
        super("Mknod");
      }

      public Mknod_args getEmptyArgsInstance() {
        return new Mknod_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Mknod_result getResult(I iface, Mknod_args args) throws org.apache.thrift.TException {
        Mknod_result result = new Mknod_result();
        try {
          iface.Mknod(args.obj_id, args.perm);
        } catch (UnrecognizedDirectoryError unknown_dir) {
          result.unknown_dir = unknown_dir;
        } catch (ServerRedirectionException srv_redirect) {
          result.srv_redirect = srv_redirect;
        } catch (FileAlreadyExistsException file_exists) {
          result.file_exists = file_exists;
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class Mknod_Bulk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Mknod_Bulk_args> {
      public Mknod_Bulk() {
        super("Mknod_Bulk");
      }

      public Mknod_Bulk_args getEmptyArgsInstance() {
        return new Mknod_Bulk_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Mknod_Bulk_result getResult(I iface, Mknod_Bulk_args args) throws org.apache.thrift.TException {
        Mknod_Bulk_result result = new Mknod_Bulk_result();
        try {
          iface.Mknod_Bulk(args.obj_ids, args.perm);
        } catch (UnrecognizedDirectoryError unknown_dir) {
          result.unknown_dir = unknown_dir;
        } catch (ServerRedirectionException srv_redirect) {
          result.srv_redirect = srv_redirect;
        } catch (FileAlreadyExistsException file_exists) {
          result.file_exists = file_exists;
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class Mkdir<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Mkdir_args> {
      public Mkdir() {
        super("Mkdir");
      }

      public Mkdir_args getEmptyArgsInstance() {
        return new Mkdir_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Mkdir_result getResult(I iface, Mkdir_args args) throws org.apache.thrift.TException {
        Mkdir_result result = new Mkdir_result();
        try {
          iface.Mkdir(args.obj_id, args.perm, args.hint_server1, args.hint_server2);
        } catch (UnrecognizedDirectoryError unknown_dir) {
          result.unknown_dir = unknown_dir;
        } catch (ServerRedirectionException srv_redirect) {
          result.srv_redirect = srv_redirect;
        } catch (FileAlreadyExistsException file_exists) {
          result.file_exists = file_exists;
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class Mkdir_Presplit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Mkdir_Presplit_args> {
      public Mkdir_Presplit() {
        super("Mkdir_Presplit");
      }

      public Mkdir_Presplit_args getEmptyArgsInstance() {
        return new Mkdir_Presplit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Mkdir_Presplit_result getResult(I iface, Mkdir_Presplit_args args) throws org.apache.thrift.TException {
        Mkdir_Presplit_result result = new Mkdir_Presplit_result();
        try {
          iface.Mkdir_Presplit(args.obj_id, args.perm, args.hint_server1, args.hint_server2);
        } catch (UnrecognizedDirectoryError unknown_dir) {
          result.unknown_dir = unknown_dir;
        } catch (ServerRedirectionException srv_redirect) {
          result.srv_redirect = srv_redirect;
        } catch (FileAlreadyExistsException file_exists) {
          result.file_exists = file_exists;
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class Chmod<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Chmod_args> {
      public Chmod() {
        super("Chmod");
      }

      public Chmod_args getEmptyArgsInstance() {
        return new Chmod_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Chmod_result getResult(I iface, Chmod_args args) throws org.apache.thrift.TException {
        Chmod_result result = new Chmod_result();
        try {
          result.success = iface.Chmod(args.obj_id, args.perm);
          result.setSuccessIsSet(true);
        } catch (UnrecognizedDirectoryError unknown_dir) {
          result.unknown_dir = unknown_dir;
        } catch (ServerRedirectionException srv_redirect) {
          result.srv_redirect = srv_redirect;
        } catch (FileNotFoundException not_found) {
          result.not_found = not_found;
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class Chown<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Chown_args> {
      public Chown() {
        super("Chown");
      }

      public Chown_args getEmptyArgsInstance() {
        return new Chown_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Chown_result getResult(I iface, Chown_args args) throws org.apache.thrift.TException {
        Chown_result result = new Chown_result();
        try {
          result.success = iface.Chown(args.obj_id, args.uid, args.gid);
          result.setSuccessIsSet(true);
        } catch (UnrecognizedDirectoryError unknown_dir) {
          result.unknown_dir = unknown_dir;
        } catch (ServerRedirectionException srv_redirect) {
          result.srv_redirect = srv_redirect;
        } catch (FileNotFoundException not_found) {
          result.not_found = not_found;
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class CreateZeroth<I extends Iface> extends org.apache.thrift.ProcessFunction<I, CreateZeroth_args> {
      public CreateZeroth() {
        super("CreateZeroth");
      }

      public CreateZeroth_args getEmptyArgsInstance() {
        return new CreateZeroth_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public CreateZeroth_result getResult(I iface, CreateZeroth_args args) throws org.apache.thrift.TException {
        CreateZeroth_result result = new CreateZeroth_result();
        try {
          iface.CreateZeroth(args.dir_id, args.zeroth_server);
        } catch (WrongServerError wrong_srv) {
          result.wrong_srv = wrong_srv;
        } catch (FileAlreadyExistsException file_exists) {
          result.file_exists = file_exists;
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class Readdir<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Readdir_args> {
      public Readdir() {
        super("Readdir");
      }

      public Readdir_args getEmptyArgsInstance() {
        return new Readdir_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Readdir_result getResult(I iface, Readdir_args args) throws org.apache.thrift.TException {
        Readdir_result result = new Readdir_result();
        try {
          result.success = iface.Readdir(args.dir_id, args.index);
        } catch (UnrecognizedDirectoryError unknown_dir) {
          result.unknown_dir = unknown_dir;
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class ReadBitmap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ReadBitmap_args> {
      public ReadBitmap() {
        super("ReadBitmap");
      }

      public ReadBitmap_args getEmptyArgsInstance() {
        return new ReadBitmap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ReadBitmap_result getResult(I iface, ReadBitmap_args args) throws org.apache.thrift.TException {
        ReadBitmap_result result = new ReadBitmap_result();
        try {
          result.success = iface.ReadBitmap(args.dir_id);
        } catch (UnrecognizedDirectoryError unknown_dir) {
          result.unknown_dir = unknown_dir;
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class UpdateBitmap<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateBitmap_args> {
      public UpdateBitmap() {
        super("UpdateBitmap");
      }

      public UpdateBitmap_args getEmptyArgsInstance() {
        return new UpdateBitmap_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateBitmap_result getResult(I iface, UpdateBitmap_args args) throws org.apache.thrift.TException {
        UpdateBitmap_result result = new UpdateBitmap_result();
        try {
          iface.UpdateBitmap(args.dir_id, args.dmap_data);
        } catch (UnrecognizedDirectoryError unknown_dir) {
          result.unknown_dir = unknown_dir;
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

    public static class InsertSplit<I extends Iface> extends org.apache.thrift.ProcessFunction<I, InsertSplit_args> {
      public InsertSplit() {
        super("InsertSplit");
      }

      public InsertSplit_args getEmptyArgsInstance() {
        return new InsertSplit_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public InsertSplit_result getResult(I iface, InsertSplit_args args) throws org.apache.thrift.TException {
        InsertSplit_result result = new InsertSplit_result();
        try {
          iface.InsertSplit(args.dir_id, args.parent_index, args.child_index, args.path_split_files, args.dmap_data, args.min_seq, args.max_seq, args.num_entries);
        } catch (WrongServerError wrong_srv) {
          result.wrong_srv = wrong_srv;
        } catch (FileAlreadyExistsException file_exists) {
          result.file_exists = file_exists;
        } catch (IOError io_error) {
          result.io_error = io_error;
        } catch (ServerInternalError srv_error) {
          result.srv_error = srv_error;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("Ping", new Ping());
      processMap.put("FlushDB", new FlushDB());
      processMap.put("Access", new Access());
      processMap.put("Renew", new Renew());
      processMap.put("Getattr", new Getattr());
      processMap.put("Mknod", new Mknod());
      processMap.put("Mknod_Bulk", new Mknod_Bulk());
      processMap.put("Mkdir", new Mkdir());
      processMap.put("Mkdir_Presplit", new Mkdir_Presplit());
      processMap.put("Chmod", new Chmod());
      processMap.put("Chown", new Chown());
      processMap.put("CreateZeroth", new CreateZeroth());
      processMap.put("Readdir", new Readdir());
      processMap.put("ReadBitmap", new ReadBitmap());
      processMap.put("UpdateBitmap", new UpdateBitmap());
      processMap.put("InsertSplit", new InsertSplit());
      return processMap;
    }

    public static class Ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Ping_args, Void> {
      public Ping() {
        super("Ping");
      }

      public Ping_args getEmptyArgsInstance() {
        return new Ping_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Ping_result result = new Ping_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Ping_result result = new Ping_result();
            if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Ping(resultHandler);
      }
    }

    public static class FlushDB<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, FlushDB_args, Void> {
      public FlushDB() {
        super("FlushDB");
      }

      public FlushDB_args getEmptyArgsInstance() {
        return new FlushDB_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            FlushDB_result result = new FlushDB_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            FlushDB_result result = new FlushDB_result();
            if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, FlushDB_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.FlushDB(resultHandler);
      }
    }

    public static class Access<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Access_args, LookupInfo> {
      public Access() {
        super("Access");
      }

      public Access_args getEmptyArgsInstance() {
        return new Access_args();
      }

      public AsyncMethodCallback<LookupInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LookupInfo>() { 
          public void onComplete(LookupInfo o) {
            Access_result result = new Access_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Access_result result = new Access_result();
            if (e instanceof UnrecognizedDirectoryError) {
                        result.unknown_dir = (UnrecognizedDirectoryError) e;
                        result.setUnknown_dirIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerRedirectionException) {
                        result.srv_redirect = (ServerRedirectionException) e;
                        result.setSrv_redirectIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FileNotFoundException) {
                        result.not_found = (FileNotFoundException) e;
                        result.setNot_foundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof DirectoryExpectedError) {
                        result.not_a_dir = (DirectoryExpectedError) e;
                        result.setNot_a_dirIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Access_args args, org.apache.thrift.async.AsyncMethodCallback<LookupInfo> resultHandler) throws TException {
        iface.Access(args.obj_id,resultHandler);
      }
    }

    public static class Renew<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Renew_args, LookupInfo> {
      public Renew() {
        super("Renew");
      }

      public Renew_args getEmptyArgsInstance() {
        return new Renew_args();
      }

      public AsyncMethodCallback<LookupInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<LookupInfo>() { 
          public void onComplete(LookupInfo o) {
            Renew_result result = new Renew_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Renew_result result = new Renew_result();
            if (e instanceof UnrecognizedDirectoryError) {
                        result.unknown_dir = (UnrecognizedDirectoryError) e;
                        result.setUnknown_dirIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerRedirectionException) {
                        result.srv_redirect = (ServerRedirectionException) e;
                        result.setSrv_redirectIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FileNotFoundException) {
                        result.not_found = (FileNotFoundException) e;
                        result.setNot_foundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof DirectoryExpectedError) {
                        result.not_a_dir = (DirectoryExpectedError) e;
                        result.setNot_a_dirIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Renew_args args, org.apache.thrift.async.AsyncMethodCallback<LookupInfo> resultHandler) throws TException {
        iface.Renew(args.obj_id,resultHandler);
      }
    }

    public static class Getattr<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Getattr_args, StatInfo> {
      public Getattr() {
        super("Getattr");
      }

      public Getattr_args getEmptyArgsInstance() {
        return new Getattr_args();
      }

      public AsyncMethodCallback<StatInfo> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StatInfo>() { 
          public void onComplete(StatInfo o) {
            Getattr_result result = new Getattr_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Getattr_result result = new Getattr_result();
            if (e instanceof UnrecognizedDirectoryError) {
                        result.unknown_dir = (UnrecognizedDirectoryError) e;
                        result.setUnknown_dirIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerRedirectionException) {
                        result.srv_redirect = (ServerRedirectionException) e;
                        result.setSrv_redirectIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FileNotFoundException) {
                        result.not_found = (FileNotFoundException) e;
                        result.setNot_foundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Getattr_args args, org.apache.thrift.async.AsyncMethodCallback<StatInfo> resultHandler) throws TException {
        iface.Getattr(args.obj_id,resultHandler);
      }
    }

    public static class Mknod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Mknod_args, Void> {
      public Mknod() {
        super("Mknod");
      }

      public Mknod_args getEmptyArgsInstance() {
        return new Mknod_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Mknod_result result = new Mknod_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Mknod_result result = new Mknod_result();
            if (e instanceof UnrecognizedDirectoryError) {
                        result.unknown_dir = (UnrecognizedDirectoryError) e;
                        result.setUnknown_dirIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerRedirectionException) {
                        result.srv_redirect = (ServerRedirectionException) e;
                        result.setSrv_redirectIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FileAlreadyExistsException) {
                        result.file_exists = (FileAlreadyExistsException) e;
                        result.setFile_existsIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Mknod_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Mknod(args.obj_id, args.perm,resultHandler);
      }
    }

    public static class Mknod_Bulk<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Mknod_Bulk_args, Void> {
      public Mknod_Bulk() {
        super("Mknod_Bulk");
      }

      public Mknod_Bulk_args getEmptyArgsInstance() {
        return new Mknod_Bulk_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Mknod_Bulk_result result = new Mknod_Bulk_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Mknod_Bulk_result result = new Mknod_Bulk_result();
            if (e instanceof UnrecognizedDirectoryError) {
                        result.unknown_dir = (UnrecognizedDirectoryError) e;
                        result.setUnknown_dirIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerRedirectionException) {
                        result.srv_redirect = (ServerRedirectionException) e;
                        result.setSrv_redirectIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FileAlreadyExistsException) {
                        result.file_exists = (FileAlreadyExistsException) e;
                        result.setFile_existsIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Mknod_Bulk_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Mknod_Bulk(args.obj_ids, args.perm,resultHandler);
      }
    }

    public static class Mkdir<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Mkdir_args, Void> {
      public Mkdir() {
        super("Mkdir");
      }

      public Mkdir_args getEmptyArgsInstance() {
        return new Mkdir_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Mkdir_result result = new Mkdir_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Mkdir_result result = new Mkdir_result();
            if (e instanceof UnrecognizedDirectoryError) {
                        result.unknown_dir = (UnrecognizedDirectoryError) e;
                        result.setUnknown_dirIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerRedirectionException) {
                        result.srv_redirect = (ServerRedirectionException) e;
                        result.setSrv_redirectIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FileAlreadyExistsException) {
                        result.file_exists = (FileAlreadyExistsException) e;
                        result.setFile_existsIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Mkdir_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Mkdir(args.obj_id, args.perm, args.hint_server1, args.hint_server2,resultHandler);
      }
    }

    public static class Mkdir_Presplit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Mkdir_Presplit_args, Void> {
      public Mkdir_Presplit() {
        super("Mkdir_Presplit");
      }

      public Mkdir_Presplit_args getEmptyArgsInstance() {
        return new Mkdir_Presplit_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Mkdir_Presplit_result result = new Mkdir_Presplit_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Mkdir_Presplit_result result = new Mkdir_Presplit_result();
            if (e instanceof UnrecognizedDirectoryError) {
                        result.unknown_dir = (UnrecognizedDirectoryError) e;
                        result.setUnknown_dirIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerRedirectionException) {
                        result.srv_redirect = (ServerRedirectionException) e;
                        result.setSrv_redirectIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FileAlreadyExistsException) {
                        result.file_exists = (FileAlreadyExistsException) e;
                        result.setFile_existsIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Mkdir_Presplit_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Mkdir_Presplit(args.obj_id, args.perm, args.hint_server1, args.hint_server2,resultHandler);
      }
    }

    public static class Chmod<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Chmod_args, Boolean> {
      public Chmod() {
        super("Chmod");
      }

      public Chmod_args getEmptyArgsInstance() {
        return new Chmod_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            Chmod_result result = new Chmod_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Chmod_result result = new Chmod_result();
            if (e instanceof UnrecognizedDirectoryError) {
                        result.unknown_dir = (UnrecognizedDirectoryError) e;
                        result.setUnknown_dirIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerRedirectionException) {
                        result.srv_redirect = (ServerRedirectionException) e;
                        result.setSrv_redirectIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FileNotFoundException) {
                        result.not_found = (FileNotFoundException) e;
                        result.setNot_foundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Chmod_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.Chmod(args.obj_id, args.perm,resultHandler);
      }
    }

    public static class Chown<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Chown_args, Boolean> {
      public Chown() {
        super("Chown");
      }

      public Chown_args getEmptyArgsInstance() {
        return new Chown_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            Chown_result result = new Chown_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Chown_result result = new Chown_result();
            if (e instanceof UnrecognizedDirectoryError) {
                        result.unknown_dir = (UnrecognizedDirectoryError) e;
                        result.setUnknown_dirIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerRedirectionException) {
                        result.srv_redirect = (ServerRedirectionException) e;
                        result.setSrv_redirectIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FileNotFoundException) {
                        result.not_found = (FileNotFoundException) e;
                        result.setNot_foundIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Chown_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.Chown(args.obj_id, args.uid, args.gid,resultHandler);
      }
    }

    public static class CreateZeroth<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, CreateZeroth_args, Void> {
      public CreateZeroth() {
        super("CreateZeroth");
      }

      public CreateZeroth_args getEmptyArgsInstance() {
        return new CreateZeroth_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            CreateZeroth_result result = new CreateZeroth_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            CreateZeroth_result result = new CreateZeroth_result();
            if (e instanceof WrongServerError) {
                        result.wrong_srv = (WrongServerError) e;
                        result.setWrong_srvIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FileAlreadyExistsException) {
                        result.file_exists = (FileAlreadyExistsException) e;
                        result.setFile_existsIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, CreateZeroth_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.CreateZeroth(args.dir_id, args.zeroth_server,resultHandler);
      }
    }

    public static class Readdir<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Readdir_args, EntryList> {
      public Readdir() {
        super("Readdir");
      }

      public Readdir_args getEmptyArgsInstance() {
        return new Readdir_args();
      }

      public AsyncMethodCallback<EntryList> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<EntryList>() { 
          public void onComplete(EntryList o) {
            Readdir_result result = new Readdir_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Readdir_result result = new Readdir_result();
            if (e instanceof UnrecognizedDirectoryError) {
                        result.unknown_dir = (UnrecognizedDirectoryError) e;
                        result.setUnknown_dirIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Readdir_args args, org.apache.thrift.async.AsyncMethodCallback<EntryList> resultHandler) throws TException {
        iface.Readdir(args.dir_id, args.index,resultHandler);
      }
    }

    public static class ReadBitmap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ReadBitmap_args, String> {
      public ReadBitmap() {
        super("ReadBitmap");
      }

      public ReadBitmap_args getEmptyArgsInstance() {
        return new ReadBitmap_args();
      }

      public AsyncMethodCallback<String> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<String>() { 
          public void onComplete(String o) {
            ReadBitmap_result result = new ReadBitmap_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ReadBitmap_result result = new ReadBitmap_result();
            if (e instanceof UnrecognizedDirectoryError) {
                        result.unknown_dir = (UnrecognizedDirectoryError) e;
                        result.setUnknown_dirIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ReadBitmap_args args, org.apache.thrift.async.AsyncMethodCallback<String> resultHandler) throws TException {
        iface.ReadBitmap(args.dir_id,resultHandler);
      }
    }

    public static class UpdateBitmap<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateBitmap_args, Void> {
      public UpdateBitmap() {
        super("UpdateBitmap");
      }

      public UpdateBitmap_args getEmptyArgsInstance() {
        return new UpdateBitmap_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateBitmap_result result = new UpdateBitmap_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateBitmap_result result = new UpdateBitmap_result();
            if (e instanceof UnrecognizedDirectoryError) {
                        result.unknown_dir = (UnrecognizedDirectoryError) e;
                        result.setUnknown_dirIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateBitmap_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateBitmap(args.dir_id, args.dmap_data,resultHandler);
      }
    }

    public static class InsertSplit<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, InsertSplit_args, Void> {
      public InsertSplit() {
        super("InsertSplit");
      }

      public InsertSplit_args getEmptyArgsInstance() {
        return new InsertSplit_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            InsertSplit_result result = new InsertSplit_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            InsertSplit_result result = new InsertSplit_result();
            if (e instanceof WrongServerError) {
                        result.wrong_srv = (WrongServerError) e;
                        result.setWrong_srvIsSet(true);
                        msg = result;
            }
            else             if (e instanceof FileAlreadyExistsException) {
                        result.file_exists = (FileAlreadyExistsException) e;
                        result.setFile_existsIsSet(true);
                        msg = result;
            }
            else             if (e instanceof IOError) {
                        result.io_error = (IOError) e;
                        result.setIo_errorIsSet(true);
                        msg = result;
            }
            else             if (e instanceof ServerInternalError) {
                        result.srv_error = (ServerInternalError) e;
                        result.setSrv_errorIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, InsertSplit_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.InsertSplit(args.dir_id, args.parent_index, args.child_index, args.path_split_files, args.dmap_data, args.min_seq, args.max_seq, args.num_entries,resultHandler);
      }
    }

  }

  public static class Ping_args implements org.apache.thrift.TBase<Ping_args, Ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<Ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ping_args.class, metaDataMap);
    }

    public Ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Ping_args(Ping_args other) {
    }

    public Ping_args deepCopy() {
      return new Ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Ping_args)
        return this.equals((Ping_args)that);
      return false;
    }

    public boolean equals(Ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(Ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Ping_argsStandardSchemeFactory implements SchemeFactory {
      public Ping_argsStandardScheme getScheme() {
        return new Ping_argsStandardScheme();
      }
    }

    private static class Ping_argsStandardScheme extends StandardScheme<Ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Ping_argsTupleSchemeFactory implements SchemeFactory {
      public Ping_argsTupleScheme getScheme() {
        return new Ping_argsTupleScheme();
      }
    }

    private static class Ping_argsTupleScheme extends TupleScheme<Ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Ping_result implements org.apache.thrift.TBase<Ping_result, Ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<Ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ping_result");

    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Ping_resultTupleSchemeFactory());
    }

    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SRV_ERROR((short)1, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ping_result.class, metaDataMap);
    }

    public Ping_result() {
    }

    public Ping_result(
      ServerInternalError srv_error)
    {
      this();
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Ping_result(Ping_result other) {
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public Ping_result deepCopy() {
      return new Ping_result(this);
    }

    @Override
    public void clear() {
      this.srv_error = null;
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public Ping_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Ping_result)
        return this.equals((Ping_result)that);
      return false;
    }

    public boolean equals(Ping_result that) {
      if (that == null)
        return false;

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(Ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Ping_result(");
      boolean first = true;

      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Ping_resultStandardSchemeFactory implements SchemeFactory {
      public Ping_resultStandardScheme getScheme() {
        return new Ping_resultStandardScheme();
      }
    }

    private static class Ping_resultStandardScheme extends StandardScheme<Ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Ping_resultTupleSchemeFactory implements SchemeFactory {
      public Ping_resultTupleScheme getScheme() {
        return new Ping_resultTupleScheme();
      }
    }

    private static class Ping_resultTupleScheme extends TupleScheme<Ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSrv_error()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class FlushDB_args implements org.apache.thrift.TBase<FlushDB_args, FlushDB_args._Fields>, java.io.Serializable, Cloneable, Comparable<FlushDB_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FlushDB_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new FlushDB_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new FlushDB_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FlushDB_args.class, metaDataMap);
    }

    public FlushDB_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FlushDB_args(FlushDB_args other) {
    }

    public FlushDB_args deepCopy() {
      return new FlushDB_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof FlushDB_args)
        return this.equals((FlushDB_args)that);
      return false;
    }

    public boolean equals(FlushDB_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(FlushDB_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("FlushDB_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FlushDB_argsStandardSchemeFactory implements SchemeFactory {
      public FlushDB_argsStandardScheme getScheme() {
        return new FlushDB_argsStandardScheme();
      }
    }

    private static class FlushDB_argsStandardScheme extends StandardScheme<FlushDB_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FlushDB_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FlushDB_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FlushDB_argsTupleSchemeFactory implements SchemeFactory {
      public FlushDB_argsTupleScheme getScheme() {
        return new FlushDB_argsTupleScheme();
      }
    }

    private static class FlushDB_argsTupleScheme extends TupleScheme<FlushDB_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FlushDB_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FlushDB_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class FlushDB_result implements org.apache.thrift.TBase<FlushDB_result, FlushDB_result._Fields>, java.io.Serializable, Cloneable, Comparable<FlushDB_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FlushDB_result");

    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new FlushDB_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new FlushDB_resultTupleSchemeFactory());
    }

    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IO_ERROR((short)1, "io_error"),
      SRV_ERROR((short)2, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IO_ERROR
            return IO_ERROR;
          case 2: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FlushDB_result.class, metaDataMap);
    }

    public FlushDB_result() {
    }

    public FlushDB_result(
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public FlushDB_result(FlushDB_result other) {
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public FlushDB_result deepCopy() {
      return new FlushDB_result(this);
    }

    @Override
    public void clear() {
      this.io_error = null;
      this.srv_error = null;
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public FlushDB_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public FlushDB_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof FlushDB_result)
        return this.equals((FlushDB_result)that);
      return false;
    }

    public boolean equals(FlushDB_result that) {
      if (that == null)
        return false;

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(FlushDB_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("FlushDB_result(");
      boolean first = true;

      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class FlushDB_resultStandardSchemeFactory implements SchemeFactory {
      public FlushDB_resultStandardScheme getScheme() {
        return new FlushDB_resultStandardScheme();
      }
    }

    private static class FlushDB_resultStandardScheme extends StandardScheme<FlushDB_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, FlushDB_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, FlushDB_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class FlushDB_resultTupleSchemeFactory implements SchemeFactory {
      public FlushDB_resultTupleScheme getScheme() {
        return new FlushDB_resultTupleScheme();
      }
    }

    private static class FlushDB_resultTupleScheme extends TupleScheme<FlushDB_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, FlushDB_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetIo_error()) {
          optionals.set(0);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, FlushDB_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(1)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class Access_args implements org.apache.thrift.TBase<Access_args, Access_args._Fields>, java.io.Serializable, Cloneable, Comparable<Access_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Access_args");

    private static final org.apache.thrift.protocol.TField OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("obj_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Access_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Access_argsTupleSchemeFactory());
    }

    public OID obj_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJ_ID((short)1, "obj_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJ_ID
            return OBJ_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("obj_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Access_args.class, metaDataMap);
    }

    public Access_args() {
    }

    public Access_args(
      OID obj_id)
    {
      this();
      this.obj_id = obj_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Access_args(Access_args other) {
      if (other.isSetObj_id()) {
        this.obj_id = new OID(other.obj_id);
      }
    }

    public Access_args deepCopy() {
      return new Access_args(this);
    }

    @Override
    public void clear() {
      this.obj_id = null;
    }

    public OID getObj_id() {
      return this.obj_id;
    }

    public Access_args setObj_id(OID obj_id) {
      this.obj_id = obj_id;
      return this;
    }

    public void unsetObj_id() {
      this.obj_id = null;
    }

    /** Returns true if field obj_id is set (has been assigned a value) and false otherwise */
    public boolean isSetObj_id() {
      return this.obj_id != null;
    }

    public void setObj_idIsSet(boolean value) {
      if (!value) {
        this.obj_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJ_ID:
        if (value == null) {
          unsetObj_id();
        } else {
          setObj_id((OID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJ_ID:
        return getObj_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJ_ID:
        return isSetObj_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Access_args)
        return this.equals((Access_args)that);
      return false;
    }

    public boolean equals(Access_args that) {
      if (that == null)
        return false;

      boolean this_present_obj_id = true && this.isSetObj_id();
      boolean that_present_obj_id = true && that.isSetObj_id();
      if (this_present_obj_id || that_present_obj_id) {
        if (!(this_present_obj_id && that_present_obj_id))
          return false;
        if (!this.obj_id.equals(that.obj_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_obj_id = true && (isSetObj_id());
      list.add(present_obj_id);
      if (present_obj_id)
        list.add(obj_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(Access_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObj_id()).compareTo(other.isSetObj_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObj_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj_id, other.obj_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Access_args(");
      boolean first = true;

      sb.append("obj_id:");
      if (this.obj_id == null) {
        sb.append("null");
      } else {
        sb.append(this.obj_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (obj_id != null) {
        obj_id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Access_argsStandardSchemeFactory implements SchemeFactory {
      public Access_argsStandardScheme getScheme() {
        return new Access_argsStandardScheme();
      }
    }

    private static class Access_argsStandardScheme extends StandardScheme<Access_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Access_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.obj_id = new OID();
                struct.obj_id.read(iprot);
                struct.setObj_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Access_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.obj_id != null) {
          oprot.writeFieldBegin(OBJ_ID_FIELD_DESC);
          struct.obj_id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Access_argsTupleSchemeFactory implements SchemeFactory {
      public Access_argsTupleScheme getScheme() {
        return new Access_argsTupleScheme();
      }
    }

    private static class Access_argsTupleScheme extends TupleScheme<Access_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Access_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObj_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetObj_id()) {
          struct.obj_id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Access_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.obj_id = new OID();
          struct.obj_id.read(iprot);
          struct.setObj_idIsSet(true);
        }
      }
    }

  }

  public static class Access_result implements org.apache.thrift.TBase<Access_result, Access_result._Fields>, java.io.Serializable, Cloneable, Comparable<Access_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Access_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_dir", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SRV_REDIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_redirect", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("not_found", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField NOT_A_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("not_a_dir", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Access_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Access_resultTupleSchemeFactory());
    }

    public LookupInfo success; // required
    public UnrecognizedDirectoryError unknown_dir; // required
    public ServerRedirectionException srv_redirect; // required
    public FileNotFoundException not_found; // required
    public DirectoryExpectedError not_a_dir; // required
    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNKNOWN_DIR((short)1, "unknown_dir"),
      SRV_REDIRECT((short)2, "srv_redirect"),
      NOT_FOUND((short)3, "not_found"),
      NOT_A_DIR((short)4, "not_a_dir"),
      IO_ERROR((short)5, "io_error"),
      SRV_ERROR((short)6, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN_DIR
            return UNKNOWN_DIR;
          case 2: // SRV_REDIRECT
            return SRV_REDIRECT;
          case 3: // NOT_FOUND
            return NOT_FOUND;
          case 4: // NOT_A_DIR
            return NOT_A_DIR;
          case 5: // IO_ERROR
            return IO_ERROR;
          case 6: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LookupInfo.class)));
      tmpMap.put(_Fields.UNKNOWN_DIR, new org.apache.thrift.meta_data.FieldMetaData("unknown_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_REDIRECT, new org.apache.thrift.meta_data.FieldMetaData("srv_redirect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("not_found", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_A_DIR, new org.apache.thrift.meta_data.FieldMetaData("not_a_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Access_result.class, metaDataMap);
    }

    public Access_result() {
    }

    public Access_result(
      LookupInfo success,
      UnrecognizedDirectoryError unknown_dir,
      ServerRedirectionException srv_redirect,
      FileNotFoundException not_found,
      DirectoryExpectedError not_a_dir,
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.success = success;
      this.unknown_dir = unknown_dir;
      this.srv_redirect = srv_redirect;
      this.not_found = not_found;
      this.not_a_dir = not_a_dir;
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Access_result(Access_result other) {
      if (other.isSetSuccess()) {
        this.success = new LookupInfo(other.success);
      }
      if (other.isSetUnknown_dir()) {
        this.unknown_dir = new UnrecognizedDirectoryError(other.unknown_dir);
      }
      if (other.isSetSrv_redirect()) {
        this.srv_redirect = new ServerRedirectionException(other.srv_redirect);
      }
      if (other.isSetNot_found()) {
        this.not_found = new FileNotFoundException(other.not_found);
      }
      if (other.isSetNot_a_dir()) {
        this.not_a_dir = new DirectoryExpectedError(other.not_a_dir);
      }
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public Access_result deepCopy() {
      return new Access_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unknown_dir = null;
      this.srv_redirect = null;
      this.not_found = null;
      this.not_a_dir = null;
      this.io_error = null;
      this.srv_error = null;
    }

    public LookupInfo getSuccess() {
      return this.success;
    }

    public Access_result setSuccess(LookupInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UnrecognizedDirectoryError getUnknown_dir() {
      return this.unknown_dir;
    }

    public Access_result setUnknown_dir(UnrecognizedDirectoryError unknown_dir) {
      this.unknown_dir = unknown_dir;
      return this;
    }

    public void unsetUnknown_dir() {
      this.unknown_dir = null;
    }

    /** Returns true if field unknown_dir is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_dir() {
      return this.unknown_dir != null;
    }

    public void setUnknown_dirIsSet(boolean value) {
      if (!value) {
        this.unknown_dir = null;
      }
    }

    public ServerRedirectionException getSrv_redirect() {
      return this.srv_redirect;
    }

    public Access_result setSrv_redirect(ServerRedirectionException srv_redirect) {
      this.srv_redirect = srv_redirect;
      return this;
    }

    public void unsetSrv_redirect() {
      this.srv_redirect = null;
    }

    /** Returns true if field srv_redirect is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_redirect() {
      return this.srv_redirect != null;
    }

    public void setSrv_redirectIsSet(boolean value) {
      if (!value) {
        this.srv_redirect = null;
      }
    }

    public FileNotFoundException getNot_found() {
      return this.not_found;
    }

    public Access_result setNot_found(FileNotFoundException not_found) {
      this.not_found = not_found;
      return this;
    }

    public void unsetNot_found() {
      this.not_found = null;
    }

    /** Returns true if field not_found is set (has been assigned a value) and false otherwise */
    public boolean isSetNot_found() {
      return this.not_found != null;
    }

    public void setNot_foundIsSet(boolean value) {
      if (!value) {
        this.not_found = null;
      }
    }

    public DirectoryExpectedError getNot_a_dir() {
      return this.not_a_dir;
    }

    public Access_result setNot_a_dir(DirectoryExpectedError not_a_dir) {
      this.not_a_dir = not_a_dir;
      return this;
    }

    public void unsetNot_a_dir() {
      this.not_a_dir = null;
    }

    /** Returns true if field not_a_dir is set (has been assigned a value) and false otherwise */
    public boolean isSetNot_a_dir() {
      return this.not_a_dir != null;
    }

    public void setNot_a_dirIsSet(boolean value) {
      if (!value) {
        this.not_a_dir = null;
      }
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public Access_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public Access_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LookupInfo)value);
        }
        break;

      case UNKNOWN_DIR:
        if (value == null) {
          unsetUnknown_dir();
        } else {
          setUnknown_dir((UnrecognizedDirectoryError)value);
        }
        break;

      case SRV_REDIRECT:
        if (value == null) {
          unsetSrv_redirect();
        } else {
          setSrv_redirect((ServerRedirectionException)value);
        }
        break;

      case NOT_FOUND:
        if (value == null) {
          unsetNot_found();
        } else {
          setNot_found((FileNotFoundException)value);
        }
        break;

      case NOT_A_DIR:
        if (value == null) {
          unsetNot_a_dir();
        } else {
          setNot_a_dir((DirectoryExpectedError)value);
        }
        break;

      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNKNOWN_DIR:
        return getUnknown_dir();

      case SRV_REDIRECT:
        return getSrv_redirect();

      case NOT_FOUND:
        return getNot_found();

      case NOT_A_DIR:
        return getNot_a_dir();

      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN_DIR:
        return isSetUnknown_dir();
      case SRV_REDIRECT:
        return isSetSrv_redirect();
      case NOT_FOUND:
        return isSetNot_found();
      case NOT_A_DIR:
        return isSetNot_a_dir();
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Access_result)
        return this.equals((Access_result)that);
      return false;
    }

    public boolean equals(Access_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unknown_dir = true && this.isSetUnknown_dir();
      boolean that_present_unknown_dir = true && that.isSetUnknown_dir();
      if (this_present_unknown_dir || that_present_unknown_dir) {
        if (!(this_present_unknown_dir && that_present_unknown_dir))
          return false;
        if (!this.unknown_dir.equals(that.unknown_dir))
          return false;
      }

      boolean this_present_srv_redirect = true && this.isSetSrv_redirect();
      boolean that_present_srv_redirect = true && that.isSetSrv_redirect();
      if (this_present_srv_redirect || that_present_srv_redirect) {
        if (!(this_present_srv_redirect && that_present_srv_redirect))
          return false;
        if (!this.srv_redirect.equals(that.srv_redirect))
          return false;
      }

      boolean this_present_not_found = true && this.isSetNot_found();
      boolean that_present_not_found = true && that.isSetNot_found();
      if (this_present_not_found || that_present_not_found) {
        if (!(this_present_not_found && that_present_not_found))
          return false;
        if (!this.not_found.equals(that.not_found))
          return false;
      }

      boolean this_present_not_a_dir = true && this.isSetNot_a_dir();
      boolean that_present_not_a_dir = true && that.isSetNot_a_dir();
      if (this_present_not_a_dir || that_present_not_a_dir) {
        if (!(this_present_not_a_dir && that_present_not_a_dir))
          return false;
        if (!this.not_a_dir.equals(that.not_a_dir))
          return false;
      }

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_unknown_dir = true && (isSetUnknown_dir());
      list.add(present_unknown_dir);
      if (present_unknown_dir)
        list.add(unknown_dir);

      boolean present_srv_redirect = true && (isSetSrv_redirect());
      list.add(present_srv_redirect);
      if (present_srv_redirect)
        list.add(srv_redirect);

      boolean present_not_found = true && (isSetNot_found());
      list.add(present_not_found);
      if (present_not_found)
        list.add(not_found);

      boolean present_not_a_dir = true && (isSetNot_a_dir());
      list.add(present_not_a_dir);
      if (present_not_a_dir)
        list.add(not_a_dir);

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(Access_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnknown_dir()).compareTo(other.isSetUnknown_dir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_dir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_dir, other.unknown_dir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_redirect()).compareTo(other.isSetSrv_redirect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_redirect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_redirect, other.srv_redirect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNot_found()).compareTo(other.isSetNot_found());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNot_found()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.not_found, other.not_found);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNot_a_dir()).compareTo(other.isSetNot_a_dir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNot_a_dir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.not_a_dir, other.not_a_dir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Access_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknown_dir:");
      if (this.unknown_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_dir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_redirect:");
      if (this.srv_redirect == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_redirect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("not_found:");
      if (this.not_found == null) {
        sb.append("null");
      } else {
        sb.append(this.not_found);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("not_a_dir:");
      if (this.not_a_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.not_a_dir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Access_resultStandardSchemeFactory implements SchemeFactory {
      public Access_resultStandardScheme getScheme() {
        return new Access_resultStandardScheme();
      }
    }

    private static class Access_resultStandardScheme extends StandardScheme<Access_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Access_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LookupInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_dir = new UnrecognizedDirectoryError();
                struct.unknown_dir.read(iprot);
                struct.setUnknown_dirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRV_REDIRECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_redirect = new ServerRedirectionException();
                struct.srv_redirect.read(iprot);
                struct.setSrv_redirectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.not_found = new FileNotFoundException();
                struct.not_found.read(iprot);
                struct.setNot_foundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NOT_A_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.not_a_dir = new DirectoryExpectedError();
                struct.not_a_dir.read(iprot);
                struct.setNot_a_dirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Access_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unknown_dir != null) {
          oprot.writeFieldBegin(UNKNOWN_DIR_FIELD_DESC);
          struct.unknown_dir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_redirect != null) {
          oprot.writeFieldBegin(SRV_REDIRECT_FIELD_DESC);
          struct.srv_redirect.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.not_found != null) {
          oprot.writeFieldBegin(NOT_FOUND_FIELD_DESC);
          struct.not_found.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.not_a_dir != null) {
          oprot.writeFieldBegin(NOT_A_DIR_FIELD_DESC);
          struct.not_a_dir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Access_resultTupleSchemeFactory implements SchemeFactory {
      public Access_resultTupleScheme getScheme() {
        return new Access_resultTupleScheme();
      }
    }

    private static class Access_resultTupleScheme extends TupleScheme<Access_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Access_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknown_dir()) {
          optionals.set(1);
        }
        if (struct.isSetSrv_redirect()) {
          optionals.set(2);
        }
        if (struct.isSetNot_found()) {
          optionals.set(3);
        }
        if (struct.isSetNot_a_dir()) {
          optionals.set(4);
        }
        if (struct.isSetIo_error()) {
          optionals.set(5);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUnknown_dir()) {
          struct.unknown_dir.write(oprot);
        }
        if (struct.isSetSrv_redirect()) {
          struct.srv_redirect.write(oprot);
        }
        if (struct.isSetNot_found()) {
          struct.not_found.write(oprot);
        }
        if (struct.isSetNot_a_dir()) {
          struct.not_a_dir.write(oprot);
        }
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Access_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = new LookupInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknown_dir = new UnrecognizedDirectoryError();
          struct.unknown_dir.read(iprot);
          struct.setUnknown_dirIsSet(true);
        }
        if (incoming.get(2)) {
          struct.srv_redirect = new ServerRedirectionException();
          struct.srv_redirect.read(iprot);
          struct.setSrv_redirectIsSet(true);
        }
        if (incoming.get(3)) {
          struct.not_found = new FileNotFoundException();
          struct.not_found.read(iprot);
          struct.setNot_foundIsSet(true);
        }
        if (incoming.get(4)) {
          struct.not_a_dir = new DirectoryExpectedError();
          struct.not_a_dir.read(iprot);
          struct.setNot_a_dirIsSet(true);
        }
        if (incoming.get(5)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(6)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class Renew_args implements org.apache.thrift.TBase<Renew_args, Renew_args._Fields>, java.io.Serializable, Cloneable, Comparable<Renew_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Renew_args");

    private static final org.apache.thrift.protocol.TField OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("obj_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Renew_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Renew_argsTupleSchemeFactory());
    }

    public OID obj_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJ_ID((short)1, "obj_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJ_ID
            return OBJ_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("obj_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Renew_args.class, metaDataMap);
    }

    public Renew_args() {
    }

    public Renew_args(
      OID obj_id)
    {
      this();
      this.obj_id = obj_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Renew_args(Renew_args other) {
      if (other.isSetObj_id()) {
        this.obj_id = new OID(other.obj_id);
      }
    }

    public Renew_args deepCopy() {
      return new Renew_args(this);
    }

    @Override
    public void clear() {
      this.obj_id = null;
    }

    public OID getObj_id() {
      return this.obj_id;
    }

    public Renew_args setObj_id(OID obj_id) {
      this.obj_id = obj_id;
      return this;
    }

    public void unsetObj_id() {
      this.obj_id = null;
    }

    /** Returns true if field obj_id is set (has been assigned a value) and false otherwise */
    public boolean isSetObj_id() {
      return this.obj_id != null;
    }

    public void setObj_idIsSet(boolean value) {
      if (!value) {
        this.obj_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJ_ID:
        if (value == null) {
          unsetObj_id();
        } else {
          setObj_id((OID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJ_ID:
        return getObj_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJ_ID:
        return isSetObj_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Renew_args)
        return this.equals((Renew_args)that);
      return false;
    }

    public boolean equals(Renew_args that) {
      if (that == null)
        return false;

      boolean this_present_obj_id = true && this.isSetObj_id();
      boolean that_present_obj_id = true && that.isSetObj_id();
      if (this_present_obj_id || that_present_obj_id) {
        if (!(this_present_obj_id && that_present_obj_id))
          return false;
        if (!this.obj_id.equals(that.obj_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_obj_id = true && (isSetObj_id());
      list.add(present_obj_id);
      if (present_obj_id)
        list.add(obj_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(Renew_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObj_id()).compareTo(other.isSetObj_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObj_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj_id, other.obj_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Renew_args(");
      boolean first = true;

      sb.append("obj_id:");
      if (this.obj_id == null) {
        sb.append("null");
      } else {
        sb.append(this.obj_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (obj_id != null) {
        obj_id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Renew_argsStandardSchemeFactory implements SchemeFactory {
      public Renew_argsStandardScheme getScheme() {
        return new Renew_argsStandardScheme();
      }
    }

    private static class Renew_argsStandardScheme extends StandardScheme<Renew_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Renew_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.obj_id = new OID();
                struct.obj_id.read(iprot);
                struct.setObj_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Renew_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.obj_id != null) {
          oprot.writeFieldBegin(OBJ_ID_FIELD_DESC);
          struct.obj_id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Renew_argsTupleSchemeFactory implements SchemeFactory {
      public Renew_argsTupleScheme getScheme() {
        return new Renew_argsTupleScheme();
      }
    }

    private static class Renew_argsTupleScheme extends TupleScheme<Renew_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Renew_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObj_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetObj_id()) {
          struct.obj_id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Renew_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.obj_id = new OID();
          struct.obj_id.read(iprot);
          struct.setObj_idIsSet(true);
        }
      }
    }

  }

  public static class Renew_result implements org.apache.thrift.TBase<Renew_result, Renew_result._Fields>, java.io.Serializable, Cloneable, Comparable<Renew_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Renew_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_dir", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SRV_REDIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_redirect", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("not_found", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField NOT_A_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("not_a_dir", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)5);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Renew_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Renew_resultTupleSchemeFactory());
    }

    public LookupInfo success; // required
    public UnrecognizedDirectoryError unknown_dir; // required
    public ServerRedirectionException srv_redirect; // required
    public FileNotFoundException not_found; // required
    public DirectoryExpectedError not_a_dir; // required
    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNKNOWN_DIR((short)1, "unknown_dir"),
      SRV_REDIRECT((short)2, "srv_redirect"),
      NOT_FOUND((short)3, "not_found"),
      NOT_A_DIR((short)4, "not_a_dir"),
      IO_ERROR((short)5, "io_error"),
      SRV_ERROR((short)6, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN_DIR
            return UNKNOWN_DIR;
          case 2: // SRV_REDIRECT
            return SRV_REDIRECT;
          case 3: // NOT_FOUND
            return NOT_FOUND;
          case 4: // NOT_A_DIR
            return NOT_A_DIR;
          case 5: // IO_ERROR
            return IO_ERROR;
          case 6: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, LookupInfo.class)));
      tmpMap.put(_Fields.UNKNOWN_DIR, new org.apache.thrift.meta_data.FieldMetaData("unknown_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_REDIRECT, new org.apache.thrift.meta_data.FieldMetaData("srv_redirect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("not_found", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_A_DIR, new org.apache.thrift.meta_data.FieldMetaData("not_a_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Renew_result.class, metaDataMap);
    }

    public Renew_result() {
    }

    public Renew_result(
      LookupInfo success,
      UnrecognizedDirectoryError unknown_dir,
      ServerRedirectionException srv_redirect,
      FileNotFoundException not_found,
      DirectoryExpectedError not_a_dir,
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.success = success;
      this.unknown_dir = unknown_dir;
      this.srv_redirect = srv_redirect;
      this.not_found = not_found;
      this.not_a_dir = not_a_dir;
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Renew_result(Renew_result other) {
      if (other.isSetSuccess()) {
        this.success = new LookupInfo(other.success);
      }
      if (other.isSetUnknown_dir()) {
        this.unknown_dir = new UnrecognizedDirectoryError(other.unknown_dir);
      }
      if (other.isSetSrv_redirect()) {
        this.srv_redirect = new ServerRedirectionException(other.srv_redirect);
      }
      if (other.isSetNot_found()) {
        this.not_found = new FileNotFoundException(other.not_found);
      }
      if (other.isSetNot_a_dir()) {
        this.not_a_dir = new DirectoryExpectedError(other.not_a_dir);
      }
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public Renew_result deepCopy() {
      return new Renew_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unknown_dir = null;
      this.srv_redirect = null;
      this.not_found = null;
      this.not_a_dir = null;
      this.io_error = null;
      this.srv_error = null;
    }

    public LookupInfo getSuccess() {
      return this.success;
    }

    public Renew_result setSuccess(LookupInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UnrecognizedDirectoryError getUnknown_dir() {
      return this.unknown_dir;
    }

    public Renew_result setUnknown_dir(UnrecognizedDirectoryError unknown_dir) {
      this.unknown_dir = unknown_dir;
      return this;
    }

    public void unsetUnknown_dir() {
      this.unknown_dir = null;
    }

    /** Returns true if field unknown_dir is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_dir() {
      return this.unknown_dir != null;
    }

    public void setUnknown_dirIsSet(boolean value) {
      if (!value) {
        this.unknown_dir = null;
      }
    }

    public ServerRedirectionException getSrv_redirect() {
      return this.srv_redirect;
    }

    public Renew_result setSrv_redirect(ServerRedirectionException srv_redirect) {
      this.srv_redirect = srv_redirect;
      return this;
    }

    public void unsetSrv_redirect() {
      this.srv_redirect = null;
    }

    /** Returns true if field srv_redirect is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_redirect() {
      return this.srv_redirect != null;
    }

    public void setSrv_redirectIsSet(boolean value) {
      if (!value) {
        this.srv_redirect = null;
      }
    }

    public FileNotFoundException getNot_found() {
      return this.not_found;
    }

    public Renew_result setNot_found(FileNotFoundException not_found) {
      this.not_found = not_found;
      return this;
    }

    public void unsetNot_found() {
      this.not_found = null;
    }

    /** Returns true if field not_found is set (has been assigned a value) and false otherwise */
    public boolean isSetNot_found() {
      return this.not_found != null;
    }

    public void setNot_foundIsSet(boolean value) {
      if (!value) {
        this.not_found = null;
      }
    }

    public DirectoryExpectedError getNot_a_dir() {
      return this.not_a_dir;
    }

    public Renew_result setNot_a_dir(DirectoryExpectedError not_a_dir) {
      this.not_a_dir = not_a_dir;
      return this;
    }

    public void unsetNot_a_dir() {
      this.not_a_dir = null;
    }

    /** Returns true if field not_a_dir is set (has been assigned a value) and false otherwise */
    public boolean isSetNot_a_dir() {
      return this.not_a_dir != null;
    }

    public void setNot_a_dirIsSet(boolean value) {
      if (!value) {
        this.not_a_dir = null;
      }
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public Renew_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public Renew_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((LookupInfo)value);
        }
        break;

      case UNKNOWN_DIR:
        if (value == null) {
          unsetUnknown_dir();
        } else {
          setUnknown_dir((UnrecognizedDirectoryError)value);
        }
        break;

      case SRV_REDIRECT:
        if (value == null) {
          unsetSrv_redirect();
        } else {
          setSrv_redirect((ServerRedirectionException)value);
        }
        break;

      case NOT_FOUND:
        if (value == null) {
          unsetNot_found();
        } else {
          setNot_found((FileNotFoundException)value);
        }
        break;

      case NOT_A_DIR:
        if (value == null) {
          unsetNot_a_dir();
        } else {
          setNot_a_dir((DirectoryExpectedError)value);
        }
        break;

      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNKNOWN_DIR:
        return getUnknown_dir();

      case SRV_REDIRECT:
        return getSrv_redirect();

      case NOT_FOUND:
        return getNot_found();

      case NOT_A_DIR:
        return getNot_a_dir();

      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN_DIR:
        return isSetUnknown_dir();
      case SRV_REDIRECT:
        return isSetSrv_redirect();
      case NOT_FOUND:
        return isSetNot_found();
      case NOT_A_DIR:
        return isSetNot_a_dir();
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Renew_result)
        return this.equals((Renew_result)that);
      return false;
    }

    public boolean equals(Renew_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unknown_dir = true && this.isSetUnknown_dir();
      boolean that_present_unknown_dir = true && that.isSetUnknown_dir();
      if (this_present_unknown_dir || that_present_unknown_dir) {
        if (!(this_present_unknown_dir && that_present_unknown_dir))
          return false;
        if (!this.unknown_dir.equals(that.unknown_dir))
          return false;
      }

      boolean this_present_srv_redirect = true && this.isSetSrv_redirect();
      boolean that_present_srv_redirect = true && that.isSetSrv_redirect();
      if (this_present_srv_redirect || that_present_srv_redirect) {
        if (!(this_present_srv_redirect && that_present_srv_redirect))
          return false;
        if (!this.srv_redirect.equals(that.srv_redirect))
          return false;
      }

      boolean this_present_not_found = true && this.isSetNot_found();
      boolean that_present_not_found = true && that.isSetNot_found();
      if (this_present_not_found || that_present_not_found) {
        if (!(this_present_not_found && that_present_not_found))
          return false;
        if (!this.not_found.equals(that.not_found))
          return false;
      }

      boolean this_present_not_a_dir = true && this.isSetNot_a_dir();
      boolean that_present_not_a_dir = true && that.isSetNot_a_dir();
      if (this_present_not_a_dir || that_present_not_a_dir) {
        if (!(this_present_not_a_dir && that_present_not_a_dir))
          return false;
        if (!this.not_a_dir.equals(that.not_a_dir))
          return false;
      }

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_unknown_dir = true && (isSetUnknown_dir());
      list.add(present_unknown_dir);
      if (present_unknown_dir)
        list.add(unknown_dir);

      boolean present_srv_redirect = true && (isSetSrv_redirect());
      list.add(present_srv_redirect);
      if (present_srv_redirect)
        list.add(srv_redirect);

      boolean present_not_found = true && (isSetNot_found());
      list.add(present_not_found);
      if (present_not_found)
        list.add(not_found);

      boolean present_not_a_dir = true && (isSetNot_a_dir());
      list.add(present_not_a_dir);
      if (present_not_a_dir)
        list.add(not_a_dir);

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(Renew_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnknown_dir()).compareTo(other.isSetUnknown_dir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_dir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_dir, other.unknown_dir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_redirect()).compareTo(other.isSetSrv_redirect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_redirect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_redirect, other.srv_redirect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNot_found()).compareTo(other.isSetNot_found());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNot_found()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.not_found, other.not_found);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNot_a_dir()).compareTo(other.isSetNot_a_dir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNot_a_dir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.not_a_dir, other.not_a_dir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Renew_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknown_dir:");
      if (this.unknown_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_dir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_redirect:");
      if (this.srv_redirect == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_redirect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("not_found:");
      if (this.not_found == null) {
        sb.append("null");
      } else {
        sb.append(this.not_found);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("not_a_dir:");
      if (this.not_a_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.not_a_dir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Renew_resultStandardSchemeFactory implements SchemeFactory {
      public Renew_resultStandardScheme getScheme() {
        return new Renew_resultStandardScheme();
      }
    }

    private static class Renew_resultStandardScheme extends StandardScheme<Renew_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Renew_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new LookupInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_dir = new UnrecognizedDirectoryError();
                struct.unknown_dir.read(iprot);
                struct.setUnknown_dirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRV_REDIRECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_redirect = new ServerRedirectionException();
                struct.srv_redirect.read(iprot);
                struct.setSrv_redirectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.not_found = new FileNotFoundException();
                struct.not_found.read(iprot);
                struct.setNot_foundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // NOT_A_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.not_a_dir = new DirectoryExpectedError();
                struct.not_a_dir.read(iprot);
                struct.setNot_a_dirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Renew_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unknown_dir != null) {
          oprot.writeFieldBegin(UNKNOWN_DIR_FIELD_DESC);
          struct.unknown_dir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_redirect != null) {
          oprot.writeFieldBegin(SRV_REDIRECT_FIELD_DESC);
          struct.srv_redirect.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.not_found != null) {
          oprot.writeFieldBegin(NOT_FOUND_FIELD_DESC);
          struct.not_found.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.not_a_dir != null) {
          oprot.writeFieldBegin(NOT_A_DIR_FIELD_DESC);
          struct.not_a_dir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Renew_resultTupleSchemeFactory implements SchemeFactory {
      public Renew_resultTupleScheme getScheme() {
        return new Renew_resultTupleScheme();
      }
    }

    private static class Renew_resultTupleScheme extends TupleScheme<Renew_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Renew_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknown_dir()) {
          optionals.set(1);
        }
        if (struct.isSetSrv_redirect()) {
          optionals.set(2);
        }
        if (struct.isSetNot_found()) {
          optionals.set(3);
        }
        if (struct.isSetNot_a_dir()) {
          optionals.set(4);
        }
        if (struct.isSetIo_error()) {
          optionals.set(5);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUnknown_dir()) {
          struct.unknown_dir.write(oprot);
        }
        if (struct.isSetSrv_redirect()) {
          struct.srv_redirect.write(oprot);
        }
        if (struct.isSetNot_found()) {
          struct.not_found.write(oprot);
        }
        if (struct.isSetNot_a_dir()) {
          struct.not_a_dir.write(oprot);
        }
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Renew_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.success = new LookupInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknown_dir = new UnrecognizedDirectoryError();
          struct.unknown_dir.read(iprot);
          struct.setUnknown_dirIsSet(true);
        }
        if (incoming.get(2)) {
          struct.srv_redirect = new ServerRedirectionException();
          struct.srv_redirect.read(iprot);
          struct.setSrv_redirectIsSet(true);
        }
        if (incoming.get(3)) {
          struct.not_found = new FileNotFoundException();
          struct.not_found.read(iprot);
          struct.setNot_foundIsSet(true);
        }
        if (incoming.get(4)) {
          struct.not_a_dir = new DirectoryExpectedError();
          struct.not_a_dir.read(iprot);
          struct.setNot_a_dirIsSet(true);
        }
        if (incoming.get(5)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(6)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class Getattr_args implements org.apache.thrift.TBase<Getattr_args, Getattr_args._Fields>, java.io.Serializable, Cloneable, Comparable<Getattr_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Getattr_args");

    private static final org.apache.thrift.protocol.TField OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("obj_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Getattr_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Getattr_argsTupleSchemeFactory());
    }

    public OID obj_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJ_ID((short)1, "obj_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJ_ID
            return OBJ_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("obj_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Getattr_args.class, metaDataMap);
    }

    public Getattr_args() {
    }

    public Getattr_args(
      OID obj_id)
    {
      this();
      this.obj_id = obj_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Getattr_args(Getattr_args other) {
      if (other.isSetObj_id()) {
        this.obj_id = new OID(other.obj_id);
      }
    }

    public Getattr_args deepCopy() {
      return new Getattr_args(this);
    }

    @Override
    public void clear() {
      this.obj_id = null;
    }

    public OID getObj_id() {
      return this.obj_id;
    }

    public Getattr_args setObj_id(OID obj_id) {
      this.obj_id = obj_id;
      return this;
    }

    public void unsetObj_id() {
      this.obj_id = null;
    }

    /** Returns true if field obj_id is set (has been assigned a value) and false otherwise */
    public boolean isSetObj_id() {
      return this.obj_id != null;
    }

    public void setObj_idIsSet(boolean value) {
      if (!value) {
        this.obj_id = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJ_ID:
        if (value == null) {
          unsetObj_id();
        } else {
          setObj_id((OID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJ_ID:
        return getObj_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJ_ID:
        return isSetObj_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Getattr_args)
        return this.equals((Getattr_args)that);
      return false;
    }

    public boolean equals(Getattr_args that) {
      if (that == null)
        return false;

      boolean this_present_obj_id = true && this.isSetObj_id();
      boolean that_present_obj_id = true && that.isSetObj_id();
      if (this_present_obj_id || that_present_obj_id) {
        if (!(this_present_obj_id && that_present_obj_id))
          return false;
        if (!this.obj_id.equals(that.obj_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_obj_id = true && (isSetObj_id());
      list.add(present_obj_id);
      if (present_obj_id)
        list.add(obj_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(Getattr_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObj_id()).compareTo(other.isSetObj_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObj_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj_id, other.obj_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Getattr_args(");
      boolean first = true;

      sb.append("obj_id:");
      if (this.obj_id == null) {
        sb.append("null");
      } else {
        sb.append(this.obj_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (obj_id != null) {
        obj_id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Getattr_argsStandardSchemeFactory implements SchemeFactory {
      public Getattr_argsStandardScheme getScheme() {
        return new Getattr_argsStandardScheme();
      }
    }

    private static class Getattr_argsStandardScheme extends StandardScheme<Getattr_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Getattr_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.obj_id = new OID();
                struct.obj_id.read(iprot);
                struct.setObj_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Getattr_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.obj_id != null) {
          oprot.writeFieldBegin(OBJ_ID_FIELD_DESC);
          struct.obj_id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Getattr_argsTupleSchemeFactory implements SchemeFactory {
      public Getattr_argsTupleScheme getScheme() {
        return new Getattr_argsTupleScheme();
      }
    }

    private static class Getattr_argsTupleScheme extends TupleScheme<Getattr_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Getattr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObj_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetObj_id()) {
          struct.obj_id.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Getattr_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.obj_id = new OID();
          struct.obj_id.read(iprot);
          struct.setObj_idIsSet(true);
        }
      }
    }

  }

  public static class Getattr_result implements org.apache.thrift.TBase<Getattr_result, Getattr_result._Fields>, java.io.Serializable, Cloneable, Comparable<Getattr_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Getattr_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_dir", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SRV_REDIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_redirect", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("not_found", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Getattr_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Getattr_resultTupleSchemeFactory());
    }

    public StatInfo success; // required
    public UnrecognizedDirectoryError unknown_dir; // required
    public ServerRedirectionException srv_redirect; // required
    public FileNotFoundException not_found; // required
    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNKNOWN_DIR((short)1, "unknown_dir"),
      SRV_REDIRECT((short)2, "srv_redirect"),
      NOT_FOUND((short)3, "not_found"),
      IO_ERROR((short)4, "io_error"),
      SRV_ERROR((short)5, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN_DIR
            return UNKNOWN_DIR;
          case 2: // SRV_REDIRECT
            return SRV_REDIRECT;
          case 3: // NOT_FOUND
            return NOT_FOUND;
          case 4: // IO_ERROR
            return IO_ERROR;
          case 5: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatInfo.class)));
      tmpMap.put(_Fields.UNKNOWN_DIR, new org.apache.thrift.meta_data.FieldMetaData("unknown_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_REDIRECT, new org.apache.thrift.meta_data.FieldMetaData("srv_redirect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("not_found", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Getattr_result.class, metaDataMap);
    }

    public Getattr_result() {
    }

    public Getattr_result(
      StatInfo success,
      UnrecognizedDirectoryError unknown_dir,
      ServerRedirectionException srv_redirect,
      FileNotFoundException not_found,
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.success = success;
      this.unknown_dir = unknown_dir;
      this.srv_redirect = srv_redirect;
      this.not_found = not_found;
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Getattr_result(Getattr_result other) {
      if (other.isSetSuccess()) {
        this.success = new StatInfo(other.success);
      }
      if (other.isSetUnknown_dir()) {
        this.unknown_dir = new UnrecognizedDirectoryError(other.unknown_dir);
      }
      if (other.isSetSrv_redirect()) {
        this.srv_redirect = new ServerRedirectionException(other.srv_redirect);
      }
      if (other.isSetNot_found()) {
        this.not_found = new FileNotFoundException(other.not_found);
      }
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public Getattr_result deepCopy() {
      return new Getattr_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unknown_dir = null;
      this.srv_redirect = null;
      this.not_found = null;
      this.io_error = null;
      this.srv_error = null;
    }

    public StatInfo getSuccess() {
      return this.success;
    }

    public Getattr_result setSuccess(StatInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UnrecognizedDirectoryError getUnknown_dir() {
      return this.unknown_dir;
    }

    public Getattr_result setUnknown_dir(UnrecognizedDirectoryError unknown_dir) {
      this.unknown_dir = unknown_dir;
      return this;
    }

    public void unsetUnknown_dir() {
      this.unknown_dir = null;
    }

    /** Returns true if field unknown_dir is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_dir() {
      return this.unknown_dir != null;
    }

    public void setUnknown_dirIsSet(boolean value) {
      if (!value) {
        this.unknown_dir = null;
      }
    }

    public ServerRedirectionException getSrv_redirect() {
      return this.srv_redirect;
    }

    public Getattr_result setSrv_redirect(ServerRedirectionException srv_redirect) {
      this.srv_redirect = srv_redirect;
      return this;
    }

    public void unsetSrv_redirect() {
      this.srv_redirect = null;
    }

    /** Returns true if field srv_redirect is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_redirect() {
      return this.srv_redirect != null;
    }

    public void setSrv_redirectIsSet(boolean value) {
      if (!value) {
        this.srv_redirect = null;
      }
    }

    public FileNotFoundException getNot_found() {
      return this.not_found;
    }

    public Getattr_result setNot_found(FileNotFoundException not_found) {
      this.not_found = not_found;
      return this;
    }

    public void unsetNot_found() {
      this.not_found = null;
    }

    /** Returns true if field not_found is set (has been assigned a value) and false otherwise */
    public boolean isSetNot_found() {
      return this.not_found != null;
    }

    public void setNot_foundIsSet(boolean value) {
      if (!value) {
        this.not_found = null;
      }
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public Getattr_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public Getattr_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StatInfo)value);
        }
        break;

      case UNKNOWN_DIR:
        if (value == null) {
          unsetUnknown_dir();
        } else {
          setUnknown_dir((UnrecognizedDirectoryError)value);
        }
        break;

      case SRV_REDIRECT:
        if (value == null) {
          unsetSrv_redirect();
        } else {
          setSrv_redirect((ServerRedirectionException)value);
        }
        break;

      case NOT_FOUND:
        if (value == null) {
          unsetNot_found();
        } else {
          setNot_found((FileNotFoundException)value);
        }
        break;

      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNKNOWN_DIR:
        return getUnknown_dir();

      case SRV_REDIRECT:
        return getSrv_redirect();

      case NOT_FOUND:
        return getNot_found();

      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN_DIR:
        return isSetUnknown_dir();
      case SRV_REDIRECT:
        return isSetSrv_redirect();
      case NOT_FOUND:
        return isSetNot_found();
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Getattr_result)
        return this.equals((Getattr_result)that);
      return false;
    }

    public boolean equals(Getattr_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unknown_dir = true && this.isSetUnknown_dir();
      boolean that_present_unknown_dir = true && that.isSetUnknown_dir();
      if (this_present_unknown_dir || that_present_unknown_dir) {
        if (!(this_present_unknown_dir && that_present_unknown_dir))
          return false;
        if (!this.unknown_dir.equals(that.unknown_dir))
          return false;
      }

      boolean this_present_srv_redirect = true && this.isSetSrv_redirect();
      boolean that_present_srv_redirect = true && that.isSetSrv_redirect();
      if (this_present_srv_redirect || that_present_srv_redirect) {
        if (!(this_present_srv_redirect && that_present_srv_redirect))
          return false;
        if (!this.srv_redirect.equals(that.srv_redirect))
          return false;
      }

      boolean this_present_not_found = true && this.isSetNot_found();
      boolean that_present_not_found = true && that.isSetNot_found();
      if (this_present_not_found || that_present_not_found) {
        if (!(this_present_not_found && that_present_not_found))
          return false;
        if (!this.not_found.equals(that.not_found))
          return false;
      }

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_unknown_dir = true && (isSetUnknown_dir());
      list.add(present_unknown_dir);
      if (present_unknown_dir)
        list.add(unknown_dir);

      boolean present_srv_redirect = true && (isSetSrv_redirect());
      list.add(present_srv_redirect);
      if (present_srv_redirect)
        list.add(srv_redirect);

      boolean present_not_found = true && (isSetNot_found());
      list.add(present_not_found);
      if (present_not_found)
        list.add(not_found);

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(Getattr_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnknown_dir()).compareTo(other.isSetUnknown_dir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_dir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_dir, other.unknown_dir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_redirect()).compareTo(other.isSetSrv_redirect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_redirect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_redirect, other.srv_redirect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNot_found()).compareTo(other.isSetNot_found());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNot_found()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.not_found, other.not_found);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Getattr_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknown_dir:");
      if (this.unknown_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_dir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_redirect:");
      if (this.srv_redirect == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_redirect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("not_found:");
      if (this.not_found == null) {
        sb.append("null");
      } else {
        sb.append(this.not_found);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Getattr_resultStandardSchemeFactory implements SchemeFactory {
      public Getattr_resultStandardScheme getScheme() {
        return new Getattr_resultStandardScheme();
      }
    }

    private static class Getattr_resultStandardScheme extends StandardScheme<Getattr_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Getattr_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StatInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_dir = new UnrecognizedDirectoryError();
                struct.unknown_dir.read(iprot);
                struct.setUnknown_dirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRV_REDIRECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_redirect = new ServerRedirectionException();
                struct.srv_redirect.read(iprot);
                struct.setSrv_redirectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.not_found = new FileNotFoundException();
                struct.not_found.read(iprot);
                struct.setNot_foundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Getattr_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unknown_dir != null) {
          oprot.writeFieldBegin(UNKNOWN_DIR_FIELD_DESC);
          struct.unknown_dir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_redirect != null) {
          oprot.writeFieldBegin(SRV_REDIRECT_FIELD_DESC);
          struct.srv_redirect.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.not_found != null) {
          oprot.writeFieldBegin(NOT_FOUND_FIELD_DESC);
          struct.not_found.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Getattr_resultTupleSchemeFactory implements SchemeFactory {
      public Getattr_resultTupleScheme getScheme() {
        return new Getattr_resultTupleScheme();
      }
    }

    private static class Getattr_resultTupleScheme extends TupleScheme<Getattr_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Getattr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknown_dir()) {
          optionals.set(1);
        }
        if (struct.isSetSrv_redirect()) {
          optionals.set(2);
        }
        if (struct.isSetNot_found()) {
          optionals.set(3);
        }
        if (struct.isSetIo_error()) {
          optionals.set(4);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUnknown_dir()) {
          struct.unknown_dir.write(oprot);
        }
        if (struct.isSetSrv_redirect()) {
          struct.srv_redirect.write(oprot);
        }
        if (struct.isSetNot_found()) {
          struct.not_found.write(oprot);
        }
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Getattr_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = new StatInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknown_dir = new UnrecognizedDirectoryError();
          struct.unknown_dir.read(iprot);
          struct.setUnknown_dirIsSet(true);
        }
        if (incoming.get(2)) {
          struct.srv_redirect = new ServerRedirectionException();
          struct.srv_redirect.read(iprot);
          struct.setSrv_redirectIsSet(true);
        }
        if (incoming.get(3)) {
          struct.not_found = new FileNotFoundException();
          struct.not_found.read(iprot);
          struct.setNot_foundIsSet(true);
        }
        if (incoming.get(4)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(5)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class Mknod_args implements org.apache.thrift.TBase<Mknod_args, Mknod_args._Fields>, java.io.Serializable, Cloneable, Comparable<Mknod_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mknod_args");

    private static final org.apache.thrift.protocol.TField OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("obj_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PERM_FIELD_DESC = new org.apache.thrift.protocol.TField("perm", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Mknod_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Mknod_argsTupleSchemeFactory());
    }

    public OID obj_id; // required
    public short perm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJ_ID((short)1, "obj_id"),
      PERM((short)2, "perm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJ_ID
            return OBJ_ID;
          case 2: // PERM
            return PERM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PERM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("obj_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OID.class)));
      tmpMap.put(_Fields.PERM, new org.apache.thrift.meta_data.FieldMetaData("perm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mknod_args.class, metaDataMap);
    }

    public Mknod_args() {
    }

    public Mknod_args(
      OID obj_id,
      short perm)
    {
      this();
      this.obj_id = obj_id;
      this.perm = perm;
      setPermIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Mknod_args(Mknod_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetObj_id()) {
        this.obj_id = new OID(other.obj_id);
      }
      this.perm = other.perm;
    }

    public Mknod_args deepCopy() {
      return new Mknod_args(this);
    }

    @Override
    public void clear() {
      this.obj_id = null;
      setPermIsSet(false);
      this.perm = 0;
    }

    public OID getObj_id() {
      return this.obj_id;
    }

    public Mknod_args setObj_id(OID obj_id) {
      this.obj_id = obj_id;
      return this;
    }

    public void unsetObj_id() {
      this.obj_id = null;
    }

    /** Returns true if field obj_id is set (has been assigned a value) and false otherwise */
    public boolean isSetObj_id() {
      return this.obj_id != null;
    }

    public void setObj_idIsSet(boolean value) {
      if (!value) {
        this.obj_id = null;
      }
    }

    public short getPerm() {
      return this.perm;
    }

    public Mknod_args setPerm(short perm) {
      this.perm = perm;
      setPermIsSet(true);
      return this;
    }

    public void unsetPerm() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERM_ISSET_ID);
    }

    /** Returns true if field perm is set (has been assigned a value) and false otherwise */
    public boolean isSetPerm() {
      return EncodingUtils.testBit(__isset_bitfield, __PERM_ISSET_ID);
    }

    public void setPermIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJ_ID:
        if (value == null) {
          unsetObj_id();
        } else {
          setObj_id((OID)value);
        }
        break;

      case PERM:
        if (value == null) {
          unsetPerm();
        } else {
          setPerm((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJ_ID:
        return getObj_id();

      case PERM:
        return getPerm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJ_ID:
        return isSetObj_id();
      case PERM:
        return isSetPerm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Mknod_args)
        return this.equals((Mknod_args)that);
      return false;
    }

    public boolean equals(Mknod_args that) {
      if (that == null)
        return false;

      boolean this_present_obj_id = true && this.isSetObj_id();
      boolean that_present_obj_id = true && that.isSetObj_id();
      if (this_present_obj_id || that_present_obj_id) {
        if (!(this_present_obj_id && that_present_obj_id))
          return false;
        if (!this.obj_id.equals(that.obj_id))
          return false;
      }

      boolean this_present_perm = true;
      boolean that_present_perm = true;
      if (this_present_perm || that_present_perm) {
        if (!(this_present_perm && that_present_perm))
          return false;
        if (this.perm != that.perm)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_obj_id = true && (isSetObj_id());
      list.add(present_obj_id);
      if (present_obj_id)
        list.add(obj_id);

      boolean present_perm = true;
      list.add(present_perm);
      if (present_perm)
        list.add(perm);

      return list.hashCode();
    }

    @Override
    public int compareTo(Mknod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObj_id()).compareTo(other.isSetObj_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObj_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj_id, other.obj_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPerm()).compareTo(other.isSetPerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perm, other.perm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Mknod_args(");
      boolean first = true;

      sb.append("obj_id:");
      if (this.obj_id == null) {
        sb.append("null");
      } else {
        sb.append(this.obj_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("perm:");
      sb.append(this.perm);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (obj_id != null) {
        obj_id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Mknod_argsStandardSchemeFactory implements SchemeFactory {
      public Mknod_argsStandardScheme getScheme() {
        return new Mknod_argsStandardScheme();
      }
    }

    private static class Mknod_argsStandardScheme extends StandardScheme<Mknod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Mknod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.obj_id = new OID();
                struct.obj_id.read(iprot);
                struct.setObj_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.perm = iprot.readI16();
                struct.setPermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Mknod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.obj_id != null) {
          oprot.writeFieldBegin(OBJ_ID_FIELD_DESC);
          struct.obj_id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PERM_FIELD_DESC);
        oprot.writeI16(struct.perm);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Mknod_argsTupleSchemeFactory implements SchemeFactory {
      public Mknod_argsTupleScheme getScheme() {
        return new Mknod_argsTupleScheme();
      }
    }

    private static class Mknod_argsTupleScheme extends TupleScheme<Mknod_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Mknod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObj_id()) {
          optionals.set(0);
        }
        if (struct.isSetPerm()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetObj_id()) {
          struct.obj_id.write(oprot);
        }
        if (struct.isSetPerm()) {
          oprot.writeI16(struct.perm);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Mknod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.obj_id = new OID();
          struct.obj_id.read(iprot);
          struct.setObj_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.perm = iprot.readI16();
          struct.setPermIsSet(true);
        }
      }
    }

  }

  public static class Mknod_result implements org.apache.thrift.TBase<Mknod_result, Mknod_result._Fields>, java.io.Serializable, Cloneable, Comparable<Mknod_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mknod_result");

    private static final org.apache.thrift.protocol.TField UNKNOWN_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_dir", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SRV_REDIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_redirect", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("file_exists", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Mknod_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Mknod_resultTupleSchemeFactory());
    }

    public UnrecognizedDirectoryError unknown_dir; // required
    public ServerRedirectionException srv_redirect; // required
    public FileAlreadyExistsException file_exists; // required
    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNKNOWN_DIR((short)1, "unknown_dir"),
      SRV_REDIRECT((short)2, "srv_redirect"),
      FILE_EXISTS((short)3, "file_exists"),
      IO_ERROR((short)4, "io_error"),
      SRV_ERROR((short)5, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNKNOWN_DIR
            return UNKNOWN_DIR;
          case 2: // SRV_REDIRECT
            return SRV_REDIRECT;
          case 3: // FILE_EXISTS
            return FILE_EXISTS;
          case 4: // IO_ERROR
            return IO_ERROR;
          case 5: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNKNOWN_DIR, new org.apache.thrift.meta_data.FieldMetaData("unknown_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_REDIRECT, new org.apache.thrift.meta_data.FieldMetaData("srv_redirect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FILE_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("file_exists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mknod_result.class, metaDataMap);
    }

    public Mknod_result() {
    }

    public Mknod_result(
      UnrecognizedDirectoryError unknown_dir,
      ServerRedirectionException srv_redirect,
      FileAlreadyExistsException file_exists,
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.unknown_dir = unknown_dir;
      this.srv_redirect = srv_redirect;
      this.file_exists = file_exists;
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Mknod_result(Mknod_result other) {
      if (other.isSetUnknown_dir()) {
        this.unknown_dir = new UnrecognizedDirectoryError(other.unknown_dir);
      }
      if (other.isSetSrv_redirect()) {
        this.srv_redirect = new ServerRedirectionException(other.srv_redirect);
      }
      if (other.isSetFile_exists()) {
        this.file_exists = new FileAlreadyExistsException(other.file_exists);
      }
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public Mknod_result deepCopy() {
      return new Mknod_result(this);
    }

    @Override
    public void clear() {
      this.unknown_dir = null;
      this.srv_redirect = null;
      this.file_exists = null;
      this.io_error = null;
      this.srv_error = null;
    }

    public UnrecognizedDirectoryError getUnknown_dir() {
      return this.unknown_dir;
    }

    public Mknod_result setUnknown_dir(UnrecognizedDirectoryError unknown_dir) {
      this.unknown_dir = unknown_dir;
      return this;
    }

    public void unsetUnknown_dir() {
      this.unknown_dir = null;
    }

    /** Returns true if field unknown_dir is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_dir() {
      return this.unknown_dir != null;
    }

    public void setUnknown_dirIsSet(boolean value) {
      if (!value) {
        this.unknown_dir = null;
      }
    }

    public ServerRedirectionException getSrv_redirect() {
      return this.srv_redirect;
    }

    public Mknod_result setSrv_redirect(ServerRedirectionException srv_redirect) {
      this.srv_redirect = srv_redirect;
      return this;
    }

    public void unsetSrv_redirect() {
      this.srv_redirect = null;
    }

    /** Returns true if field srv_redirect is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_redirect() {
      return this.srv_redirect != null;
    }

    public void setSrv_redirectIsSet(boolean value) {
      if (!value) {
        this.srv_redirect = null;
      }
    }

    public FileAlreadyExistsException getFile_exists() {
      return this.file_exists;
    }

    public Mknod_result setFile_exists(FileAlreadyExistsException file_exists) {
      this.file_exists = file_exists;
      return this;
    }

    public void unsetFile_exists() {
      this.file_exists = null;
    }

    /** Returns true if field file_exists is set (has been assigned a value) and false otherwise */
    public boolean isSetFile_exists() {
      return this.file_exists != null;
    }

    public void setFile_existsIsSet(boolean value) {
      if (!value) {
        this.file_exists = null;
      }
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public Mknod_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public Mknod_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UNKNOWN_DIR:
        if (value == null) {
          unsetUnknown_dir();
        } else {
          setUnknown_dir((UnrecognizedDirectoryError)value);
        }
        break;

      case SRV_REDIRECT:
        if (value == null) {
          unsetSrv_redirect();
        } else {
          setSrv_redirect((ServerRedirectionException)value);
        }
        break;

      case FILE_EXISTS:
        if (value == null) {
          unsetFile_exists();
        } else {
          setFile_exists((FileAlreadyExistsException)value);
        }
        break;

      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UNKNOWN_DIR:
        return getUnknown_dir();

      case SRV_REDIRECT:
        return getSrv_redirect();

      case FILE_EXISTS:
        return getFile_exists();

      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UNKNOWN_DIR:
        return isSetUnknown_dir();
      case SRV_REDIRECT:
        return isSetSrv_redirect();
      case FILE_EXISTS:
        return isSetFile_exists();
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Mknod_result)
        return this.equals((Mknod_result)that);
      return false;
    }

    public boolean equals(Mknod_result that) {
      if (that == null)
        return false;

      boolean this_present_unknown_dir = true && this.isSetUnknown_dir();
      boolean that_present_unknown_dir = true && that.isSetUnknown_dir();
      if (this_present_unknown_dir || that_present_unknown_dir) {
        if (!(this_present_unknown_dir && that_present_unknown_dir))
          return false;
        if (!this.unknown_dir.equals(that.unknown_dir))
          return false;
      }

      boolean this_present_srv_redirect = true && this.isSetSrv_redirect();
      boolean that_present_srv_redirect = true && that.isSetSrv_redirect();
      if (this_present_srv_redirect || that_present_srv_redirect) {
        if (!(this_present_srv_redirect && that_present_srv_redirect))
          return false;
        if (!this.srv_redirect.equals(that.srv_redirect))
          return false;
      }

      boolean this_present_file_exists = true && this.isSetFile_exists();
      boolean that_present_file_exists = true && that.isSetFile_exists();
      if (this_present_file_exists || that_present_file_exists) {
        if (!(this_present_file_exists && that_present_file_exists))
          return false;
        if (!this.file_exists.equals(that.file_exists))
          return false;
      }

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_unknown_dir = true && (isSetUnknown_dir());
      list.add(present_unknown_dir);
      if (present_unknown_dir)
        list.add(unknown_dir);

      boolean present_srv_redirect = true && (isSetSrv_redirect());
      list.add(present_srv_redirect);
      if (present_srv_redirect)
        list.add(srv_redirect);

      boolean present_file_exists = true && (isSetFile_exists());
      list.add(present_file_exists);
      if (present_file_exists)
        list.add(file_exists);

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(Mknod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUnknown_dir()).compareTo(other.isSetUnknown_dir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_dir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_dir, other.unknown_dir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_redirect()).compareTo(other.isSetSrv_redirect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_redirect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_redirect, other.srv_redirect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFile_exists()).compareTo(other.isSetFile_exists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile_exists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_exists, other.file_exists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Mknod_result(");
      boolean first = true;

      sb.append("unknown_dir:");
      if (this.unknown_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_dir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_redirect:");
      if (this.srv_redirect == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_redirect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("file_exists:");
      if (this.file_exists == null) {
        sb.append("null");
      } else {
        sb.append(this.file_exists);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Mknod_resultStandardSchemeFactory implements SchemeFactory {
      public Mknod_resultStandardScheme getScheme() {
        return new Mknod_resultStandardScheme();
      }
    }

    private static class Mknod_resultStandardScheme extends StandardScheme<Mknod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Mknod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNKNOWN_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_dir = new UnrecognizedDirectoryError();
                struct.unknown_dir.read(iprot);
                struct.setUnknown_dirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRV_REDIRECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_redirect = new ServerRedirectionException();
                struct.srv_redirect.read(iprot);
                struct.setSrv_redirectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_EXISTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.file_exists = new FileAlreadyExistsException();
                struct.file_exists.read(iprot);
                struct.setFile_existsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Mknod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unknown_dir != null) {
          oprot.writeFieldBegin(UNKNOWN_DIR_FIELD_DESC);
          struct.unknown_dir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_redirect != null) {
          oprot.writeFieldBegin(SRV_REDIRECT_FIELD_DESC);
          struct.srv_redirect.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.file_exists != null) {
          oprot.writeFieldBegin(FILE_EXISTS_FIELD_DESC);
          struct.file_exists.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Mknod_resultTupleSchemeFactory implements SchemeFactory {
      public Mknod_resultTupleScheme getScheme() {
        return new Mknod_resultTupleScheme();
      }
    }

    private static class Mknod_resultTupleScheme extends TupleScheme<Mknod_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Mknod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUnknown_dir()) {
          optionals.set(0);
        }
        if (struct.isSetSrv_redirect()) {
          optionals.set(1);
        }
        if (struct.isSetFile_exists()) {
          optionals.set(2);
        }
        if (struct.isSetIo_error()) {
          optionals.set(3);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUnknown_dir()) {
          struct.unknown_dir.write(oprot);
        }
        if (struct.isSetSrv_redirect()) {
          struct.srv_redirect.write(oprot);
        }
        if (struct.isSetFile_exists()) {
          struct.file_exists.write(oprot);
        }
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Mknod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.unknown_dir = new UnrecognizedDirectoryError();
          struct.unknown_dir.read(iprot);
          struct.setUnknown_dirIsSet(true);
        }
        if (incoming.get(1)) {
          struct.srv_redirect = new ServerRedirectionException();
          struct.srv_redirect.read(iprot);
          struct.setSrv_redirectIsSet(true);
        }
        if (incoming.get(2)) {
          struct.file_exists = new FileAlreadyExistsException();
          struct.file_exists.read(iprot);
          struct.setFile_existsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(4)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class Mknod_Bulk_args implements org.apache.thrift.TBase<Mknod_Bulk_args, Mknod_Bulk_args._Fields>, java.io.Serializable, Cloneable, Comparable<Mknod_Bulk_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mknod_Bulk_args");

    private static final org.apache.thrift.protocol.TField OBJ_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("obj_ids", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PERM_FIELD_DESC = new org.apache.thrift.protocol.TField("perm", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Mknod_Bulk_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Mknod_Bulk_argsTupleSchemeFactory());
    }

    public OIDS obj_ids; // required
    public short perm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJ_IDS((short)1, "obj_ids"),
      PERM((short)2, "perm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJ_IDS
            return OBJ_IDS;
          case 2: // PERM
            return PERM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PERM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJ_IDS, new org.apache.thrift.meta_data.FieldMetaData("obj_ids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OIDS.class)));
      tmpMap.put(_Fields.PERM, new org.apache.thrift.meta_data.FieldMetaData("perm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mknod_Bulk_args.class, metaDataMap);
    }

    public Mknod_Bulk_args() {
    }

    public Mknod_Bulk_args(
      OIDS obj_ids,
      short perm)
    {
      this();
      this.obj_ids = obj_ids;
      this.perm = perm;
      setPermIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Mknod_Bulk_args(Mknod_Bulk_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetObj_ids()) {
        this.obj_ids = new OIDS(other.obj_ids);
      }
      this.perm = other.perm;
    }

    public Mknod_Bulk_args deepCopy() {
      return new Mknod_Bulk_args(this);
    }

    @Override
    public void clear() {
      this.obj_ids = null;
      setPermIsSet(false);
      this.perm = 0;
    }

    public OIDS getObj_ids() {
      return this.obj_ids;
    }

    public Mknod_Bulk_args setObj_ids(OIDS obj_ids) {
      this.obj_ids = obj_ids;
      return this;
    }

    public void unsetObj_ids() {
      this.obj_ids = null;
    }

    /** Returns true if field obj_ids is set (has been assigned a value) and false otherwise */
    public boolean isSetObj_ids() {
      return this.obj_ids != null;
    }

    public void setObj_idsIsSet(boolean value) {
      if (!value) {
        this.obj_ids = null;
      }
    }

    public short getPerm() {
      return this.perm;
    }

    public Mknod_Bulk_args setPerm(short perm) {
      this.perm = perm;
      setPermIsSet(true);
      return this;
    }

    public void unsetPerm() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERM_ISSET_ID);
    }

    /** Returns true if field perm is set (has been assigned a value) and false otherwise */
    public boolean isSetPerm() {
      return EncodingUtils.testBit(__isset_bitfield, __PERM_ISSET_ID);
    }

    public void setPermIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJ_IDS:
        if (value == null) {
          unsetObj_ids();
        } else {
          setObj_ids((OIDS)value);
        }
        break;

      case PERM:
        if (value == null) {
          unsetPerm();
        } else {
          setPerm((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJ_IDS:
        return getObj_ids();

      case PERM:
        return getPerm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJ_IDS:
        return isSetObj_ids();
      case PERM:
        return isSetPerm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Mknod_Bulk_args)
        return this.equals((Mknod_Bulk_args)that);
      return false;
    }

    public boolean equals(Mknod_Bulk_args that) {
      if (that == null)
        return false;

      boolean this_present_obj_ids = true && this.isSetObj_ids();
      boolean that_present_obj_ids = true && that.isSetObj_ids();
      if (this_present_obj_ids || that_present_obj_ids) {
        if (!(this_present_obj_ids && that_present_obj_ids))
          return false;
        if (!this.obj_ids.equals(that.obj_ids))
          return false;
      }

      boolean this_present_perm = true;
      boolean that_present_perm = true;
      if (this_present_perm || that_present_perm) {
        if (!(this_present_perm && that_present_perm))
          return false;
        if (this.perm != that.perm)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_obj_ids = true && (isSetObj_ids());
      list.add(present_obj_ids);
      if (present_obj_ids)
        list.add(obj_ids);

      boolean present_perm = true;
      list.add(present_perm);
      if (present_perm)
        list.add(perm);

      return list.hashCode();
    }

    @Override
    public int compareTo(Mknod_Bulk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObj_ids()).compareTo(other.isSetObj_ids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObj_ids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj_ids, other.obj_ids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPerm()).compareTo(other.isSetPerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perm, other.perm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Mknod_Bulk_args(");
      boolean first = true;

      sb.append("obj_ids:");
      if (this.obj_ids == null) {
        sb.append("null");
      } else {
        sb.append(this.obj_ids);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("perm:");
      sb.append(this.perm);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (obj_ids != null) {
        obj_ids.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Mknod_Bulk_argsStandardSchemeFactory implements SchemeFactory {
      public Mknod_Bulk_argsStandardScheme getScheme() {
        return new Mknod_Bulk_argsStandardScheme();
      }
    }

    private static class Mknod_Bulk_argsStandardScheme extends StandardScheme<Mknod_Bulk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Mknod_Bulk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJ_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.obj_ids = new OIDS();
                struct.obj_ids.read(iprot);
                struct.setObj_idsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.perm = iprot.readI16();
                struct.setPermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Mknod_Bulk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.obj_ids != null) {
          oprot.writeFieldBegin(OBJ_IDS_FIELD_DESC);
          struct.obj_ids.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PERM_FIELD_DESC);
        oprot.writeI16(struct.perm);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Mknod_Bulk_argsTupleSchemeFactory implements SchemeFactory {
      public Mknod_Bulk_argsTupleScheme getScheme() {
        return new Mknod_Bulk_argsTupleScheme();
      }
    }

    private static class Mknod_Bulk_argsTupleScheme extends TupleScheme<Mknod_Bulk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Mknod_Bulk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObj_ids()) {
          optionals.set(0);
        }
        if (struct.isSetPerm()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetObj_ids()) {
          struct.obj_ids.write(oprot);
        }
        if (struct.isSetPerm()) {
          oprot.writeI16(struct.perm);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Mknod_Bulk_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.obj_ids = new OIDS();
          struct.obj_ids.read(iprot);
          struct.setObj_idsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.perm = iprot.readI16();
          struct.setPermIsSet(true);
        }
      }
    }

  }

  public static class Mknod_Bulk_result implements org.apache.thrift.TBase<Mknod_Bulk_result, Mknod_Bulk_result._Fields>, java.io.Serializable, Cloneable, Comparable<Mknod_Bulk_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mknod_Bulk_result");

    private static final org.apache.thrift.protocol.TField UNKNOWN_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_dir", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SRV_REDIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_redirect", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("file_exists", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Mknod_Bulk_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Mknod_Bulk_resultTupleSchemeFactory());
    }

    public UnrecognizedDirectoryError unknown_dir; // required
    public ServerRedirectionException srv_redirect; // required
    public FileAlreadyExistsException file_exists; // required
    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNKNOWN_DIR((short)1, "unknown_dir"),
      SRV_REDIRECT((short)2, "srv_redirect"),
      FILE_EXISTS((short)3, "file_exists"),
      IO_ERROR((short)4, "io_error"),
      SRV_ERROR((short)5, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNKNOWN_DIR
            return UNKNOWN_DIR;
          case 2: // SRV_REDIRECT
            return SRV_REDIRECT;
          case 3: // FILE_EXISTS
            return FILE_EXISTS;
          case 4: // IO_ERROR
            return IO_ERROR;
          case 5: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNKNOWN_DIR, new org.apache.thrift.meta_data.FieldMetaData("unknown_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_REDIRECT, new org.apache.thrift.meta_data.FieldMetaData("srv_redirect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FILE_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("file_exists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mknod_Bulk_result.class, metaDataMap);
    }

    public Mknod_Bulk_result() {
    }

    public Mknod_Bulk_result(
      UnrecognizedDirectoryError unknown_dir,
      ServerRedirectionException srv_redirect,
      FileAlreadyExistsException file_exists,
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.unknown_dir = unknown_dir;
      this.srv_redirect = srv_redirect;
      this.file_exists = file_exists;
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Mknod_Bulk_result(Mknod_Bulk_result other) {
      if (other.isSetUnknown_dir()) {
        this.unknown_dir = new UnrecognizedDirectoryError(other.unknown_dir);
      }
      if (other.isSetSrv_redirect()) {
        this.srv_redirect = new ServerRedirectionException(other.srv_redirect);
      }
      if (other.isSetFile_exists()) {
        this.file_exists = new FileAlreadyExistsException(other.file_exists);
      }
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public Mknod_Bulk_result deepCopy() {
      return new Mknod_Bulk_result(this);
    }

    @Override
    public void clear() {
      this.unknown_dir = null;
      this.srv_redirect = null;
      this.file_exists = null;
      this.io_error = null;
      this.srv_error = null;
    }

    public UnrecognizedDirectoryError getUnknown_dir() {
      return this.unknown_dir;
    }

    public Mknod_Bulk_result setUnknown_dir(UnrecognizedDirectoryError unknown_dir) {
      this.unknown_dir = unknown_dir;
      return this;
    }

    public void unsetUnknown_dir() {
      this.unknown_dir = null;
    }

    /** Returns true if field unknown_dir is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_dir() {
      return this.unknown_dir != null;
    }

    public void setUnknown_dirIsSet(boolean value) {
      if (!value) {
        this.unknown_dir = null;
      }
    }

    public ServerRedirectionException getSrv_redirect() {
      return this.srv_redirect;
    }

    public Mknod_Bulk_result setSrv_redirect(ServerRedirectionException srv_redirect) {
      this.srv_redirect = srv_redirect;
      return this;
    }

    public void unsetSrv_redirect() {
      this.srv_redirect = null;
    }

    /** Returns true if field srv_redirect is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_redirect() {
      return this.srv_redirect != null;
    }

    public void setSrv_redirectIsSet(boolean value) {
      if (!value) {
        this.srv_redirect = null;
      }
    }

    public FileAlreadyExistsException getFile_exists() {
      return this.file_exists;
    }

    public Mknod_Bulk_result setFile_exists(FileAlreadyExistsException file_exists) {
      this.file_exists = file_exists;
      return this;
    }

    public void unsetFile_exists() {
      this.file_exists = null;
    }

    /** Returns true if field file_exists is set (has been assigned a value) and false otherwise */
    public boolean isSetFile_exists() {
      return this.file_exists != null;
    }

    public void setFile_existsIsSet(boolean value) {
      if (!value) {
        this.file_exists = null;
      }
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public Mknod_Bulk_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public Mknod_Bulk_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UNKNOWN_DIR:
        if (value == null) {
          unsetUnknown_dir();
        } else {
          setUnknown_dir((UnrecognizedDirectoryError)value);
        }
        break;

      case SRV_REDIRECT:
        if (value == null) {
          unsetSrv_redirect();
        } else {
          setSrv_redirect((ServerRedirectionException)value);
        }
        break;

      case FILE_EXISTS:
        if (value == null) {
          unsetFile_exists();
        } else {
          setFile_exists((FileAlreadyExistsException)value);
        }
        break;

      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UNKNOWN_DIR:
        return getUnknown_dir();

      case SRV_REDIRECT:
        return getSrv_redirect();

      case FILE_EXISTS:
        return getFile_exists();

      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UNKNOWN_DIR:
        return isSetUnknown_dir();
      case SRV_REDIRECT:
        return isSetSrv_redirect();
      case FILE_EXISTS:
        return isSetFile_exists();
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Mknod_Bulk_result)
        return this.equals((Mknod_Bulk_result)that);
      return false;
    }

    public boolean equals(Mknod_Bulk_result that) {
      if (that == null)
        return false;

      boolean this_present_unknown_dir = true && this.isSetUnknown_dir();
      boolean that_present_unknown_dir = true && that.isSetUnknown_dir();
      if (this_present_unknown_dir || that_present_unknown_dir) {
        if (!(this_present_unknown_dir && that_present_unknown_dir))
          return false;
        if (!this.unknown_dir.equals(that.unknown_dir))
          return false;
      }

      boolean this_present_srv_redirect = true && this.isSetSrv_redirect();
      boolean that_present_srv_redirect = true && that.isSetSrv_redirect();
      if (this_present_srv_redirect || that_present_srv_redirect) {
        if (!(this_present_srv_redirect && that_present_srv_redirect))
          return false;
        if (!this.srv_redirect.equals(that.srv_redirect))
          return false;
      }

      boolean this_present_file_exists = true && this.isSetFile_exists();
      boolean that_present_file_exists = true && that.isSetFile_exists();
      if (this_present_file_exists || that_present_file_exists) {
        if (!(this_present_file_exists && that_present_file_exists))
          return false;
        if (!this.file_exists.equals(that.file_exists))
          return false;
      }

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_unknown_dir = true && (isSetUnknown_dir());
      list.add(present_unknown_dir);
      if (present_unknown_dir)
        list.add(unknown_dir);

      boolean present_srv_redirect = true && (isSetSrv_redirect());
      list.add(present_srv_redirect);
      if (present_srv_redirect)
        list.add(srv_redirect);

      boolean present_file_exists = true && (isSetFile_exists());
      list.add(present_file_exists);
      if (present_file_exists)
        list.add(file_exists);

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(Mknod_Bulk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUnknown_dir()).compareTo(other.isSetUnknown_dir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_dir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_dir, other.unknown_dir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_redirect()).compareTo(other.isSetSrv_redirect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_redirect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_redirect, other.srv_redirect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFile_exists()).compareTo(other.isSetFile_exists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile_exists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_exists, other.file_exists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Mknod_Bulk_result(");
      boolean first = true;

      sb.append("unknown_dir:");
      if (this.unknown_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_dir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_redirect:");
      if (this.srv_redirect == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_redirect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("file_exists:");
      if (this.file_exists == null) {
        sb.append("null");
      } else {
        sb.append(this.file_exists);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Mknod_Bulk_resultStandardSchemeFactory implements SchemeFactory {
      public Mknod_Bulk_resultStandardScheme getScheme() {
        return new Mknod_Bulk_resultStandardScheme();
      }
    }

    private static class Mknod_Bulk_resultStandardScheme extends StandardScheme<Mknod_Bulk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Mknod_Bulk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNKNOWN_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_dir = new UnrecognizedDirectoryError();
                struct.unknown_dir.read(iprot);
                struct.setUnknown_dirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRV_REDIRECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_redirect = new ServerRedirectionException();
                struct.srv_redirect.read(iprot);
                struct.setSrv_redirectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_EXISTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.file_exists = new FileAlreadyExistsException();
                struct.file_exists.read(iprot);
                struct.setFile_existsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Mknod_Bulk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unknown_dir != null) {
          oprot.writeFieldBegin(UNKNOWN_DIR_FIELD_DESC);
          struct.unknown_dir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_redirect != null) {
          oprot.writeFieldBegin(SRV_REDIRECT_FIELD_DESC);
          struct.srv_redirect.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.file_exists != null) {
          oprot.writeFieldBegin(FILE_EXISTS_FIELD_DESC);
          struct.file_exists.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Mknod_Bulk_resultTupleSchemeFactory implements SchemeFactory {
      public Mknod_Bulk_resultTupleScheme getScheme() {
        return new Mknod_Bulk_resultTupleScheme();
      }
    }

    private static class Mknod_Bulk_resultTupleScheme extends TupleScheme<Mknod_Bulk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Mknod_Bulk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUnknown_dir()) {
          optionals.set(0);
        }
        if (struct.isSetSrv_redirect()) {
          optionals.set(1);
        }
        if (struct.isSetFile_exists()) {
          optionals.set(2);
        }
        if (struct.isSetIo_error()) {
          optionals.set(3);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUnknown_dir()) {
          struct.unknown_dir.write(oprot);
        }
        if (struct.isSetSrv_redirect()) {
          struct.srv_redirect.write(oprot);
        }
        if (struct.isSetFile_exists()) {
          struct.file_exists.write(oprot);
        }
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Mknod_Bulk_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.unknown_dir = new UnrecognizedDirectoryError();
          struct.unknown_dir.read(iprot);
          struct.setUnknown_dirIsSet(true);
        }
        if (incoming.get(1)) {
          struct.srv_redirect = new ServerRedirectionException();
          struct.srv_redirect.read(iprot);
          struct.setSrv_redirectIsSet(true);
        }
        if (incoming.get(2)) {
          struct.file_exists = new FileAlreadyExistsException();
          struct.file_exists.read(iprot);
          struct.setFile_existsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(4)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class Mkdir_args implements org.apache.thrift.TBase<Mkdir_args, Mkdir_args._Fields>, java.io.Serializable, Cloneable, Comparable<Mkdir_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mkdir_args");

    private static final org.apache.thrift.protocol.TField OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("obj_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PERM_FIELD_DESC = new org.apache.thrift.protocol.TField("perm", org.apache.thrift.protocol.TType.I16, (short)2);
    private static final org.apache.thrift.protocol.TField HINT_SERVER1_FIELD_DESC = new org.apache.thrift.protocol.TField("hint_server1", org.apache.thrift.protocol.TType.I16, (short)3);
    private static final org.apache.thrift.protocol.TField HINT_SERVER2_FIELD_DESC = new org.apache.thrift.protocol.TField("hint_server2", org.apache.thrift.protocol.TType.I16, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Mkdir_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Mkdir_argsTupleSchemeFactory());
    }

    public OID obj_id; // required
    public short perm; // required
    public short hint_server1; // required
    public short hint_server2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJ_ID((short)1, "obj_id"),
      PERM((short)2, "perm"),
      HINT_SERVER1((short)3, "hint_server1"),
      HINT_SERVER2((short)4, "hint_server2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJ_ID
            return OBJ_ID;
          case 2: // PERM
            return PERM;
          case 3: // HINT_SERVER1
            return HINT_SERVER1;
          case 4: // HINT_SERVER2
            return HINT_SERVER2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PERM_ISSET_ID = 0;
    private static final int __HINT_SERVER1_ISSET_ID = 1;
    private static final int __HINT_SERVER2_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("obj_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OID.class)));
      tmpMap.put(_Fields.PERM, new org.apache.thrift.meta_data.FieldMetaData("perm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.HINT_SERVER1, new org.apache.thrift.meta_data.FieldMetaData("hint_server1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.HINT_SERVER2, new org.apache.thrift.meta_data.FieldMetaData("hint_server2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mkdir_args.class, metaDataMap);
    }

    public Mkdir_args() {
    }

    public Mkdir_args(
      OID obj_id,
      short perm,
      short hint_server1,
      short hint_server2)
    {
      this();
      this.obj_id = obj_id;
      this.perm = perm;
      setPermIsSet(true);
      this.hint_server1 = hint_server1;
      setHint_server1IsSet(true);
      this.hint_server2 = hint_server2;
      setHint_server2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Mkdir_args(Mkdir_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetObj_id()) {
        this.obj_id = new OID(other.obj_id);
      }
      this.perm = other.perm;
      this.hint_server1 = other.hint_server1;
      this.hint_server2 = other.hint_server2;
    }

    public Mkdir_args deepCopy() {
      return new Mkdir_args(this);
    }

    @Override
    public void clear() {
      this.obj_id = null;
      setPermIsSet(false);
      this.perm = 0;
      setHint_server1IsSet(false);
      this.hint_server1 = 0;
      setHint_server2IsSet(false);
      this.hint_server2 = 0;
    }

    public OID getObj_id() {
      return this.obj_id;
    }

    public Mkdir_args setObj_id(OID obj_id) {
      this.obj_id = obj_id;
      return this;
    }

    public void unsetObj_id() {
      this.obj_id = null;
    }

    /** Returns true if field obj_id is set (has been assigned a value) and false otherwise */
    public boolean isSetObj_id() {
      return this.obj_id != null;
    }

    public void setObj_idIsSet(boolean value) {
      if (!value) {
        this.obj_id = null;
      }
    }

    public short getPerm() {
      return this.perm;
    }

    public Mkdir_args setPerm(short perm) {
      this.perm = perm;
      setPermIsSet(true);
      return this;
    }

    public void unsetPerm() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERM_ISSET_ID);
    }

    /** Returns true if field perm is set (has been assigned a value) and false otherwise */
    public boolean isSetPerm() {
      return EncodingUtils.testBit(__isset_bitfield, __PERM_ISSET_ID);
    }

    public void setPermIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERM_ISSET_ID, value);
    }

    public short getHint_server1() {
      return this.hint_server1;
    }

    public Mkdir_args setHint_server1(short hint_server1) {
      this.hint_server1 = hint_server1;
      setHint_server1IsSet(true);
      return this;
    }

    public void unsetHint_server1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HINT_SERVER1_ISSET_ID);
    }

    /** Returns true if field hint_server1 is set (has been assigned a value) and false otherwise */
    public boolean isSetHint_server1() {
      return EncodingUtils.testBit(__isset_bitfield, __HINT_SERVER1_ISSET_ID);
    }

    public void setHint_server1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HINT_SERVER1_ISSET_ID, value);
    }

    public short getHint_server2() {
      return this.hint_server2;
    }

    public Mkdir_args setHint_server2(short hint_server2) {
      this.hint_server2 = hint_server2;
      setHint_server2IsSet(true);
      return this;
    }

    public void unsetHint_server2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HINT_SERVER2_ISSET_ID);
    }

    /** Returns true if field hint_server2 is set (has been assigned a value) and false otherwise */
    public boolean isSetHint_server2() {
      return EncodingUtils.testBit(__isset_bitfield, __HINT_SERVER2_ISSET_ID);
    }

    public void setHint_server2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HINT_SERVER2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJ_ID:
        if (value == null) {
          unsetObj_id();
        } else {
          setObj_id((OID)value);
        }
        break;

      case PERM:
        if (value == null) {
          unsetPerm();
        } else {
          setPerm((Short)value);
        }
        break;

      case HINT_SERVER1:
        if (value == null) {
          unsetHint_server1();
        } else {
          setHint_server1((Short)value);
        }
        break;

      case HINT_SERVER2:
        if (value == null) {
          unsetHint_server2();
        } else {
          setHint_server2((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJ_ID:
        return getObj_id();

      case PERM:
        return getPerm();

      case HINT_SERVER1:
        return getHint_server1();

      case HINT_SERVER2:
        return getHint_server2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJ_ID:
        return isSetObj_id();
      case PERM:
        return isSetPerm();
      case HINT_SERVER1:
        return isSetHint_server1();
      case HINT_SERVER2:
        return isSetHint_server2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Mkdir_args)
        return this.equals((Mkdir_args)that);
      return false;
    }

    public boolean equals(Mkdir_args that) {
      if (that == null)
        return false;

      boolean this_present_obj_id = true && this.isSetObj_id();
      boolean that_present_obj_id = true && that.isSetObj_id();
      if (this_present_obj_id || that_present_obj_id) {
        if (!(this_present_obj_id && that_present_obj_id))
          return false;
        if (!this.obj_id.equals(that.obj_id))
          return false;
      }

      boolean this_present_perm = true;
      boolean that_present_perm = true;
      if (this_present_perm || that_present_perm) {
        if (!(this_present_perm && that_present_perm))
          return false;
        if (this.perm != that.perm)
          return false;
      }

      boolean this_present_hint_server1 = true;
      boolean that_present_hint_server1 = true;
      if (this_present_hint_server1 || that_present_hint_server1) {
        if (!(this_present_hint_server1 && that_present_hint_server1))
          return false;
        if (this.hint_server1 != that.hint_server1)
          return false;
      }

      boolean this_present_hint_server2 = true;
      boolean that_present_hint_server2 = true;
      if (this_present_hint_server2 || that_present_hint_server2) {
        if (!(this_present_hint_server2 && that_present_hint_server2))
          return false;
        if (this.hint_server2 != that.hint_server2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_obj_id = true && (isSetObj_id());
      list.add(present_obj_id);
      if (present_obj_id)
        list.add(obj_id);

      boolean present_perm = true;
      list.add(present_perm);
      if (present_perm)
        list.add(perm);

      boolean present_hint_server1 = true;
      list.add(present_hint_server1);
      if (present_hint_server1)
        list.add(hint_server1);

      boolean present_hint_server2 = true;
      list.add(present_hint_server2);
      if (present_hint_server2)
        list.add(hint_server2);

      return list.hashCode();
    }

    @Override
    public int compareTo(Mkdir_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObj_id()).compareTo(other.isSetObj_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObj_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj_id, other.obj_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPerm()).compareTo(other.isSetPerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perm, other.perm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHint_server1()).compareTo(other.isSetHint_server1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHint_server1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hint_server1, other.hint_server1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHint_server2()).compareTo(other.isSetHint_server2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHint_server2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hint_server2, other.hint_server2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Mkdir_args(");
      boolean first = true;

      sb.append("obj_id:");
      if (this.obj_id == null) {
        sb.append("null");
      } else {
        sb.append(this.obj_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("perm:");
      sb.append(this.perm);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hint_server1:");
      sb.append(this.hint_server1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hint_server2:");
      sb.append(this.hint_server2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (obj_id != null) {
        obj_id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Mkdir_argsStandardSchemeFactory implements SchemeFactory {
      public Mkdir_argsStandardScheme getScheme() {
        return new Mkdir_argsStandardScheme();
      }
    }

    private static class Mkdir_argsStandardScheme extends StandardScheme<Mkdir_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Mkdir_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.obj_id = new OID();
                struct.obj_id.read(iprot);
                struct.setObj_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.perm = iprot.readI16();
                struct.setPermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HINT_SERVER1
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.hint_server1 = iprot.readI16();
                struct.setHint_server1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HINT_SERVER2
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.hint_server2 = iprot.readI16();
                struct.setHint_server2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Mkdir_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.obj_id != null) {
          oprot.writeFieldBegin(OBJ_ID_FIELD_DESC);
          struct.obj_id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PERM_FIELD_DESC);
        oprot.writeI16(struct.perm);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HINT_SERVER1_FIELD_DESC);
        oprot.writeI16(struct.hint_server1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HINT_SERVER2_FIELD_DESC);
        oprot.writeI16(struct.hint_server2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Mkdir_argsTupleSchemeFactory implements SchemeFactory {
      public Mkdir_argsTupleScheme getScheme() {
        return new Mkdir_argsTupleScheme();
      }
    }

    private static class Mkdir_argsTupleScheme extends TupleScheme<Mkdir_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Mkdir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObj_id()) {
          optionals.set(0);
        }
        if (struct.isSetPerm()) {
          optionals.set(1);
        }
        if (struct.isSetHint_server1()) {
          optionals.set(2);
        }
        if (struct.isSetHint_server2()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetObj_id()) {
          struct.obj_id.write(oprot);
        }
        if (struct.isSetPerm()) {
          oprot.writeI16(struct.perm);
        }
        if (struct.isSetHint_server1()) {
          oprot.writeI16(struct.hint_server1);
        }
        if (struct.isSetHint_server2()) {
          oprot.writeI16(struct.hint_server2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Mkdir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.obj_id = new OID();
          struct.obj_id.read(iprot);
          struct.setObj_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.perm = iprot.readI16();
          struct.setPermIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hint_server1 = iprot.readI16();
          struct.setHint_server1IsSet(true);
        }
        if (incoming.get(3)) {
          struct.hint_server2 = iprot.readI16();
          struct.setHint_server2IsSet(true);
        }
      }
    }

  }

  public static class Mkdir_result implements org.apache.thrift.TBase<Mkdir_result, Mkdir_result._Fields>, java.io.Serializable, Cloneable, Comparable<Mkdir_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mkdir_result");

    private static final org.apache.thrift.protocol.TField UNKNOWN_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_dir", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SRV_REDIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_redirect", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("file_exists", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Mkdir_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Mkdir_resultTupleSchemeFactory());
    }

    public UnrecognizedDirectoryError unknown_dir; // required
    public ServerRedirectionException srv_redirect; // required
    public FileAlreadyExistsException file_exists; // required
    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNKNOWN_DIR((short)1, "unknown_dir"),
      SRV_REDIRECT((short)2, "srv_redirect"),
      FILE_EXISTS((short)3, "file_exists"),
      IO_ERROR((short)4, "io_error"),
      SRV_ERROR((short)5, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNKNOWN_DIR
            return UNKNOWN_DIR;
          case 2: // SRV_REDIRECT
            return SRV_REDIRECT;
          case 3: // FILE_EXISTS
            return FILE_EXISTS;
          case 4: // IO_ERROR
            return IO_ERROR;
          case 5: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNKNOWN_DIR, new org.apache.thrift.meta_data.FieldMetaData("unknown_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_REDIRECT, new org.apache.thrift.meta_data.FieldMetaData("srv_redirect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FILE_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("file_exists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mkdir_result.class, metaDataMap);
    }

    public Mkdir_result() {
    }

    public Mkdir_result(
      UnrecognizedDirectoryError unknown_dir,
      ServerRedirectionException srv_redirect,
      FileAlreadyExistsException file_exists,
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.unknown_dir = unknown_dir;
      this.srv_redirect = srv_redirect;
      this.file_exists = file_exists;
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Mkdir_result(Mkdir_result other) {
      if (other.isSetUnknown_dir()) {
        this.unknown_dir = new UnrecognizedDirectoryError(other.unknown_dir);
      }
      if (other.isSetSrv_redirect()) {
        this.srv_redirect = new ServerRedirectionException(other.srv_redirect);
      }
      if (other.isSetFile_exists()) {
        this.file_exists = new FileAlreadyExistsException(other.file_exists);
      }
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public Mkdir_result deepCopy() {
      return new Mkdir_result(this);
    }

    @Override
    public void clear() {
      this.unknown_dir = null;
      this.srv_redirect = null;
      this.file_exists = null;
      this.io_error = null;
      this.srv_error = null;
    }

    public UnrecognizedDirectoryError getUnknown_dir() {
      return this.unknown_dir;
    }

    public Mkdir_result setUnknown_dir(UnrecognizedDirectoryError unknown_dir) {
      this.unknown_dir = unknown_dir;
      return this;
    }

    public void unsetUnknown_dir() {
      this.unknown_dir = null;
    }

    /** Returns true if field unknown_dir is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_dir() {
      return this.unknown_dir != null;
    }

    public void setUnknown_dirIsSet(boolean value) {
      if (!value) {
        this.unknown_dir = null;
      }
    }

    public ServerRedirectionException getSrv_redirect() {
      return this.srv_redirect;
    }

    public Mkdir_result setSrv_redirect(ServerRedirectionException srv_redirect) {
      this.srv_redirect = srv_redirect;
      return this;
    }

    public void unsetSrv_redirect() {
      this.srv_redirect = null;
    }

    /** Returns true if field srv_redirect is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_redirect() {
      return this.srv_redirect != null;
    }

    public void setSrv_redirectIsSet(boolean value) {
      if (!value) {
        this.srv_redirect = null;
      }
    }

    public FileAlreadyExistsException getFile_exists() {
      return this.file_exists;
    }

    public Mkdir_result setFile_exists(FileAlreadyExistsException file_exists) {
      this.file_exists = file_exists;
      return this;
    }

    public void unsetFile_exists() {
      this.file_exists = null;
    }

    /** Returns true if field file_exists is set (has been assigned a value) and false otherwise */
    public boolean isSetFile_exists() {
      return this.file_exists != null;
    }

    public void setFile_existsIsSet(boolean value) {
      if (!value) {
        this.file_exists = null;
      }
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public Mkdir_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public Mkdir_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UNKNOWN_DIR:
        if (value == null) {
          unsetUnknown_dir();
        } else {
          setUnknown_dir((UnrecognizedDirectoryError)value);
        }
        break;

      case SRV_REDIRECT:
        if (value == null) {
          unsetSrv_redirect();
        } else {
          setSrv_redirect((ServerRedirectionException)value);
        }
        break;

      case FILE_EXISTS:
        if (value == null) {
          unsetFile_exists();
        } else {
          setFile_exists((FileAlreadyExistsException)value);
        }
        break;

      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UNKNOWN_DIR:
        return getUnknown_dir();

      case SRV_REDIRECT:
        return getSrv_redirect();

      case FILE_EXISTS:
        return getFile_exists();

      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UNKNOWN_DIR:
        return isSetUnknown_dir();
      case SRV_REDIRECT:
        return isSetSrv_redirect();
      case FILE_EXISTS:
        return isSetFile_exists();
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Mkdir_result)
        return this.equals((Mkdir_result)that);
      return false;
    }

    public boolean equals(Mkdir_result that) {
      if (that == null)
        return false;

      boolean this_present_unknown_dir = true && this.isSetUnknown_dir();
      boolean that_present_unknown_dir = true && that.isSetUnknown_dir();
      if (this_present_unknown_dir || that_present_unknown_dir) {
        if (!(this_present_unknown_dir && that_present_unknown_dir))
          return false;
        if (!this.unknown_dir.equals(that.unknown_dir))
          return false;
      }

      boolean this_present_srv_redirect = true && this.isSetSrv_redirect();
      boolean that_present_srv_redirect = true && that.isSetSrv_redirect();
      if (this_present_srv_redirect || that_present_srv_redirect) {
        if (!(this_present_srv_redirect && that_present_srv_redirect))
          return false;
        if (!this.srv_redirect.equals(that.srv_redirect))
          return false;
      }

      boolean this_present_file_exists = true && this.isSetFile_exists();
      boolean that_present_file_exists = true && that.isSetFile_exists();
      if (this_present_file_exists || that_present_file_exists) {
        if (!(this_present_file_exists && that_present_file_exists))
          return false;
        if (!this.file_exists.equals(that.file_exists))
          return false;
      }

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_unknown_dir = true && (isSetUnknown_dir());
      list.add(present_unknown_dir);
      if (present_unknown_dir)
        list.add(unknown_dir);

      boolean present_srv_redirect = true && (isSetSrv_redirect());
      list.add(present_srv_redirect);
      if (present_srv_redirect)
        list.add(srv_redirect);

      boolean present_file_exists = true && (isSetFile_exists());
      list.add(present_file_exists);
      if (present_file_exists)
        list.add(file_exists);

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(Mkdir_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUnknown_dir()).compareTo(other.isSetUnknown_dir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_dir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_dir, other.unknown_dir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_redirect()).compareTo(other.isSetSrv_redirect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_redirect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_redirect, other.srv_redirect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFile_exists()).compareTo(other.isSetFile_exists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile_exists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_exists, other.file_exists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Mkdir_result(");
      boolean first = true;

      sb.append("unknown_dir:");
      if (this.unknown_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_dir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_redirect:");
      if (this.srv_redirect == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_redirect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("file_exists:");
      if (this.file_exists == null) {
        sb.append("null");
      } else {
        sb.append(this.file_exists);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Mkdir_resultStandardSchemeFactory implements SchemeFactory {
      public Mkdir_resultStandardScheme getScheme() {
        return new Mkdir_resultStandardScheme();
      }
    }

    private static class Mkdir_resultStandardScheme extends StandardScheme<Mkdir_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Mkdir_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNKNOWN_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_dir = new UnrecognizedDirectoryError();
                struct.unknown_dir.read(iprot);
                struct.setUnknown_dirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRV_REDIRECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_redirect = new ServerRedirectionException();
                struct.srv_redirect.read(iprot);
                struct.setSrv_redirectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_EXISTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.file_exists = new FileAlreadyExistsException();
                struct.file_exists.read(iprot);
                struct.setFile_existsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Mkdir_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unknown_dir != null) {
          oprot.writeFieldBegin(UNKNOWN_DIR_FIELD_DESC);
          struct.unknown_dir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_redirect != null) {
          oprot.writeFieldBegin(SRV_REDIRECT_FIELD_DESC);
          struct.srv_redirect.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.file_exists != null) {
          oprot.writeFieldBegin(FILE_EXISTS_FIELD_DESC);
          struct.file_exists.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Mkdir_resultTupleSchemeFactory implements SchemeFactory {
      public Mkdir_resultTupleScheme getScheme() {
        return new Mkdir_resultTupleScheme();
      }
    }

    private static class Mkdir_resultTupleScheme extends TupleScheme<Mkdir_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Mkdir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUnknown_dir()) {
          optionals.set(0);
        }
        if (struct.isSetSrv_redirect()) {
          optionals.set(1);
        }
        if (struct.isSetFile_exists()) {
          optionals.set(2);
        }
        if (struct.isSetIo_error()) {
          optionals.set(3);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUnknown_dir()) {
          struct.unknown_dir.write(oprot);
        }
        if (struct.isSetSrv_redirect()) {
          struct.srv_redirect.write(oprot);
        }
        if (struct.isSetFile_exists()) {
          struct.file_exists.write(oprot);
        }
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Mkdir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.unknown_dir = new UnrecognizedDirectoryError();
          struct.unknown_dir.read(iprot);
          struct.setUnknown_dirIsSet(true);
        }
        if (incoming.get(1)) {
          struct.srv_redirect = new ServerRedirectionException();
          struct.srv_redirect.read(iprot);
          struct.setSrv_redirectIsSet(true);
        }
        if (incoming.get(2)) {
          struct.file_exists = new FileAlreadyExistsException();
          struct.file_exists.read(iprot);
          struct.setFile_existsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(4)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class Mkdir_Presplit_args implements org.apache.thrift.TBase<Mkdir_Presplit_args, Mkdir_Presplit_args._Fields>, java.io.Serializable, Cloneable, Comparable<Mkdir_Presplit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mkdir_Presplit_args");

    private static final org.apache.thrift.protocol.TField OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("obj_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PERM_FIELD_DESC = new org.apache.thrift.protocol.TField("perm", org.apache.thrift.protocol.TType.I16, (short)2);
    private static final org.apache.thrift.protocol.TField HINT_SERVER1_FIELD_DESC = new org.apache.thrift.protocol.TField("hint_server1", org.apache.thrift.protocol.TType.I16, (short)3);
    private static final org.apache.thrift.protocol.TField HINT_SERVER2_FIELD_DESC = new org.apache.thrift.protocol.TField("hint_server2", org.apache.thrift.protocol.TType.I16, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Mkdir_Presplit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Mkdir_Presplit_argsTupleSchemeFactory());
    }

    public OID obj_id; // required
    public short perm; // required
    public short hint_server1; // required
    public short hint_server2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJ_ID((short)1, "obj_id"),
      PERM((short)2, "perm"),
      HINT_SERVER1((short)3, "hint_server1"),
      HINT_SERVER2((short)4, "hint_server2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJ_ID
            return OBJ_ID;
          case 2: // PERM
            return PERM;
          case 3: // HINT_SERVER1
            return HINT_SERVER1;
          case 4: // HINT_SERVER2
            return HINT_SERVER2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PERM_ISSET_ID = 0;
    private static final int __HINT_SERVER1_ISSET_ID = 1;
    private static final int __HINT_SERVER2_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("obj_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OID.class)));
      tmpMap.put(_Fields.PERM, new org.apache.thrift.meta_data.FieldMetaData("perm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.HINT_SERVER1, new org.apache.thrift.meta_data.FieldMetaData("hint_server1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.HINT_SERVER2, new org.apache.thrift.meta_data.FieldMetaData("hint_server2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mkdir_Presplit_args.class, metaDataMap);
    }

    public Mkdir_Presplit_args() {
    }

    public Mkdir_Presplit_args(
      OID obj_id,
      short perm,
      short hint_server1,
      short hint_server2)
    {
      this();
      this.obj_id = obj_id;
      this.perm = perm;
      setPermIsSet(true);
      this.hint_server1 = hint_server1;
      setHint_server1IsSet(true);
      this.hint_server2 = hint_server2;
      setHint_server2IsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Mkdir_Presplit_args(Mkdir_Presplit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetObj_id()) {
        this.obj_id = new OID(other.obj_id);
      }
      this.perm = other.perm;
      this.hint_server1 = other.hint_server1;
      this.hint_server2 = other.hint_server2;
    }

    public Mkdir_Presplit_args deepCopy() {
      return new Mkdir_Presplit_args(this);
    }

    @Override
    public void clear() {
      this.obj_id = null;
      setPermIsSet(false);
      this.perm = 0;
      setHint_server1IsSet(false);
      this.hint_server1 = 0;
      setHint_server2IsSet(false);
      this.hint_server2 = 0;
    }

    public OID getObj_id() {
      return this.obj_id;
    }

    public Mkdir_Presplit_args setObj_id(OID obj_id) {
      this.obj_id = obj_id;
      return this;
    }

    public void unsetObj_id() {
      this.obj_id = null;
    }

    /** Returns true if field obj_id is set (has been assigned a value) and false otherwise */
    public boolean isSetObj_id() {
      return this.obj_id != null;
    }

    public void setObj_idIsSet(boolean value) {
      if (!value) {
        this.obj_id = null;
      }
    }

    public short getPerm() {
      return this.perm;
    }

    public Mkdir_Presplit_args setPerm(short perm) {
      this.perm = perm;
      setPermIsSet(true);
      return this;
    }

    public void unsetPerm() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERM_ISSET_ID);
    }

    /** Returns true if field perm is set (has been assigned a value) and false otherwise */
    public boolean isSetPerm() {
      return EncodingUtils.testBit(__isset_bitfield, __PERM_ISSET_ID);
    }

    public void setPermIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERM_ISSET_ID, value);
    }

    public short getHint_server1() {
      return this.hint_server1;
    }

    public Mkdir_Presplit_args setHint_server1(short hint_server1) {
      this.hint_server1 = hint_server1;
      setHint_server1IsSet(true);
      return this;
    }

    public void unsetHint_server1() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HINT_SERVER1_ISSET_ID);
    }

    /** Returns true if field hint_server1 is set (has been assigned a value) and false otherwise */
    public boolean isSetHint_server1() {
      return EncodingUtils.testBit(__isset_bitfield, __HINT_SERVER1_ISSET_ID);
    }

    public void setHint_server1IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HINT_SERVER1_ISSET_ID, value);
    }

    public short getHint_server2() {
      return this.hint_server2;
    }

    public Mkdir_Presplit_args setHint_server2(short hint_server2) {
      this.hint_server2 = hint_server2;
      setHint_server2IsSet(true);
      return this;
    }

    public void unsetHint_server2() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HINT_SERVER2_ISSET_ID);
    }

    /** Returns true if field hint_server2 is set (has been assigned a value) and false otherwise */
    public boolean isSetHint_server2() {
      return EncodingUtils.testBit(__isset_bitfield, __HINT_SERVER2_ISSET_ID);
    }

    public void setHint_server2IsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HINT_SERVER2_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJ_ID:
        if (value == null) {
          unsetObj_id();
        } else {
          setObj_id((OID)value);
        }
        break;

      case PERM:
        if (value == null) {
          unsetPerm();
        } else {
          setPerm((Short)value);
        }
        break;

      case HINT_SERVER1:
        if (value == null) {
          unsetHint_server1();
        } else {
          setHint_server1((Short)value);
        }
        break;

      case HINT_SERVER2:
        if (value == null) {
          unsetHint_server2();
        } else {
          setHint_server2((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJ_ID:
        return getObj_id();

      case PERM:
        return getPerm();

      case HINT_SERVER1:
        return getHint_server1();

      case HINT_SERVER2:
        return getHint_server2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJ_ID:
        return isSetObj_id();
      case PERM:
        return isSetPerm();
      case HINT_SERVER1:
        return isSetHint_server1();
      case HINT_SERVER2:
        return isSetHint_server2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Mkdir_Presplit_args)
        return this.equals((Mkdir_Presplit_args)that);
      return false;
    }

    public boolean equals(Mkdir_Presplit_args that) {
      if (that == null)
        return false;

      boolean this_present_obj_id = true && this.isSetObj_id();
      boolean that_present_obj_id = true && that.isSetObj_id();
      if (this_present_obj_id || that_present_obj_id) {
        if (!(this_present_obj_id && that_present_obj_id))
          return false;
        if (!this.obj_id.equals(that.obj_id))
          return false;
      }

      boolean this_present_perm = true;
      boolean that_present_perm = true;
      if (this_present_perm || that_present_perm) {
        if (!(this_present_perm && that_present_perm))
          return false;
        if (this.perm != that.perm)
          return false;
      }

      boolean this_present_hint_server1 = true;
      boolean that_present_hint_server1 = true;
      if (this_present_hint_server1 || that_present_hint_server1) {
        if (!(this_present_hint_server1 && that_present_hint_server1))
          return false;
        if (this.hint_server1 != that.hint_server1)
          return false;
      }

      boolean this_present_hint_server2 = true;
      boolean that_present_hint_server2 = true;
      if (this_present_hint_server2 || that_present_hint_server2) {
        if (!(this_present_hint_server2 && that_present_hint_server2))
          return false;
        if (this.hint_server2 != that.hint_server2)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_obj_id = true && (isSetObj_id());
      list.add(present_obj_id);
      if (present_obj_id)
        list.add(obj_id);

      boolean present_perm = true;
      list.add(present_perm);
      if (present_perm)
        list.add(perm);

      boolean present_hint_server1 = true;
      list.add(present_hint_server1);
      if (present_hint_server1)
        list.add(hint_server1);

      boolean present_hint_server2 = true;
      list.add(present_hint_server2);
      if (present_hint_server2)
        list.add(hint_server2);

      return list.hashCode();
    }

    @Override
    public int compareTo(Mkdir_Presplit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObj_id()).compareTo(other.isSetObj_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObj_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj_id, other.obj_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPerm()).compareTo(other.isSetPerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perm, other.perm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHint_server1()).compareTo(other.isSetHint_server1());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHint_server1()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hint_server1, other.hint_server1);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHint_server2()).compareTo(other.isSetHint_server2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHint_server2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hint_server2, other.hint_server2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Mkdir_Presplit_args(");
      boolean first = true;

      sb.append("obj_id:");
      if (this.obj_id == null) {
        sb.append("null");
      } else {
        sb.append(this.obj_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("perm:");
      sb.append(this.perm);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hint_server1:");
      sb.append(this.hint_server1);
      first = false;
      if (!first) sb.append(", ");
      sb.append("hint_server2:");
      sb.append(this.hint_server2);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (obj_id != null) {
        obj_id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Mkdir_Presplit_argsStandardSchemeFactory implements SchemeFactory {
      public Mkdir_Presplit_argsStandardScheme getScheme() {
        return new Mkdir_Presplit_argsStandardScheme();
      }
    }

    private static class Mkdir_Presplit_argsStandardScheme extends StandardScheme<Mkdir_Presplit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Mkdir_Presplit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.obj_id = new OID();
                struct.obj_id.read(iprot);
                struct.setObj_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.perm = iprot.readI16();
                struct.setPermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HINT_SERVER1
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.hint_server1 = iprot.readI16();
                struct.setHint_server1IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // HINT_SERVER2
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.hint_server2 = iprot.readI16();
                struct.setHint_server2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Mkdir_Presplit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.obj_id != null) {
          oprot.writeFieldBegin(OBJ_ID_FIELD_DESC);
          struct.obj_id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PERM_FIELD_DESC);
        oprot.writeI16(struct.perm);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HINT_SERVER1_FIELD_DESC);
        oprot.writeI16(struct.hint_server1);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(HINT_SERVER2_FIELD_DESC);
        oprot.writeI16(struct.hint_server2);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Mkdir_Presplit_argsTupleSchemeFactory implements SchemeFactory {
      public Mkdir_Presplit_argsTupleScheme getScheme() {
        return new Mkdir_Presplit_argsTupleScheme();
      }
    }

    private static class Mkdir_Presplit_argsTupleScheme extends TupleScheme<Mkdir_Presplit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Mkdir_Presplit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObj_id()) {
          optionals.set(0);
        }
        if (struct.isSetPerm()) {
          optionals.set(1);
        }
        if (struct.isSetHint_server1()) {
          optionals.set(2);
        }
        if (struct.isSetHint_server2()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetObj_id()) {
          struct.obj_id.write(oprot);
        }
        if (struct.isSetPerm()) {
          oprot.writeI16(struct.perm);
        }
        if (struct.isSetHint_server1()) {
          oprot.writeI16(struct.hint_server1);
        }
        if (struct.isSetHint_server2()) {
          oprot.writeI16(struct.hint_server2);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Mkdir_Presplit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.obj_id = new OID();
          struct.obj_id.read(iprot);
          struct.setObj_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.perm = iprot.readI16();
          struct.setPermIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hint_server1 = iprot.readI16();
          struct.setHint_server1IsSet(true);
        }
        if (incoming.get(3)) {
          struct.hint_server2 = iprot.readI16();
          struct.setHint_server2IsSet(true);
        }
      }
    }

  }

  public static class Mkdir_Presplit_result implements org.apache.thrift.TBase<Mkdir_Presplit_result, Mkdir_Presplit_result._Fields>, java.io.Serializable, Cloneable, Comparable<Mkdir_Presplit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Mkdir_Presplit_result");

    private static final org.apache.thrift.protocol.TField UNKNOWN_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_dir", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SRV_REDIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_redirect", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("file_exists", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Mkdir_Presplit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Mkdir_Presplit_resultTupleSchemeFactory());
    }

    public UnrecognizedDirectoryError unknown_dir; // required
    public ServerRedirectionException srv_redirect; // required
    public FileAlreadyExistsException file_exists; // required
    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNKNOWN_DIR((short)1, "unknown_dir"),
      SRV_REDIRECT((short)2, "srv_redirect"),
      FILE_EXISTS((short)3, "file_exists"),
      IO_ERROR((short)4, "io_error"),
      SRV_ERROR((short)5, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNKNOWN_DIR
            return UNKNOWN_DIR;
          case 2: // SRV_REDIRECT
            return SRV_REDIRECT;
          case 3: // FILE_EXISTS
            return FILE_EXISTS;
          case 4: // IO_ERROR
            return IO_ERROR;
          case 5: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNKNOWN_DIR, new org.apache.thrift.meta_data.FieldMetaData("unknown_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_REDIRECT, new org.apache.thrift.meta_data.FieldMetaData("srv_redirect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FILE_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("file_exists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Mkdir_Presplit_result.class, metaDataMap);
    }

    public Mkdir_Presplit_result() {
    }

    public Mkdir_Presplit_result(
      UnrecognizedDirectoryError unknown_dir,
      ServerRedirectionException srv_redirect,
      FileAlreadyExistsException file_exists,
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.unknown_dir = unknown_dir;
      this.srv_redirect = srv_redirect;
      this.file_exists = file_exists;
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Mkdir_Presplit_result(Mkdir_Presplit_result other) {
      if (other.isSetUnknown_dir()) {
        this.unknown_dir = new UnrecognizedDirectoryError(other.unknown_dir);
      }
      if (other.isSetSrv_redirect()) {
        this.srv_redirect = new ServerRedirectionException(other.srv_redirect);
      }
      if (other.isSetFile_exists()) {
        this.file_exists = new FileAlreadyExistsException(other.file_exists);
      }
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public Mkdir_Presplit_result deepCopy() {
      return new Mkdir_Presplit_result(this);
    }

    @Override
    public void clear() {
      this.unknown_dir = null;
      this.srv_redirect = null;
      this.file_exists = null;
      this.io_error = null;
      this.srv_error = null;
    }

    public UnrecognizedDirectoryError getUnknown_dir() {
      return this.unknown_dir;
    }

    public Mkdir_Presplit_result setUnknown_dir(UnrecognizedDirectoryError unknown_dir) {
      this.unknown_dir = unknown_dir;
      return this;
    }

    public void unsetUnknown_dir() {
      this.unknown_dir = null;
    }

    /** Returns true if field unknown_dir is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_dir() {
      return this.unknown_dir != null;
    }

    public void setUnknown_dirIsSet(boolean value) {
      if (!value) {
        this.unknown_dir = null;
      }
    }

    public ServerRedirectionException getSrv_redirect() {
      return this.srv_redirect;
    }

    public Mkdir_Presplit_result setSrv_redirect(ServerRedirectionException srv_redirect) {
      this.srv_redirect = srv_redirect;
      return this;
    }

    public void unsetSrv_redirect() {
      this.srv_redirect = null;
    }

    /** Returns true if field srv_redirect is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_redirect() {
      return this.srv_redirect != null;
    }

    public void setSrv_redirectIsSet(boolean value) {
      if (!value) {
        this.srv_redirect = null;
      }
    }

    public FileAlreadyExistsException getFile_exists() {
      return this.file_exists;
    }

    public Mkdir_Presplit_result setFile_exists(FileAlreadyExistsException file_exists) {
      this.file_exists = file_exists;
      return this;
    }

    public void unsetFile_exists() {
      this.file_exists = null;
    }

    /** Returns true if field file_exists is set (has been assigned a value) and false otherwise */
    public boolean isSetFile_exists() {
      return this.file_exists != null;
    }

    public void setFile_existsIsSet(boolean value) {
      if (!value) {
        this.file_exists = null;
      }
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public Mkdir_Presplit_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public Mkdir_Presplit_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UNKNOWN_DIR:
        if (value == null) {
          unsetUnknown_dir();
        } else {
          setUnknown_dir((UnrecognizedDirectoryError)value);
        }
        break;

      case SRV_REDIRECT:
        if (value == null) {
          unsetSrv_redirect();
        } else {
          setSrv_redirect((ServerRedirectionException)value);
        }
        break;

      case FILE_EXISTS:
        if (value == null) {
          unsetFile_exists();
        } else {
          setFile_exists((FileAlreadyExistsException)value);
        }
        break;

      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UNKNOWN_DIR:
        return getUnknown_dir();

      case SRV_REDIRECT:
        return getSrv_redirect();

      case FILE_EXISTS:
        return getFile_exists();

      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UNKNOWN_DIR:
        return isSetUnknown_dir();
      case SRV_REDIRECT:
        return isSetSrv_redirect();
      case FILE_EXISTS:
        return isSetFile_exists();
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Mkdir_Presplit_result)
        return this.equals((Mkdir_Presplit_result)that);
      return false;
    }

    public boolean equals(Mkdir_Presplit_result that) {
      if (that == null)
        return false;

      boolean this_present_unknown_dir = true && this.isSetUnknown_dir();
      boolean that_present_unknown_dir = true && that.isSetUnknown_dir();
      if (this_present_unknown_dir || that_present_unknown_dir) {
        if (!(this_present_unknown_dir && that_present_unknown_dir))
          return false;
        if (!this.unknown_dir.equals(that.unknown_dir))
          return false;
      }

      boolean this_present_srv_redirect = true && this.isSetSrv_redirect();
      boolean that_present_srv_redirect = true && that.isSetSrv_redirect();
      if (this_present_srv_redirect || that_present_srv_redirect) {
        if (!(this_present_srv_redirect && that_present_srv_redirect))
          return false;
        if (!this.srv_redirect.equals(that.srv_redirect))
          return false;
      }

      boolean this_present_file_exists = true && this.isSetFile_exists();
      boolean that_present_file_exists = true && that.isSetFile_exists();
      if (this_present_file_exists || that_present_file_exists) {
        if (!(this_present_file_exists && that_present_file_exists))
          return false;
        if (!this.file_exists.equals(that.file_exists))
          return false;
      }

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_unknown_dir = true && (isSetUnknown_dir());
      list.add(present_unknown_dir);
      if (present_unknown_dir)
        list.add(unknown_dir);

      boolean present_srv_redirect = true && (isSetSrv_redirect());
      list.add(present_srv_redirect);
      if (present_srv_redirect)
        list.add(srv_redirect);

      boolean present_file_exists = true && (isSetFile_exists());
      list.add(present_file_exists);
      if (present_file_exists)
        list.add(file_exists);

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(Mkdir_Presplit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUnknown_dir()).compareTo(other.isSetUnknown_dir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_dir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_dir, other.unknown_dir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_redirect()).compareTo(other.isSetSrv_redirect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_redirect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_redirect, other.srv_redirect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFile_exists()).compareTo(other.isSetFile_exists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile_exists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_exists, other.file_exists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Mkdir_Presplit_result(");
      boolean first = true;

      sb.append("unknown_dir:");
      if (this.unknown_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_dir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_redirect:");
      if (this.srv_redirect == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_redirect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("file_exists:");
      if (this.file_exists == null) {
        sb.append("null");
      } else {
        sb.append(this.file_exists);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Mkdir_Presplit_resultStandardSchemeFactory implements SchemeFactory {
      public Mkdir_Presplit_resultStandardScheme getScheme() {
        return new Mkdir_Presplit_resultStandardScheme();
      }
    }

    private static class Mkdir_Presplit_resultStandardScheme extends StandardScheme<Mkdir_Presplit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Mkdir_Presplit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNKNOWN_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_dir = new UnrecognizedDirectoryError();
                struct.unknown_dir.read(iprot);
                struct.setUnknown_dirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRV_REDIRECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_redirect = new ServerRedirectionException();
                struct.srv_redirect.read(iprot);
                struct.setSrv_redirectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE_EXISTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.file_exists = new FileAlreadyExistsException();
                struct.file_exists.read(iprot);
                struct.setFile_existsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Mkdir_Presplit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unknown_dir != null) {
          oprot.writeFieldBegin(UNKNOWN_DIR_FIELD_DESC);
          struct.unknown_dir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_redirect != null) {
          oprot.writeFieldBegin(SRV_REDIRECT_FIELD_DESC);
          struct.srv_redirect.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.file_exists != null) {
          oprot.writeFieldBegin(FILE_EXISTS_FIELD_DESC);
          struct.file_exists.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Mkdir_Presplit_resultTupleSchemeFactory implements SchemeFactory {
      public Mkdir_Presplit_resultTupleScheme getScheme() {
        return new Mkdir_Presplit_resultTupleScheme();
      }
    }

    private static class Mkdir_Presplit_resultTupleScheme extends TupleScheme<Mkdir_Presplit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Mkdir_Presplit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUnknown_dir()) {
          optionals.set(0);
        }
        if (struct.isSetSrv_redirect()) {
          optionals.set(1);
        }
        if (struct.isSetFile_exists()) {
          optionals.set(2);
        }
        if (struct.isSetIo_error()) {
          optionals.set(3);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUnknown_dir()) {
          struct.unknown_dir.write(oprot);
        }
        if (struct.isSetSrv_redirect()) {
          struct.srv_redirect.write(oprot);
        }
        if (struct.isSetFile_exists()) {
          struct.file_exists.write(oprot);
        }
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Mkdir_Presplit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.unknown_dir = new UnrecognizedDirectoryError();
          struct.unknown_dir.read(iprot);
          struct.setUnknown_dirIsSet(true);
        }
        if (incoming.get(1)) {
          struct.srv_redirect = new ServerRedirectionException();
          struct.srv_redirect.read(iprot);
          struct.setSrv_redirectIsSet(true);
        }
        if (incoming.get(2)) {
          struct.file_exists = new FileAlreadyExistsException();
          struct.file_exists.read(iprot);
          struct.setFile_existsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(4)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class Chmod_args implements org.apache.thrift.TBase<Chmod_args, Chmod_args._Fields>, java.io.Serializable, Cloneable, Comparable<Chmod_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Chmod_args");

    private static final org.apache.thrift.protocol.TField OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("obj_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PERM_FIELD_DESC = new org.apache.thrift.protocol.TField("perm", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Chmod_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Chmod_argsTupleSchemeFactory());
    }

    public OID obj_id; // required
    public short perm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJ_ID((short)1, "obj_id"),
      PERM((short)2, "perm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJ_ID
            return OBJ_ID;
          case 2: // PERM
            return PERM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PERM_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("obj_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OID.class)));
      tmpMap.put(_Fields.PERM, new org.apache.thrift.meta_data.FieldMetaData("perm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Chmod_args.class, metaDataMap);
    }

    public Chmod_args() {
    }

    public Chmod_args(
      OID obj_id,
      short perm)
    {
      this();
      this.obj_id = obj_id;
      this.perm = perm;
      setPermIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Chmod_args(Chmod_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetObj_id()) {
        this.obj_id = new OID(other.obj_id);
      }
      this.perm = other.perm;
    }

    public Chmod_args deepCopy() {
      return new Chmod_args(this);
    }

    @Override
    public void clear() {
      this.obj_id = null;
      setPermIsSet(false);
      this.perm = 0;
    }

    public OID getObj_id() {
      return this.obj_id;
    }

    public Chmod_args setObj_id(OID obj_id) {
      this.obj_id = obj_id;
      return this;
    }

    public void unsetObj_id() {
      this.obj_id = null;
    }

    /** Returns true if field obj_id is set (has been assigned a value) and false otherwise */
    public boolean isSetObj_id() {
      return this.obj_id != null;
    }

    public void setObj_idIsSet(boolean value) {
      if (!value) {
        this.obj_id = null;
      }
    }

    public short getPerm() {
      return this.perm;
    }

    public Chmod_args setPerm(short perm) {
      this.perm = perm;
      setPermIsSet(true);
      return this;
    }

    public void unsetPerm() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERM_ISSET_ID);
    }

    /** Returns true if field perm is set (has been assigned a value) and false otherwise */
    public boolean isSetPerm() {
      return EncodingUtils.testBit(__isset_bitfield, __PERM_ISSET_ID);
    }

    public void setPermIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERM_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJ_ID:
        if (value == null) {
          unsetObj_id();
        } else {
          setObj_id((OID)value);
        }
        break;

      case PERM:
        if (value == null) {
          unsetPerm();
        } else {
          setPerm((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJ_ID:
        return getObj_id();

      case PERM:
        return getPerm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJ_ID:
        return isSetObj_id();
      case PERM:
        return isSetPerm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Chmod_args)
        return this.equals((Chmod_args)that);
      return false;
    }

    public boolean equals(Chmod_args that) {
      if (that == null)
        return false;

      boolean this_present_obj_id = true && this.isSetObj_id();
      boolean that_present_obj_id = true && that.isSetObj_id();
      if (this_present_obj_id || that_present_obj_id) {
        if (!(this_present_obj_id && that_present_obj_id))
          return false;
        if (!this.obj_id.equals(that.obj_id))
          return false;
      }

      boolean this_present_perm = true;
      boolean that_present_perm = true;
      if (this_present_perm || that_present_perm) {
        if (!(this_present_perm && that_present_perm))
          return false;
        if (this.perm != that.perm)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_obj_id = true && (isSetObj_id());
      list.add(present_obj_id);
      if (present_obj_id)
        list.add(obj_id);

      boolean present_perm = true;
      list.add(present_perm);
      if (present_perm)
        list.add(perm);

      return list.hashCode();
    }

    @Override
    public int compareTo(Chmod_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObj_id()).compareTo(other.isSetObj_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObj_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj_id, other.obj_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPerm()).compareTo(other.isSetPerm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPerm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perm, other.perm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Chmod_args(");
      boolean first = true;

      sb.append("obj_id:");
      if (this.obj_id == null) {
        sb.append("null");
      } else {
        sb.append(this.obj_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("perm:");
      sb.append(this.perm);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (obj_id != null) {
        obj_id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Chmod_argsStandardSchemeFactory implements SchemeFactory {
      public Chmod_argsStandardScheme getScheme() {
        return new Chmod_argsStandardScheme();
      }
    }

    private static class Chmod_argsStandardScheme extends StandardScheme<Chmod_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Chmod_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.obj_id = new OID();
                struct.obj_id.read(iprot);
                struct.setObj_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PERM
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.perm = iprot.readI16();
                struct.setPermIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Chmod_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.obj_id != null) {
          oprot.writeFieldBegin(OBJ_ID_FIELD_DESC);
          struct.obj_id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PERM_FIELD_DESC);
        oprot.writeI16(struct.perm);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Chmod_argsTupleSchemeFactory implements SchemeFactory {
      public Chmod_argsTupleScheme getScheme() {
        return new Chmod_argsTupleScheme();
      }
    }

    private static class Chmod_argsTupleScheme extends TupleScheme<Chmod_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Chmod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObj_id()) {
          optionals.set(0);
        }
        if (struct.isSetPerm()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetObj_id()) {
          struct.obj_id.write(oprot);
        }
        if (struct.isSetPerm()) {
          oprot.writeI16(struct.perm);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Chmod_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.obj_id = new OID();
          struct.obj_id.read(iprot);
          struct.setObj_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.perm = iprot.readI16();
          struct.setPermIsSet(true);
        }
      }
    }

  }

  public static class Chmod_result implements org.apache.thrift.TBase<Chmod_result, Chmod_result._Fields>, java.io.Serializable, Cloneable, Comparable<Chmod_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Chmod_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_dir", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SRV_REDIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_redirect", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("not_found", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Chmod_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Chmod_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public UnrecognizedDirectoryError unknown_dir; // required
    public ServerRedirectionException srv_redirect; // required
    public FileNotFoundException not_found; // required
    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNKNOWN_DIR((short)1, "unknown_dir"),
      SRV_REDIRECT((short)2, "srv_redirect"),
      NOT_FOUND((short)3, "not_found"),
      IO_ERROR((short)4, "io_error"),
      SRV_ERROR((short)5, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN_DIR
            return UNKNOWN_DIR;
          case 2: // SRV_REDIRECT
            return SRV_REDIRECT;
          case 3: // NOT_FOUND
            return NOT_FOUND;
          case 4: // IO_ERROR
            return IO_ERROR;
          case 5: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UNKNOWN_DIR, new org.apache.thrift.meta_data.FieldMetaData("unknown_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_REDIRECT, new org.apache.thrift.meta_data.FieldMetaData("srv_redirect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("not_found", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Chmod_result.class, metaDataMap);
    }

    public Chmod_result() {
    }

    public Chmod_result(
      boolean success,
      UnrecognizedDirectoryError unknown_dir,
      ServerRedirectionException srv_redirect,
      FileNotFoundException not_found,
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.unknown_dir = unknown_dir;
      this.srv_redirect = srv_redirect;
      this.not_found = not_found;
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Chmod_result(Chmod_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUnknown_dir()) {
        this.unknown_dir = new UnrecognizedDirectoryError(other.unknown_dir);
      }
      if (other.isSetSrv_redirect()) {
        this.srv_redirect = new ServerRedirectionException(other.srv_redirect);
      }
      if (other.isSetNot_found()) {
        this.not_found = new FileNotFoundException(other.not_found);
      }
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public Chmod_result deepCopy() {
      return new Chmod_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.unknown_dir = null;
      this.srv_redirect = null;
      this.not_found = null;
      this.io_error = null;
      this.srv_error = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public Chmod_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public UnrecognizedDirectoryError getUnknown_dir() {
      return this.unknown_dir;
    }

    public Chmod_result setUnknown_dir(UnrecognizedDirectoryError unknown_dir) {
      this.unknown_dir = unknown_dir;
      return this;
    }

    public void unsetUnknown_dir() {
      this.unknown_dir = null;
    }

    /** Returns true if field unknown_dir is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_dir() {
      return this.unknown_dir != null;
    }

    public void setUnknown_dirIsSet(boolean value) {
      if (!value) {
        this.unknown_dir = null;
      }
    }

    public ServerRedirectionException getSrv_redirect() {
      return this.srv_redirect;
    }

    public Chmod_result setSrv_redirect(ServerRedirectionException srv_redirect) {
      this.srv_redirect = srv_redirect;
      return this;
    }

    public void unsetSrv_redirect() {
      this.srv_redirect = null;
    }

    /** Returns true if field srv_redirect is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_redirect() {
      return this.srv_redirect != null;
    }

    public void setSrv_redirectIsSet(boolean value) {
      if (!value) {
        this.srv_redirect = null;
      }
    }

    public FileNotFoundException getNot_found() {
      return this.not_found;
    }

    public Chmod_result setNot_found(FileNotFoundException not_found) {
      this.not_found = not_found;
      return this;
    }

    public void unsetNot_found() {
      this.not_found = null;
    }

    /** Returns true if field not_found is set (has been assigned a value) and false otherwise */
    public boolean isSetNot_found() {
      return this.not_found != null;
    }

    public void setNot_foundIsSet(boolean value) {
      if (!value) {
        this.not_found = null;
      }
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public Chmod_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public Chmod_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case UNKNOWN_DIR:
        if (value == null) {
          unsetUnknown_dir();
        } else {
          setUnknown_dir((UnrecognizedDirectoryError)value);
        }
        break;

      case SRV_REDIRECT:
        if (value == null) {
          unsetSrv_redirect();
        } else {
          setSrv_redirect((ServerRedirectionException)value);
        }
        break;

      case NOT_FOUND:
        if (value == null) {
          unsetNot_found();
        } else {
          setNot_found((FileNotFoundException)value);
        }
        break;

      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case UNKNOWN_DIR:
        return getUnknown_dir();

      case SRV_REDIRECT:
        return getSrv_redirect();

      case NOT_FOUND:
        return getNot_found();

      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN_DIR:
        return isSetUnknown_dir();
      case SRV_REDIRECT:
        return isSetSrv_redirect();
      case NOT_FOUND:
        return isSetNot_found();
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Chmod_result)
        return this.equals((Chmod_result)that);
      return false;
    }

    public boolean equals(Chmod_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_unknown_dir = true && this.isSetUnknown_dir();
      boolean that_present_unknown_dir = true && that.isSetUnknown_dir();
      if (this_present_unknown_dir || that_present_unknown_dir) {
        if (!(this_present_unknown_dir && that_present_unknown_dir))
          return false;
        if (!this.unknown_dir.equals(that.unknown_dir))
          return false;
      }

      boolean this_present_srv_redirect = true && this.isSetSrv_redirect();
      boolean that_present_srv_redirect = true && that.isSetSrv_redirect();
      if (this_present_srv_redirect || that_present_srv_redirect) {
        if (!(this_present_srv_redirect && that_present_srv_redirect))
          return false;
        if (!this.srv_redirect.equals(that.srv_redirect))
          return false;
      }

      boolean this_present_not_found = true && this.isSetNot_found();
      boolean that_present_not_found = true && that.isSetNot_found();
      if (this_present_not_found || that_present_not_found) {
        if (!(this_present_not_found && that_present_not_found))
          return false;
        if (!this.not_found.equals(that.not_found))
          return false;
      }

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_unknown_dir = true && (isSetUnknown_dir());
      list.add(present_unknown_dir);
      if (present_unknown_dir)
        list.add(unknown_dir);

      boolean present_srv_redirect = true && (isSetSrv_redirect());
      list.add(present_srv_redirect);
      if (present_srv_redirect)
        list.add(srv_redirect);

      boolean present_not_found = true && (isSetNot_found());
      list.add(present_not_found);
      if (present_not_found)
        list.add(not_found);

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(Chmod_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnknown_dir()).compareTo(other.isSetUnknown_dir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_dir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_dir, other.unknown_dir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_redirect()).compareTo(other.isSetSrv_redirect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_redirect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_redirect, other.srv_redirect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNot_found()).compareTo(other.isSetNot_found());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNot_found()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.not_found, other.not_found);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Chmod_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknown_dir:");
      if (this.unknown_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_dir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_redirect:");
      if (this.srv_redirect == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_redirect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("not_found:");
      if (this.not_found == null) {
        sb.append("null");
      } else {
        sb.append(this.not_found);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Chmod_resultStandardSchemeFactory implements SchemeFactory {
      public Chmod_resultStandardScheme getScheme() {
        return new Chmod_resultStandardScheme();
      }
    }

    private static class Chmod_resultStandardScheme extends StandardScheme<Chmod_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Chmod_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_dir = new UnrecognizedDirectoryError();
                struct.unknown_dir.read(iprot);
                struct.setUnknown_dirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRV_REDIRECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_redirect = new ServerRedirectionException();
                struct.srv_redirect.read(iprot);
                struct.setSrv_redirectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.not_found = new FileNotFoundException();
                struct.not_found.read(iprot);
                struct.setNot_foundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Chmod_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.unknown_dir != null) {
          oprot.writeFieldBegin(UNKNOWN_DIR_FIELD_DESC);
          struct.unknown_dir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_redirect != null) {
          oprot.writeFieldBegin(SRV_REDIRECT_FIELD_DESC);
          struct.srv_redirect.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.not_found != null) {
          oprot.writeFieldBegin(NOT_FOUND_FIELD_DESC);
          struct.not_found.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Chmod_resultTupleSchemeFactory implements SchemeFactory {
      public Chmod_resultTupleScheme getScheme() {
        return new Chmod_resultTupleScheme();
      }
    }

    private static class Chmod_resultTupleScheme extends TupleScheme<Chmod_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Chmod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknown_dir()) {
          optionals.set(1);
        }
        if (struct.isSetSrv_redirect()) {
          optionals.set(2);
        }
        if (struct.isSetNot_found()) {
          optionals.set(3);
        }
        if (struct.isSetIo_error()) {
          optionals.set(4);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUnknown_dir()) {
          struct.unknown_dir.write(oprot);
        }
        if (struct.isSetSrv_redirect()) {
          struct.srv_redirect.write(oprot);
        }
        if (struct.isSetNot_found()) {
          struct.not_found.write(oprot);
        }
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Chmod_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknown_dir = new UnrecognizedDirectoryError();
          struct.unknown_dir.read(iprot);
          struct.setUnknown_dirIsSet(true);
        }
        if (incoming.get(2)) {
          struct.srv_redirect = new ServerRedirectionException();
          struct.srv_redirect.read(iprot);
          struct.setSrv_redirectIsSet(true);
        }
        if (incoming.get(3)) {
          struct.not_found = new FileNotFoundException();
          struct.not_found.read(iprot);
          struct.setNot_foundIsSet(true);
        }
        if (incoming.get(4)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(5)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class Chown_args implements org.apache.thrift.TBase<Chown_args, Chown_args._Fields>, java.io.Serializable, Cloneable, Comparable<Chown_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Chown_args");

    private static final org.apache.thrift.protocol.TField OBJ_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("obj_id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I16, (short)2);
    private static final org.apache.thrift.protocol.TField GID_FIELD_DESC = new org.apache.thrift.protocol.TField("gid", org.apache.thrift.protocol.TType.I16, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Chown_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Chown_argsTupleSchemeFactory());
    }

    public OID obj_id; // required
    public short uid; // required
    public short gid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      OBJ_ID((short)1, "obj_id"),
      UID((short)2, "uid"),
      GID((short)3, "gid");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OBJ_ID
            return OBJ_ID;
          case 2: // UID
            return UID;
          case 3: // GID
            return GID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __UID_ISSET_ID = 0;
    private static final int __GID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OBJ_ID, new org.apache.thrift.meta_data.FieldMetaData("obj_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, OID.class)));
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.GID, new org.apache.thrift.meta_data.FieldMetaData("gid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Chown_args.class, metaDataMap);
    }

    public Chown_args() {
    }

    public Chown_args(
      OID obj_id,
      short uid,
      short gid)
    {
      this();
      this.obj_id = obj_id;
      this.uid = uid;
      setUidIsSet(true);
      this.gid = gid;
      setGidIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Chown_args(Chown_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetObj_id()) {
        this.obj_id = new OID(other.obj_id);
      }
      this.uid = other.uid;
      this.gid = other.gid;
    }

    public Chown_args deepCopy() {
      return new Chown_args(this);
    }

    @Override
    public void clear() {
      this.obj_id = null;
      setUidIsSet(false);
      this.uid = 0;
      setGidIsSet(false);
      this.gid = 0;
    }

    public OID getObj_id() {
      return this.obj_id;
    }

    public Chown_args setObj_id(OID obj_id) {
      this.obj_id = obj_id;
      return this;
    }

    public void unsetObj_id() {
      this.obj_id = null;
    }

    /** Returns true if field obj_id is set (has been assigned a value) and false otherwise */
    public boolean isSetObj_id() {
      return this.obj_id != null;
    }

    public void setObj_idIsSet(boolean value) {
      if (!value) {
        this.obj_id = null;
      }
    }

    public short getUid() {
      return this.uid;
    }

    public Chown_args setUid(short uid) {
      this.uid = uid;
      setUidIsSet(true);
      return this;
    }

    public void unsetUid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
    }

    public void setUidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
    }

    public short getGid() {
      return this.gid;
    }

    public Chown_args setGid(short gid) {
      this.gid = gid;
      setGidIsSet(true);
      return this;
    }

    public void unsetGid() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GID_ISSET_ID);
    }

    /** Returns true if field gid is set (has been assigned a value) and false otherwise */
    public boolean isSetGid() {
      return EncodingUtils.testBit(__isset_bitfield, __GID_ISSET_ID);
    }

    public void setGidIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OBJ_ID:
        if (value == null) {
          unsetObj_id();
        } else {
          setObj_id((OID)value);
        }
        break;

      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((Short)value);
        }
        break;

      case GID:
        if (value == null) {
          unsetGid();
        } else {
          setGid((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OBJ_ID:
        return getObj_id();

      case UID:
        return getUid();

      case GID:
        return getGid();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OBJ_ID:
        return isSetObj_id();
      case UID:
        return isSetUid();
      case GID:
        return isSetGid();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Chown_args)
        return this.equals((Chown_args)that);
      return false;
    }

    public boolean equals(Chown_args that) {
      if (that == null)
        return false;

      boolean this_present_obj_id = true && this.isSetObj_id();
      boolean that_present_obj_id = true && that.isSetObj_id();
      if (this_present_obj_id || that_present_obj_id) {
        if (!(this_present_obj_id && that_present_obj_id))
          return false;
        if (!this.obj_id.equals(that.obj_id))
          return false;
      }

      boolean this_present_uid = true;
      boolean that_present_uid = true;
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (this.uid != that.uid)
          return false;
      }

      boolean this_present_gid = true;
      boolean that_present_gid = true;
      if (this_present_gid || that_present_gid) {
        if (!(this_present_gid && that_present_gid))
          return false;
        if (this.gid != that.gid)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_obj_id = true && (isSetObj_id());
      list.add(present_obj_id);
      if (present_obj_id)
        list.add(obj_id);

      boolean present_uid = true;
      list.add(present_uid);
      if (present_uid)
        list.add(uid);

      boolean present_gid = true;
      list.add(present_gid);
      if (present_gid)
        list.add(gid);

      return list.hashCode();
    }

    @Override
    public int compareTo(Chown_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetObj_id()).compareTo(other.isSetObj_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObj_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.obj_id, other.obj_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetGid()).compareTo(other.isSetGid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gid, other.gid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Chown_args(");
      boolean first = true;

      sb.append("obj_id:");
      if (this.obj_id == null) {
        sb.append("null");
      } else {
        sb.append(this.obj_id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("uid:");
      sb.append(this.uid);
      first = false;
      if (!first) sb.append(", ");
      sb.append("gid:");
      sb.append(this.gid);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (obj_id != null) {
        obj_id.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Chown_argsStandardSchemeFactory implements SchemeFactory {
      public Chown_argsStandardScheme getScheme() {
        return new Chown_argsStandardScheme();
      }
    }

    private static class Chown_argsStandardScheme extends StandardScheme<Chown_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Chown_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OBJ_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.obj_id = new OID();
                struct.obj_id.read(iprot);
                struct.setObj_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.uid = iprot.readI16();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // GID
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.gid = iprot.readI16();
                struct.setGidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Chown_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.obj_id != null) {
          oprot.writeFieldBegin(OBJ_ID_FIELD_DESC);
          struct.obj_id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(UID_FIELD_DESC);
        oprot.writeI16(struct.uid);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(GID_FIELD_DESC);
        oprot.writeI16(struct.gid);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Chown_argsTupleSchemeFactory implements SchemeFactory {
      public Chown_argsTupleScheme getScheme() {
        return new Chown_argsTupleScheme();
      }
    }

    private static class Chown_argsTupleScheme extends TupleScheme<Chown_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Chown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetObj_id()) {
          optionals.set(0);
        }
        if (struct.isSetUid()) {
          optionals.set(1);
        }
        if (struct.isSetGid()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetObj_id()) {
          struct.obj_id.write(oprot);
        }
        if (struct.isSetUid()) {
          oprot.writeI16(struct.uid);
        }
        if (struct.isSetGid()) {
          oprot.writeI16(struct.gid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Chown_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.obj_id = new OID();
          struct.obj_id.read(iprot);
          struct.setObj_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.uid = iprot.readI16();
          struct.setUidIsSet(true);
        }
        if (incoming.get(2)) {
          struct.gid = iprot.readI16();
          struct.setGidIsSet(true);
        }
      }
    }

  }

  public static class Chown_result implements org.apache.thrift.TBase<Chown_result, Chown_result._Fields>, java.io.Serializable, Cloneable, Comparable<Chown_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Chown_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_dir", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SRV_REDIRECT_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_redirect", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField NOT_FOUND_FIELD_DESC = new org.apache.thrift.protocol.TField("not_found", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Chown_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Chown_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public UnrecognizedDirectoryError unknown_dir; // required
    public ServerRedirectionException srv_redirect; // required
    public FileNotFoundException not_found; // required
    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNKNOWN_DIR((short)1, "unknown_dir"),
      SRV_REDIRECT((short)2, "srv_redirect"),
      NOT_FOUND((short)3, "not_found"),
      IO_ERROR((short)4, "io_error"),
      SRV_ERROR((short)5, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN_DIR
            return UNKNOWN_DIR;
          case 2: // SRV_REDIRECT
            return SRV_REDIRECT;
          case 3: // NOT_FOUND
            return NOT_FOUND;
          case 4: // IO_ERROR
            return IO_ERROR;
          case 5: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.UNKNOWN_DIR, new org.apache.thrift.meta_data.FieldMetaData("unknown_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_REDIRECT, new org.apache.thrift.meta_data.FieldMetaData("srv_redirect", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.NOT_FOUND, new org.apache.thrift.meta_data.FieldMetaData("not_found", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Chown_result.class, metaDataMap);
    }

    public Chown_result() {
    }

    public Chown_result(
      boolean success,
      UnrecognizedDirectoryError unknown_dir,
      ServerRedirectionException srv_redirect,
      FileNotFoundException not_found,
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.unknown_dir = unknown_dir;
      this.srv_redirect = srv_redirect;
      this.not_found = not_found;
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Chown_result(Chown_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetUnknown_dir()) {
        this.unknown_dir = new UnrecognizedDirectoryError(other.unknown_dir);
      }
      if (other.isSetSrv_redirect()) {
        this.srv_redirect = new ServerRedirectionException(other.srv_redirect);
      }
      if (other.isSetNot_found()) {
        this.not_found = new FileNotFoundException(other.not_found);
      }
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public Chown_result deepCopy() {
      return new Chown_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.unknown_dir = null;
      this.srv_redirect = null;
      this.not_found = null;
      this.io_error = null;
      this.srv_error = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public Chown_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public UnrecognizedDirectoryError getUnknown_dir() {
      return this.unknown_dir;
    }

    public Chown_result setUnknown_dir(UnrecognizedDirectoryError unknown_dir) {
      this.unknown_dir = unknown_dir;
      return this;
    }

    public void unsetUnknown_dir() {
      this.unknown_dir = null;
    }

    /** Returns true if field unknown_dir is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_dir() {
      return this.unknown_dir != null;
    }

    public void setUnknown_dirIsSet(boolean value) {
      if (!value) {
        this.unknown_dir = null;
      }
    }

    public ServerRedirectionException getSrv_redirect() {
      return this.srv_redirect;
    }

    public Chown_result setSrv_redirect(ServerRedirectionException srv_redirect) {
      this.srv_redirect = srv_redirect;
      return this;
    }

    public void unsetSrv_redirect() {
      this.srv_redirect = null;
    }

    /** Returns true if field srv_redirect is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_redirect() {
      return this.srv_redirect != null;
    }

    public void setSrv_redirectIsSet(boolean value) {
      if (!value) {
        this.srv_redirect = null;
      }
    }

    public FileNotFoundException getNot_found() {
      return this.not_found;
    }

    public Chown_result setNot_found(FileNotFoundException not_found) {
      this.not_found = not_found;
      return this;
    }

    public void unsetNot_found() {
      this.not_found = null;
    }

    /** Returns true if field not_found is set (has been assigned a value) and false otherwise */
    public boolean isSetNot_found() {
      return this.not_found != null;
    }

    public void setNot_foundIsSet(boolean value) {
      if (!value) {
        this.not_found = null;
      }
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public Chown_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public Chown_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case UNKNOWN_DIR:
        if (value == null) {
          unsetUnknown_dir();
        } else {
          setUnknown_dir((UnrecognizedDirectoryError)value);
        }
        break;

      case SRV_REDIRECT:
        if (value == null) {
          unsetSrv_redirect();
        } else {
          setSrv_redirect((ServerRedirectionException)value);
        }
        break;

      case NOT_FOUND:
        if (value == null) {
          unsetNot_found();
        } else {
          setNot_found((FileNotFoundException)value);
        }
        break;

      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case UNKNOWN_DIR:
        return getUnknown_dir();

      case SRV_REDIRECT:
        return getSrv_redirect();

      case NOT_FOUND:
        return getNot_found();

      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN_DIR:
        return isSetUnknown_dir();
      case SRV_REDIRECT:
        return isSetSrv_redirect();
      case NOT_FOUND:
        return isSetNot_found();
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Chown_result)
        return this.equals((Chown_result)that);
      return false;
    }

    public boolean equals(Chown_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_unknown_dir = true && this.isSetUnknown_dir();
      boolean that_present_unknown_dir = true && that.isSetUnknown_dir();
      if (this_present_unknown_dir || that_present_unknown_dir) {
        if (!(this_present_unknown_dir && that_present_unknown_dir))
          return false;
        if (!this.unknown_dir.equals(that.unknown_dir))
          return false;
      }

      boolean this_present_srv_redirect = true && this.isSetSrv_redirect();
      boolean that_present_srv_redirect = true && that.isSetSrv_redirect();
      if (this_present_srv_redirect || that_present_srv_redirect) {
        if (!(this_present_srv_redirect && that_present_srv_redirect))
          return false;
        if (!this.srv_redirect.equals(that.srv_redirect))
          return false;
      }

      boolean this_present_not_found = true && this.isSetNot_found();
      boolean that_present_not_found = true && that.isSetNot_found();
      if (this_present_not_found || that_present_not_found) {
        if (!(this_present_not_found && that_present_not_found))
          return false;
        if (!this.not_found.equals(that.not_found))
          return false;
      }

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true;
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_unknown_dir = true && (isSetUnknown_dir());
      list.add(present_unknown_dir);
      if (present_unknown_dir)
        list.add(unknown_dir);

      boolean present_srv_redirect = true && (isSetSrv_redirect());
      list.add(present_srv_redirect);
      if (present_srv_redirect)
        list.add(srv_redirect);

      boolean present_not_found = true && (isSetNot_found());
      list.add(present_not_found);
      if (present_not_found)
        list.add(not_found);

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(Chown_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnknown_dir()).compareTo(other.isSetUnknown_dir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_dir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_dir, other.unknown_dir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_redirect()).compareTo(other.isSetSrv_redirect());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_redirect()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_redirect, other.srv_redirect);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNot_found()).compareTo(other.isSetNot_found());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNot_found()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.not_found, other.not_found);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Chown_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknown_dir:");
      if (this.unknown_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_dir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_redirect:");
      if (this.srv_redirect == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_redirect);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("not_found:");
      if (this.not_found == null) {
        sb.append("null");
      } else {
        sb.append(this.not_found);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Chown_resultStandardSchemeFactory implements SchemeFactory {
      public Chown_resultStandardScheme getScheme() {
        return new Chown_resultStandardScheme();
      }
    }

    private static class Chown_resultStandardScheme extends StandardScheme<Chown_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Chown_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_dir = new UnrecognizedDirectoryError();
                struct.unknown_dir.read(iprot);
                struct.setUnknown_dirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SRV_REDIRECT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_redirect = new ServerRedirectionException();
                struct.srv_redirect.read(iprot);
                struct.setSrv_redirectIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NOT_FOUND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.not_found = new FileNotFoundException();
                struct.not_found.read(iprot);
                struct.setNot_foundIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Chown_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.unknown_dir != null) {
          oprot.writeFieldBegin(UNKNOWN_DIR_FIELD_DESC);
          struct.unknown_dir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_redirect != null) {
          oprot.writeFieldBegin(SRV_REDIRECT_FIELD_DESC);
          struct.srv_redirect.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.not_found != null) {
          oprot.writeFieldBegin(NOT_FOUND_FIELD_DESC);
          struct.not_found.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Chown_resultTupleSchemeFactory implements SchemeFactory {
      public Chown_resultTupleScheme getScheme() {
        return new Chown_resultTupleScheme();
      }
    }

    private static class Chown_resultTupleScheme extends TupleScheme<Chown_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Chown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknown_dir()) {
          optionals.set(1);
        }
        if (struct.isSetSrv_redirect()) {
          optionals.set(2);
        }
        if (struct.isSetNot_found()) {
          optionals.set(3);
        }
        if (struct.isSetIo_error()) {
          optionals.set(4);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetUnknown_dir()) {
          struct.unknown_dir.write(oprot);
        }
        if (struct.isSetSrv_redirect()) {
          struct.srv_redirect.write(oprot);
        }
        if (struct.isSetNot_found()) {
          struct.not_found.write(oprot);
        }
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Chown_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknown_dir = new UnrecognizedDirectoryError();
          struct.unknown_dir.read(iprot);
          struct.setUnknown_dirIsSet(true);
        }
        if (incoming.get(2)) {
          struct.srv_redirect = new ServerRedirectionException();
          struct.srv_redirect.read(iprot);
          struct.setSrv_redirectIsSet(true);
        }
        if (incoming.get(3)) {
          struct.not_found = new FileNotFoundException();
          struct.not_found.read(iprot);
          struct.setNot_foundIsSet(true);
        }
        if (incoming.get(4)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(5)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class CreateZeroth_args implements org.apache.thrift.TBase<CreateZeroth_args, CreateZeroth_args._Fields>, java.io.Serializable, Cloneable, Comparable<CreateZeroth_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateZeroth_args");

    private static final org.apache.thrift.protocol.TField DIR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dir_id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField ZEROTH_SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("zeroth_server", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateZeroth_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateZeroth_argsTupleSchemeFactory());
    }

    public long dir_id; // required
    public short zeroth_server; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DIR_ID((short)1, "dir_id"),
      ZEROTH_SERVER((short)2, "zeroth_server");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DIR_ID
            return DIR_ID;
          case 2: // ZEROTH_SERVER
            return ZEROTH_SERVER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DIR_ID_ISSET_ID = 0;
    private static final int __ZEROTH_SERVER_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DIR_ID, new org.apache.thrift.meta_data.FieldMetaData("dir_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.ZEROTH_SERVER, new org.apache.thrift.meta_data.FieldMetaData("zeroth_server", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateZeroth_args.class, metaDataMap);
    }

    public CreateZeroth_args() {
    }

    public CreateZeroth_args(
      long dir_id,
      short zeroth_server)
    {
      this();
      this.dir_id = dir_id;
      setDir_idIsSet(true);
      this.zeroth_server = zeroth_server;
      setZeroth_serverIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateZeroth_args(CreateZeroth_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dir_id = other.dir_id;
      this.zeroth_server = other.zeroth_server;
    }

    public CreateZeroth_args deepCopy() {
      return new CreateZeroth_args(this);
    }

    @Override
    public void clear() {
      setDir_idIsSet(false);
      this.dir_id = 0;
      setZeroth_serverIsSet(false);
      this.zeroth_server = 0;
    }

    public long getDir_id() {
      return this.dir_id;
    }

    public CreateZeroth_args setDir_id(long dir_id) {
      this.dir_id = dir_id;
      setDir_idIsSet(true);
      return this;
    }

    public void unsetDir_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIR_ID_ISSET_ID);
    }

    /** Returns true if field dir_id is set (has been assigned a value) and false otherwise */
    public boolean isSetDir_id() {
      return EncodingUtils.testBit(__isset_bitfield, __DIR_ID_ISSET_ID);
    }

    public void setDir_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIR_ID_ISSET_ID, value);
    }

    public short getZeroth_server() {
      return this.zeroth_server;
    }

    public CreateZeroth_args setZeroth_server(short zeroth_server) {
      this.zeroth_server = zeroth_server;
      setZeroth_serverIsSet(true);
      return this;
    }

    public void unsetZeroth_server() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ZEROTH_SERVER_ISSET_ID);
    }

    /** Returns true if field zeroth_server is set (has been assigned a value) and false otherwise */
    public boolean isSetZeroth_server() {
      return EncodingUtils.testBit(__isset_bitfield, __ZEROTH_SERVER_ISSET_ID);
    }

    public void setZeroth_serverIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ZEROTH_SERVER_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DIR_ID:
        if (value == null) {
          unsetDir_id();
        } else {
          setDir_id((Long)value);
        }
        break;

      case ZEROTH_SERVER:
        if (value == null) {
          unsetZeroth_server();
        } else {
          setZeroth_server((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DIR_ID:
        return getDir_id();

      case ZEROTH_SERVER:
        return getZeroth_server();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DIR_ID:
        return isSetDir_id();
      case ZEROTH_SERVER:
        return isSetZeroth_server();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateZeroth_args)
        return this.equals((CreateZeroth_args)that);
      return false;
    }

    public boolean equals(CreateZeroth_args that) {
      if (that == null)
        return false;

      boolean this_present_dir_id = true;
      boolean that_present_dir_id = true;
      if (this_present_dir_id || that_present_dir_id) {
        if (!(this_present_dir_id && that_present_dir_id))
          return false;
        if (this.dir_id != that.dir_id)
          return false;
      }

      boolean this_present_zeroth_server = true;
      boolean that_present_zeroth_server = true;
      if (this_present_zeroth_server || that_present_zeroth_server) {
        if (!(this_present_zeroth_server && that_present_zeroth_server))
          return false;
        if (this.zeroth_server != that.zeroth_server)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dir_id = true;
      list.add(present_dir_id);
      if (present_dir_id)
        list.add(dir_id);

      boolean present_zeroth_server = true;
      list.add(present_zeroth_server);
      if (present_zeroth_server)
        list.add(zeroth_server);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateZeroth_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDir_id()).compareTo(other.isSetDir_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDir_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dir_id, other.dir_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetZeroth_server()).compareTo(other.isSetZeroth_server());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetZeroth_server()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zeroth_server, other.zeroth_server);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateZeroth_args(");
      boolean first = true;

      sb.append("dir_id:");
      sb.append(this.dir_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("zeroth_server:");
      sb.append(this.zeroth_server);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateZeroth_argsStandardSchemeFactory implements SchemeFactory {
      public CreateZeroth_argsStandardScheme getScheme() {
        return new CreateZeroth_argsStandardScheme();
      }
    }

    private static class CreateZeroth_argsStandardScheme extends StandardScheme<CreateZeroth_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateZeroth_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DIR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dir_id = iprot.readI64();
                struct.setDir_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ZEROTH_SERVER
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.zeroth_server = iprot.readI16();
                struct.setZeroth_serverIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateZeroth_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DIR_ID_FIELD_DESC);
        oprot.writeI64(struct.dir_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(ZEROTH_SERVER_FIELD_DESC);
        oprot.writeI16(struct.zeroth_server);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateZeroth_argsTupleSchemeFactory implements SchemeFactory {
      public CreateZeroth_argsTupleScheme getScheme() {
        return new CreateZeroth_argsTupleScheme();
      }
    }

    private static class CreateZeroth_argsTupleScheme extends TupleScheme<CreateZeroth_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateZeroth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDir_id()) {
          optionals.set(0);
        }
        if (struct.isSetZeroth_server()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDir_id()) {
          oprot.writeI64(struct.dir_id);
        }
        if (struct.isSetZeroth_server()) {
          oprot.writeI16(struct.zeroth_server);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateZeroth_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dir_id = iprot.readI64();
          struct.setDir_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.zeroth_server = iprot.readI16();
          struct.setZeroth_serverIsSet(true);
        }
      }
    }

  }

  public static class CreateZeroth_result implements org.apache.thrift.TBase<CreateZeroth_result, CreateZeroth_result._Fields>, java.io.Serializable, Cloneable, Comparable<CreateZeroth_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CreateZeroth_result");

    private static final org.apache.thrift.protocol.TField WRONG_SRV_FIELD_DESC = new org.apache.thrift.protocol.TField("wrong_srv", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("file_exists", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new CreateZeroth_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new CreateZeroth_resultTupleSchemeFactory());
    }

    public WrongServerError wrong_srv; // required
    public FileAlreadyExistsException file_exists; // required
    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WRONG_SRV((short)1, "wrong_srv"),
      FILE_EXISTS((short)2, "file_exists"),
      IO_ERROR((short)3, "io_error"),
      SRV_ERROR((short)4, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WRONG_SRV
            return WRONG_SRV;
          case 2: // FILE_EXISTS
            return FILE_EXISTS;
          case 3: // IO_ERROR
            return IO_ERROR;
          case 4: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WRONG_SRV, new org.apache.thrift.meta_data.FieldMetaData("wrong_srv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FILE_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("file_exists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CreateZeroth_result.class, metaDataMap);
    }

    public CreateZeroth_result() {
    }

    public CreateZeroth_result(
      WrongServerError wrong_srv,
      FileAlreadyExistsException file_exists,
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.wrong_srv = wrong_srv;
      this.file_exists = file_exists;
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public CreateZeroth_result(CreateZeroth_result other) {
      if (other.isSetWrong_srv()) {
        this.wrong_srv = new WrongServerError(other.wrong_srv);
      }
      if (other.isSetFile_exists()) {
        this.file_exists = new FileAlreadyExistsException(other.file_exists);
      }
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public CreateZeroth_result deepCopy() {
      return new CreateZeroth_result(this);
    }

    @Override
    public void clear() {
      this.wrong_srv = null;
      this.file_exists = null;
      this.io_error = null;
      this.srv_error = null;
    }

    public WrongServerError getWrong_srv() {
      return this.wrong_srv;
    }

    public CreateZeroth_result setWrong_srv(WrongServerError wrong_srv) {
      this.wrong_srv = wrong_srv;
      return this;
    }

    public void unsetWrong_srv() {
      this.wrong_srv = null;
    }

    /** Returns true if field wrong_srv is set (has been assigned a value) and false otherwise */
    public boolean isSetWrong_srv() {
      return this.wrong_srv != null;
    }

    public void setWrong_srvIsSet(boolean value) {
      if (!value) {
        this.wrong_srv = null;
      }
    }

    public FileAlreadyExistsException getFile_exists() {
      return this.file_exists;
    }

    public CreateZeroth_result setFile_exists(FileAlreadyExistsException file_exists) {
      this.file_exists = file_exists;
      return this;
    }

    public void unsetFile_exists() {
      this.file_exists = null;
    }

    /** Returns true if field file_exists is set (has been assigned a value) and false otherwise */
    public boolean isSetFile_exists() {
      return this.file_exists != null;
    }

    public void setFile_existsIsSet(boolean value) {
      if (!value) {
        this.file_exists = null;
      }
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public CreateZeroth_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public CreateZeroth_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WRONG_SRV:
        if (value == null) {
          unsetWrong_srv();
        } else {
          setWrong_srv((WrongServerError)value);
        }
        break;

      case FILE_EXISTS:
        if (value == null) {
          unsetFile_exists();
        } else {
          setFile_exists((FileAlreadyExistsException)value);
        }
        break;

      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WRONG_SRV:
        return getWrong_srv();

      case FILE_EXISTS:
        return getFile_exists();

      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WRONG_SRV:
        return isSetWrong_srv();
      case FILE_EXISTS:
        return isSetFile_exists();
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof CreateZeroth_result)
        return this.equals((CreateZeroth_result)that);
      return false;
    }

    public boolean equals(CreateZeroth_result that) {
      if (that == null)
        return false;

      boolean this_present_wrong_srv = true && this.isSetWrong_srv();
      boolean that_present_wrong_srv = true && that.isSetWrong_srv();
      if (this_present_wrong_srv || that_present_wrong_srv) {
        if (!(this_present_wrong_srv && that_present_wrong_srv))
          return false;
        if (!this.wrong_srv.equals(that.wrong_srv))
          return false;
      }

      boolean this_present_file_exists = true && this.isSetFile_exists();
      boolean that_present_file_exists = true && that.isSetFile_exists();
      if (this_present_file_exists || that_present_file_exists) {
        if (!(this_present_file_exists && that_present_file_exists))
          return false;
        if (!this.file_exists.equals(that.file_exists))
          return false;
      }

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_wrong_srv = true && (isSetWrong_srv());
      list.add(present_wrong_srv);
      if (present_wrong_srv)
        list.add(wrong_srv);

      boolean present_file_exists = true && (isSetFile_exists());
      list.add(present_file_exists);
      if (present_file_exists)
        list.add(file_exists);

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(CreateZeroth_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWrong_srv()).compareTo(other.isSetWrong_srv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWrong_srv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wrong_srv, other.wrong_srv);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFile_exists()).compareTo(other.isSetFile_exists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile_exists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_exists, other.file_exists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("CreateZeroth_result(");
      boolean first = true;

      sb.append("wrong_srv:");
      if (this.wrong_srv == null) {
        sb.append("null");
      } else {
        sb.append(this.wrong_srv);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("file_exists:");
      if (this.file_exists == null) {
        sb.append("null");
      } else {
        sb.append(this.file_exists);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class CreateZeroth_resultStandardSchemeFactory implements SchemeFactory {
      public CreateZeroth_resultStandardScheme getScheme() {
        return new CreateZeroth_resultStandardScheme();
      }
    }

    private static class CreateZeroth_resultStandardScheme extends StandardScheme<CreateZeroth_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, CreateZeroth_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WRONG_SRV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.wrong_srv = new WrongServerError();
                struct.wrong_srv.read(iprot);
                struct.setWrong_srvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_EXISTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.file_exists = new FileAlreadyExistsException();
                struct.file_exists.read(iprot);
                struct.setFile_existsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, CreateZeroth_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.wrong_srv != null) {
          oprot.writeFieldBegin(WRONG_SRV_FIELD_DESC);
          struct.wrong_srv.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.file_exists != null) {
          oprot.writeFieldBegin(FILE_EXISTS_FIELD_DESC);
          struct.file_exists.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class CreateZeroth_resultTupleSchemeFactory implements SchemeFactory {
      public CreateZeroth_resultTupleScheme getScheme() {
        return new CreateZeroth_resultTupleScheme();
      }
    }

    private static class CreateZeroth_resultTupleScheme extends TupleScheme<CreateZeroth_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, CreateZeroth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWrong_srv()) {
          optionals.set(0);
        }
        if (struct.isSetFile_exists()) {
          optionals.set(1);
        }
        if (struct.isSetIo_error()) {
          optionals.set(2);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetWrong_srv()) {
          struct.wrong_srv.write(oprot);
        }
        if (struct.isSetFile_exists()) {
          struct.file_exists.write(oprot);
        }
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, CreateZeroth_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.wrong_srv = new WrongServerError();
          struct.wrong_srv.read(iprot);
          struct.setWrong_srvIsSet(true);
        }
        if (incoming.get(1)) {
          struct.file_exists = new FileAlreadyExistsException();
          struct.file_exists.read(iprot);
          struct.setFile_existsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(3)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class Readdir_args implements org.apache.thrift.TBase<Readdir_args, Readdir_args._Fields>, java.io.Serializable, Cloneable, Comparable<Readdir_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Readdir_args");

    private static final org.apache.thrift.protocol.TField DIR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dir_id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.I16, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Readdir_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Readdir_argsTupleSchemeFactory());
    }

    public long dir_id; // required
    public short index; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DIR_ID((short)1, "dir_id"),
      INDEX((short)2, "index");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DIR_ID
            return DIR_ID;
          case 2: // INDEX
            return INDEX;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DIR_ID_ISSET_ID = 0;
    private static final int __INDEX_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DIR_ID, new org.apache.thrift.meta_data.FieldMetaData("dir_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Readdir_args.class, metaDataMap);
    }

    public Readdir_args() {
    }

    public Readdir_args(
      long dir_id,
      short index)
    {
      this();
      this.dir_id = dir_id;
      setDir_idIsSet(true);
      this.index = index;
      setIndexIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Readdir_args(Readdir_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dir_id = other.dir_id;
      this.index = other.index;
    }

    public Readdir_args deepCopy() {
      return new Readdir_args(this);
    }

    @Override
    public void clear() {
      setDir_idIsSet(false);
      this.dir_id = 0;
      setIndexIsSet(false);
      this.index = 0;
    }

    public long getDir_id() {
      return this.dir_id;
    }

    public Readdir_args setDir_id(long dir_id) {
      this.dir_id = dir_id;
      setDir_idIsSet(true);
      return this;
    }

    public void unsetDir_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIR_ID_ISSET_ID);
    }

    /** Returns true if field dir_id is set (has been assigned a value) and false otherwise */
    public boolean isSetDir_id() {
      return EncodingUtils.testBit(__isset_bitfield, __DIR_ID_ISSET_ID);
    }

    public void setDir_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIR_ID_ISSET_ID, value);
    }

    public short getIndex() {
      return this.index;
    }

    public Readdir_args setIndex(short index) {
      this.index = index;
      setIndexIsSet(true);
      return this;
    }

    public void unsetIndex() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    /** Returns true if field index is set (has been assigned a value) and false otherwise */
    public boolean isSetIndex() {
      return EncodingUtils.testBit(__isset_bitfield, __INDEX_ISSET_ID);
    }

    public void setIndexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INDEX_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DIR_ID:
        if (value == null) {
          unsetDir_id();
        } else {
          setDir_id((Long)value);
        }
        break;

      case INDEX:
        if (value == null) {
          unsetIndex();
        } else {
          setIndex((Short)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DIR_ID:
        return getDir_id();

      case INDEX:
        return getIndex();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DIR_ID:
        return isSetDir_id();
      case INDEX:
        return isSetIndex();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Readdir_args)
        return this.equals((Readdir_args)that);
      return false;
    }

    public boolean equals(Readdir_args that) {
      if (that == null)
        return false;

      boolean this_present_dir_id = true;
      boolean that_present_dir_id = true;
      if (this_present_dir_id || that_present_dir_id) {
        if (!(this_present_dir_id && that_present_dir_id))
          return false;
        if (this.dir_id != that.dir_id)
          return false;
      }

      boolean this_present_index = true;
      boolean that_present_index = true;
      if (this_present_index || that_present_index) {
        if (!(this_present_index && that_present_index))
          return false;
        if (this.index != that.index)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dir_id = true;
      list.add(present_dir_id);
      if (present_dir_id)
        list.add(dir_id);

      boolean present_index = true;
      list.add(present_index);
      if (present_index)
        list.add(index);

      return list.hashCode();
    }

    @Override
    public int compareTo(Readdir_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDir_id()).compareTo(other.isSetDir_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDir_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dir_id, other.dir_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIndex()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Readdir_args(");
      boolean first = true;

      sb.append("dir_id:");
      sb.append(this.dir_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("index:");
      sb.append(this.index);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Readdir_argsStandardSchemeFactory implements SchemeFactory {
      public Readdir_argsStandardScheme getScheme() {
        return new Readdir_argsStandardScheme();
      }
    }

    private static class Readdir_argsStandardScheme extends StandardScheme<Readdir_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Readdir_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DIR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dir_id = iprot.readI64();
                struct.setDir_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.index = iprot.readI16();
                struct.setIndexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Readdir_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DIR_ID_FIELD_DESC);
        oprot.writeI64(struct.dir_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeI16(struct.index);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Readdir_argsTupleSchemeFactory implements SchemeFactory {
      public Readdir_argsTupleScheme getScheme() {
        return new Readdir_argsTupleScheme();
      }
    }

    private static class Readdir_argsTupleScheme extends TupleScheme<Readdir_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Readdir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDir_id()) {
          optionals.set(0);
        }
        if (struct.isSetIndex()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDir_id()) {
          oprot.writeI64(struct.dir_id);
        }
        if (struct.isSetIndex()) {
          oprot.writeI16(struct.index);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Readdir_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dir_id = iprot.readI64();
          struct.setDir_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.index = iprot.readI16();
          struct.setIndexIsSet(true);
        }
      }
    }

  }

  public static class Readdir_result implements org.apache.thrift.TBase<Readdir_result, Readdir_result._Fields>, java.io.Serializable, Cloneable, Comparable<Readdir_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Readdir_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_dir", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Readdir_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Readdir_resultTupleSchemeFactory());
    }

    public EntryList success; // required
    public UnrecognizedDirectoryError unknown_dir; // required
    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNKNOWN_DIR((short)1, "unknown_dir"),
      IO_ERROR((short)2, "io_error"),
      SRV_ERROR((short)3, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN_DIR
            return UNKNOWN_DIR;
          case 2: // IO_ERROR
            return IO_ERROR;
          case 3: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, EntryList.class)));
      tmpMap.put(_Fields.UNKNOWN_DIR, new org.apache.thrift.meta_data.FieldMetaData("unknown_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Readdir_result.class, metaDataMap);
    }

    public Readdir_result() {
    }

    public Readdir_result(
      EntryList success,
      UnrecognizedDirectoryError unknown_dir,
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.success = success;
      this.unknown_dir = unknown_dir;
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Readdir_result(Readdir_result other) {
      if (other.isSetSuccess()) {
        this.success = new EntryList(other.success);
      }
      if (other.isSetUnknown_dir()) {
        this.unknown_dir = new UnrecognizedDirectoryError(other.unknown_dir);
      }
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public Readdir_result deepCopy() {
      return new Readdir_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unknown_dir = null;
      this.io_error = null;
      this.srv_error = null;
    }

    public EntryList getSuccess() {
      return this.success;
    }

    public Readdir_result setSuccess(EntryList success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UnrecognizedDirectoryError getUnknown_dir() {
      return this.unknown_dir;
    }

    public Readdir_result setUnknown_dir(UnrecognizedDirectoryError unknown_dir) {
      this.unknown_dir = unknown_dir;
      return this;
    }

    public void unsetUnknown_dir() {
      this.unknown_dir = null;
    }

    /** Returns true if field unknown_dir is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_dir() {
      return this.unknown_dir != null;
    }

    public void setUnknown_dirIsSet(boolean value) {
      if (!value) {
        this.unknown_dir = null;
      }
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public Readdir_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public Readdir_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((EntryList)value);
        }
        break;

      case UNKNOWN_DIR:
        if (value == null) {
          unsetUnknown_dir();
        } else {
          setUnknown_dir((UnrecognizedDirectoryError)value);
        }
        break;

      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNKNOWN_DIR:
        return getUnknown_dir();

      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN_DIR:
        return isSetUnknown_dir();
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Readdir_result)
        return this.equals((Readdir_result)that);
      return false;
    }

    public boolean equals(Readdir_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unknown_dir = true && this.isSetUnknown_dir();
      boolean that_present_unknown_dir = true && that.isSetUnknown_dir();
      if (this_present_unknown_dir || that_present_unknown_dir) {
        if (!(this_present_unknown_dir && that_present_unknown_dir))
          return false;
        if (!this.unknown_dir.equals(that.unknown_dir))
          return false;
      }

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_unknown_dir = true && (isSetUnknown_dir());
      list.add(present_unknown_dir);
      if (present_unknown_dir)
        list.add(unknown_dir);

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(Readdir_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnknown_dir()).compareTo(other.isSetUnknown_dir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_dir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_dir, other.unknown_dir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Readdir_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknown_dir:");
      if (this.unknown_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_dir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Readdir_resultStandardSchemeFactory implements SchemeFactory {
      public Readdir_resultStandardScheme getScheme() {
        return new Readdir_resultStandardScheme();
      }
    }

    private static class Readdir_resultStandardScheme extends StandardScheme<Readdir_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Readdir_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new EntryList();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_dir = new UnrecognizedDirectoryError();
                struct.unknown_dir.read(iprot);
                struct.setUnknown_dirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Readdir_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.unknown_dir != null) {
          oprot.writeFieldBegin(UNKNOWN_DIR_FIELD_DESC);
          struct.unknown_dir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Readdir_resultTupleSchemeFactory implements SchemeFactory {
      public Readdir_resultTupleScheme getScheme() {
        return new Readdir_resultTupleScheme();
      }
    }

    private static class Readdir_resultTupleScheme extends TupleScheme<Readdir_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Readdir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknown_dir()) {
          optionals.set(1);
        }
        if (struct.isSetIo_error()) {
          optionals.set(2);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetUnknown_dir()) {
          struct.unknown_dir.write(oprot);
        }
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Readdir_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = new EntryList();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknown_dir = new UnrecognizedDirectoryError();
          struct.unknown_dir.read(iprot);
          struct.setUnknown_dirIsSet(true);
        }
        if (incoming.get(2)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(3)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class ReadBitmap_args implements org.apache.thrift.TBase<ReadBitmap_args, ReadBitmap_args._Fields>, java.io.Serializable, Cloneable, Comparable<ReadBitmap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadBitmap_args");

    private static final org.apache.thrift.protocol.TField DIR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dir_id", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadBitmap_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadBitmap_argsTupleSchemeFactory());
    }

    public long dir_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DIR_ID((short)1, "dir_id");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DIR_ID
            return DIR_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DIR_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DIR_ID, new org.apache.thrift.meta_data.FieldMetaData("dir_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadBitmap_args.class, metaDataMap);
    }

    public ReadBitmap_args() {
    }

    public ReadBitmap_args(
      long dir_id)
    {
      this();
      this.dir_id = dir_id;
      setDir_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadBitmap_args(ReadBitmap_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dir_id = other.dir_id;
    }

    public ReadBitmap_args deepCopy() {
      return new ReadBitmap_args(this);
    }

    @Override
    public void clear() {
      setDir_idIsSet(false);
      this.dir_id = 0;
    }

    public long getDir_id() {
      return this.dir_id;
    }

    public ReadBitmap_args setDir_id(long dir_id) {
      this.dir_id = dir_id;
      setDir_idIsSet(true);
      return this;
    }

    public void unsetDir_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIR_ID_ISSET_ID);
    }

    /** Returns true if field dir_id is set (has been assigned a value) and false otherwise */
    public boolean isSetDir_id() {
      return EncodingUtils.testBit(__isset_bitfield, __DIR_ID_ISSET_ID);
    }

    public void setDir_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIR_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DIR_ID:
        if (value == null) {
          unsetDir_id();
        } else {
          setDir_id((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DIR_ID:
        return getDir_id();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DIR_ID:
        return isSetDir_id();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadBitmap_args)
        return this.equals((ReadBitmap_args)that);
      return false;
    }

    public boolean equals(ReadBitmap_args that) {
      if (that == null)
        return false;

      boolean this_present_dir_id = true;
      boolean that_present_dir_id = true;
      if (this_present_dir_id || that_present_dir_id) {
        if (!(this_present_dir_id && that_present_dir_id))
          return false;
        if (this.dir_id != that.dir_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dir_id = true;
      list.add(present_dir_id);
      if (present_dir_id)
        list.add(dir_id);

      return list.hashCode();
    }

    @Override
    public int compareTo(ReadBitmap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDir_id()).compareTo(other.isSetDir_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDir_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dir_id, other.dir_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadBitmap_args(");
      boolean first = true;

      sb.append("dir_id:");
      sb.append(this.dir_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadBitmap_argsStandardSchemeFactory implements SchemeFactory {
      public ReadBitmap_argsStandardScheme getScheme() {
        return new ReadBitmap_argsStandardScheme();
      }
    }

    private static class ReadBitmap_argsStandardScheme extends StandardScheme<ReadBitmap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadBitmap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DIR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dir_id = iprot.readI64();
                struct.setDir_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadBitmap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DIR_ID_FIELD_DESC);
        oprot.writeI64(struct.dir_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadBitmap_argsTupleSchemeFactory implements SchemeFactory {
      public ReadBitmap_argsTupleScheme getScheme() {
        return new ReadBitmap_argsTupleScheme();
      }
    }

    private static class ReadBitmap_argsTupleScheme extends TupleScheme<ReadBitmap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadBitmap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDir_id()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDir_id()) {
          oprot.writeI64(struct.dir_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadBitmap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.dir_id = iprot.readI64();
          struct.setDir_idIsSet(true);
        }
      }
    }

  }

  public static class ReadBitmap_result implements org.apache.thrift.TBase<ReadBitmap_result, ReadBitmap_result._Fields>, java.io.Serializable, Cloneable, Comparable<ReadBitmap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ReadBitmap_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField UNKNOWN_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_dir", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ReadBitmap_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ReadBitmap_resultTupleSchemeFactory());
    }

    public String success; // required
    public UnrecognizedDirectoryError unknown_dir; // required
    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      UNKNOWN_DIR((short)1, "unknown_dir"),
      IO_ERROR((short)2, "io_error"),
      SRV_ERROR((short)3, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // UNKNOWN_DIR
            return UNKNOWN_DIR;
          case 2: // IO_ERROR
            return IO_ERROR;
          case 3: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.UNKNOWN_DIR, new org.apache.thrift.meta_data.FieldMetaData("unknown_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ReadBitmap_result.class, metaDataMap);
    }

    public ReadBitmap_result() {
    }

    public ReadBitmap_result(
      String success,
      UnrecognizedDirectoryError unknown_dir,
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.success = success;
      this.unknown_dir = unknown_dir;
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ReadBitmap_result(ReadBitmap_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetUnknown_dir()) {
        this.unknown_dir = new UnrecognizedDirectoryError(other.unknown_dir);
      }
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public ReadBitmap_result deepCopy() {
      return new ReadBitmap_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.unknown_dir = null;
      this.io_error = null;
      this.srv_error = null;
    }

    public String getSuccess() {
      return this.success;
    }

    public ReadBitmap_result setSuccess(String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public UnrecognizedDirectoryError getUnknown_dir() {
      return this.unknown_dir;
    }

    public ReadBitmap_result setUnknown_dir(UnrecognizedDirectoryError unknown_dir) {
      this.unknown_dir = unknown_dir;
      return this;
    }

    public void unsetUnknown_dir() {
      this.unknown_dir = null;
    }

    /** Returns true if field unknown_dir is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_dir() {
      return this.unknown_dir != null;
    }

    public void setUnknown_dirIsSet(boolean value) {
      if (!value) {
        this.unknown_dir = null;
      }
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public ReadBitmap_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public ReadBitmap_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((String)value);
        }
        break;

      case UNKNOWN_DIR:
        if (value == null) {
          unsetUnknown_dir();
        } else {
          setUnknown_dir((UnrecognizedDirectoryError)value);
        }
        break;

      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case UNKNOWN_DIR:
        return getUnknown_dir();

      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case UNKNOWN_DIR:
        return isSetUnknown_dir();
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ReadBitmap_result)
        return this.equals((ReadBitmap_result)that);
      return false;
    }

    public boolean equals(ReadBitmap_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_unknown_dir = true && this.isSetUnknown_dir();
      boolean that_present_unknown_dir = true && that.isSetUnknown_dir();
      if (this_present_unknown_dir || that_present_unknown_dir) {
        if (!(this_present_unknown_dir && that_present_unknown_dir))
          return false;
        if (!this.unknown_dir.equals(that.unknown_dir))
          return false;
      }

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_unknown_dir = true && (isSetUnknown_dir());
      list.add(present_unknown_dir);
      if (present_unknown_dir)
        list.add(unknown_dir);

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(ReadBitmap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetUnknown_dir()).compareTo(other.isSetUnknown_dir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_dir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_dir, other.unknown_dir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ReadBitmap_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("unknown_dir:");
      if (this.unknown_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_dir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ReadBitmap_resultStandardSchemeFactory implements SchemeFactory {
      public ReadBitmap_resultStandardScheme getScheme() {
        return new ReadBitmap_resultStandardScheme();
      }
    }

    private static class ReadBitmap_resultStandardScheme extends StandardScheme<ReadBitmap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ReadBitmap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // UNKNOWN_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_dir = new UnrecognizedDirectoryError();
                struct.unknown_dir.read(iprot);
                struct.setUnknown_dirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ReadBitmap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.unknown_dir != null) {
          oprot.writeFieldBegin(UNKNOWN_DIR_FIELD_DESC);
          struct.unknown_dir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ReadBitmap_resultTupleSchemeFactory implements SchemeFactory {
      public ReadBitmap_resultTupleScheme getScheme() {
        return new ReadBitmap_resultTupleScheme();
      }
    }

    private static class ReadBitmap_resultTupleScheme extends TupleScheme<ReadBitmap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ReadBitmap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetUnknown_dir()) {
          optionals.set(1);
        }
        if (struct.isSetIo_error()) {
          optionals.set(2);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetUnknown_dir()) {
          struct.unknown_dir.write(oprot);
        }
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ReadBitmap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.unknown_dir = new UnrecognizedDirectoryError();
          struct.unknown_dir.read(iprot);
          struct.setUnknown_dirIsSet(true);
        }
        if (incoming.get(2)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(3)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class UpdateBitmap_args implements org.apache.thrift.TBase<UpdateBitmap_args, UpdateBitmap_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateBitmap_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateBitmap_args");

    private static final org.apache.thrift.protocol.TField DIR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dir_id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField DMAP_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("dmap_data", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateBitmap_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateBitmap_argsTupleSchemeFactory());
    }

    public long dir_id; // required
    public String dmap_data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DIR_ID((short)1, "dir_id"),
      DMAP_DATA((short)2, "dmap_data");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DIR_ID
            return DIR_ID;
          case 2: // DMAP_DATA
            return DMAP_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DIR_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DIR_ID, new org.apache.thrift.meta_data.FieldMetaData("dir_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.DMAP_DATA, new org.apache.thrift.meta_data.FieldMetaData("dmap_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateBitmap_args.class, metaDataMap);
    }

    public UpdateBitmap_args() {
    }

    public UpdateBitmap_args(
      long dir_id,
      String dmap_data)
    {
      this();
      this.dir_id = dir_id;
      setDir_idIsSet(true);
      this.dmap_data = dmap_data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateBitmap_args(UpdateBitmap_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dir_id = other.dir_id;
      if (other.isSetDmap_data()) {
        this.dmap_data = other.dmap_data;
      }
    }

    public UpdateBitmap_args deepCopy() {
      return new UpdateBitmap_args(this);
    }

    @Override
    public void clear() {
      setDir_idIsSet(false);
      this.dir_id = 0;
      this.dmap_data = null;
    }

    public long getDir_id() {
      return this.dir_id;
    }

    public UpdateBitmap_args setDir_id(long dir_id) {
      this.dir_id = dir_id;
      setDir_idIsSet(true);
      return this;
    }

    public void unsetDir_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIR_ID_ISSET_ID);
    }

    /** Returns true if field dir_id is set (has been assigned a value) and false otherwise */
    public boolean isSetDir_id() {
      return EncodingUtils.testBit(__isset_bitfield, __DIR_ID_ISSET_ID);
    }

    public void setDir_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIR_ID_ISSET_ID, value);
    }

    public String getDmap_data() {
      return this.dmap_data;
    }

    public UpdateBitmap_args setDmap_data(String dmap_data) {
      this.dmap_data = dmap_data;
      return this;
    }

    public void unsetDmap_data() {
      this.dmap_data = null;
    }

    /** Returns true if field dmap_data is set (has been assigned a value) and false otherwise */
    public boolean isSetDmap_data() {
      return this.dmap_data != null;
    }

    public void setDmap_dataIsSet(boolean value) {
      if (!value) {
        this.dmap_data = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DIR_ID:
        if (value == null) {
          unsetDir_id();
        } else {
          setDir_id((Long)value);
        }
        break;

      case DMAP_DATA:
        if (value == null) {
          unsetDmap_data();
        } else {
          setDmap_data((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DIR_ID:
        return getDir_id();

      case DMAP_DATA:
        return getDmap_data();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DIR_ID:
        return isSetDir_id();
      case DMAP_DATA:
        return isSetDmap_data();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateBitmap_args)
        return this.equals((UpdateBitmap_args)that);
      return false;
    }

    public boolean equals(UpdateBitmap_args that) {
      if (that == null)
        return false;

      boolean this_present_dir_id = true;
      boolean that_present_dir_id = true;
      if (this_present_dir_id || that_present_dir_id) {
        if (!(this_present_dir_id && that_present_dir_id))
          return false;
        if (this.dir_id != that.dir_id)
          return false;
      }

      boolean this_present_dmap_data = true && this.isSetDmap_data();
      boolean that_present_dmap_data = true && that.isSetDmap_data();
      if (this_present_dmap_data || that_present_dmap_data) {
        if (!(this_present_dmap_data && that_present_dmap_data))
          return false;
        if (!this.dmap_data.equals(that.dmap_data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dir_id = true;
      list.add(present_dir_id);
      if (present_dir_id)
        list.add(dir_id);

      boolean present_dmap_data = true && (isSetDmap_data());
      list.add(present_dmap_data);
      if (present_dmap_data)
        list.add(dmap_data);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateBitmap_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDir_id()).compareTo(other.isSetDir_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDir_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dir_id, other.dir_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDmap_data()).compareTo(other.isSetDmap_data());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDmap_data()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dmap_data, other.dmap_data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateBitmap_args(");
      boolean first = true;

      sb.append("dir_id:");
      sb.append(this.dir_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("dmap_data:");
      if (this.dmap_data == null) {
        sb.append("null");
      } else {
        sb.append(this.dmap_data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateBitmap_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateBitmap_argsStandardScheme getScheme() {
        return new UpdateBitmap_argsStandardScheme();
      }
    }

    private static class UpdateBitmap_argsStandardScheme extends StandardScheme<UpdateBitmap_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateBitmap_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DIR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dir_id = iprot.readI64();
                struct.setDir_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DMAP_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dmap_data = iprot.readString();
                struct.setDmap_dataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateBitmap_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DIR_ID_FIELD_DESC);
        oprot.writeI64(struct.dir_id);
        oprot.writeFieldEnd();
        if (struct.dmap_data != null) {
          oprot.writeFieldBegin(DMAP_DATA_FIELD_DESC);
          oprot.writeString(struct.dmap_data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateBitmap_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateBitmap_argsTupleScheme getScheme() {
        return new UpdateBitmap_argsTupleScheme();
      }
    }

    private static class UpdateBitmap_argsTupleScheme extends TupleScheme<UpdateBitmap_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateBitmap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDir_id()) {
          optionals.set(0);
        }
        if (struct.isSetDmap_data()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDir_id()) {
          oprot.writeI64(struct.dir_id);
        }
        if (struct.isSetDmap_data()) {
          oprot.writeString(struct.dmap_data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateBitmap_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.dir_id = iprot.readI64();
          struct.setDir_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dmap_data = iprot.readString();
          struct.setDmap_dataIsSet(true);
        }
      }
    }

  }

  public static class UpdateBitmap_result implements org.apache.thrift.TBase<UpdateBitmap_result, UpdateBitmap_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateBitmap_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateBitmap_result");

    private static final org.apache.thrift.protocol.TField UNKNOWN_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("unknown_dir", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateBitmap_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateBitmap_resultTupleSchemeFactory());
    }

    public UnrecognizedDirectoryError unknown_dir; // required
    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UNKNOWN_DIR((short)1, "unknown_dir"),
      IO_ERROR((short)2, "io_error"),
      SRV_ERROR((short)3, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UNKNOWN_DIR
            return UNKNOWN_DIR;
          case 2: // IO_ERROR
            return IO_ERROR;
          case 3: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UNKNOWN_DIR, new org.apache.thrift.meta_data.FieldMetaData("unknown_dir", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateBitmap_result.class, metaDataMap);
    }

    public UpdateBitmap_result() {
    }

    public UpdateBitmap_result(
      UnrecognizedDirectoryError unknown_dir,
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.unknown_dir = unknown_dir;
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateBitmap_result(UpdateBitmap_result other) {
      if (other.isSetUnknown_dir()) {
        this.unknown_dir = new UnrecognizedDirectoryError(other.unknown_dir);
      }
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public UpdateBitmap_result deepCopy() {
      return new UpdateBitmap_result(this);
    }

    @Override
    public void clear() {
      this.unknown_dir = null;
      this.io_error = null;
      this.srv_error = null;
    }

    public UnrecognizedDirectoryError getUnknown_dir() {
      return this.unknown_dir;
    }

    public UpdateBitmap_result setUnknown_dir(UnrecognizedDirectoryError unknown_dir) {
      this.unknown_dir = unknown_dir;
      return this;
    }

    public void unsetUnknown_dir() {
      this.unknown_dir = null;
    }

    /** Returns true if field unknown_dir is set (has been assigned a value) and false otherwise */
    public boolean isSetUnknown_dir() {
      return this.unknown_dir != null;
    }

    public void setUnknown_dirIsSet(boolean value) {
      if (!value) {
        this.unknown_dir = null;
      }
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public UpdateBitmap_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public UpdateBitmap_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UNKNOWN_DIR:
        if (value == null) {
          unsetUnknown_dir();
        } else {
          setUnknown_dir((UnrecognizedDirectoryError)value);
        }
        break;

      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UNKNOWN_DIR:
        return getUnknown_dir();

      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UNKNOWN_DIR:
        return isSetUnknown_dir();
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateBitmap_result)
        return this.equals((UpdateBitmap_result)that);
      return false;
    }

    public boolean equals(UpdateBitmap_result that) {
      if (that == null)
        return false;

      boolean this_present_unknown_dir = true && this.isSetUnknown_dir();
      boolean that_present_unknown_dir = true && that.isSetUnknown_dir();
      if (this_present_unknown_dir || that_present_unknown_dir) {
        if (!(this_present_unknown_dir && that_present_unknown_dir))
          return false;
        if (!this.unknown_dir.equals(that.unknown_dir))
          return false;
      }

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_unknown_dir = true && (isSetUnknown_dir());
      list.add(present_unknown_dir);
      if (present_unknown_dir)
        list.add(unknown_dir);

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(UpdateBitmap_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUnknown_dir()).compareTo(other.isSetUnknown_dir());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUnknown_dir()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.unknown_dir, other.unknown_dir);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateBitmap_result(");
      boolean first = true;

      sb.append("unknown_dir:");
      if (this.unknown_dir == null) {
        sb.append("null");
      } else {
        sb.append(this.unknown_dir);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateBitmap_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateBitmap_resultStandardScheme getScheme() {
        return new UpdateBitmap_resultStandardScheme();
      }
    }

    private static class UpdateBitmap_resultStandardScheme extends StandardScheme<UpdateBitmap_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateBitmap_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UNKNOWN_DIR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.unknown_dir = new UnrecognizedDirectoryError();
                struct.unknown_dir.read(iprot);
                struct.setUnknown_dirIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateBitmap_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.unknown_dir != null) {
          oprot.writeFieldBegin(UNKNOWN_DIR_FIELD_DESC);
          struct.unknown_dir.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateBitmap_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateBitmap_resultTupleScheme getScheme() {
        return new UpdateBitmap_resultTupleScheme();
      }
    }

    private static class UpdateBitmap_resultTupleScheme extends TupleScheme<UpdateBitmap_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateBitmap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUnknown_dir()) {
          optionals.set(0);
        }
        if (struct.isSetIo_error()) {
          optionals.set(1);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUnknown_dir()) {
          struct.unknown_dir.write(oprot);
        }
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateBitmap_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.unknown_dir = new UnrecognizedDirectoryError();
          struct.unknown_dir.read(iprot);
          struct.setUnknown_dirIsSet(true);
        }
        if (incoming.get(1)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(2)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

  public static class InsertSplit_args implements org.apache.thrift.TBase<InsertSplit_args, InsertSplit_args._Fields>, java.io.Serializable, Cloneable, Comparable<InsertSplit_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InsertSplit_args");

    private static final org.apache.thrift.protocol.TField DIR_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dir_id", org.apache.thrift.protocol.TType.I64, (short)1);
    private static final org.apache.thrift.protocol.TField PARENT_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("parent_index", org.apache.thrift.protocol.TType.I16, (short)2);
    private static final org.apache.thrift.protocol.TField CHILD_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("child_index", org.apache.thrift.protocol.TType.I16, (short)3);
    private static final org.apache.thrift.protocol.TField PATH_SPLIT_FILES_FIELD_DESC = new org.apache.thrift.protocol.TField("path_split_files", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField DMAP_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("dmap_data", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField MIN_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("min_seq", org.apache.thrift.protocol.TType.I64, (short)6);
    private static final org.apache.thrift.protocol.TField MAX_SEQ_FIELD_DESC = new org.apache.thrift.protocol.TField("max_seq", org.apache.thrift.protocol.TType.I64, (short)7);
    private static final org.apache.thrift.protocol.TField NUM_ENTRIES_FIELD_DESC = new org.apache.thrift.protocol.TField("num_entries", org.apache.thrift.protocol.TType.I64, (short)8);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new InsertSplit_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new InsertSplit_argsTupleSchemeFactory());
    }

    public long dir_id; // required
    public short parent_index; // required
    public short child_index; // required
    public String path_split_files; // required
    public String dmap_data; // required
    public long min_seq; // required
    public long max_seq; // required
    public long num_entries; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DIR_ID((short)1, "dir_id"),
      PARENT_INDEX((short)2, "parent_index"),
      CHILD_INDEX((short)3, "child_index"),
      PATH_SPLIT_FILES((short)4, "path_split_files"),
      DMAP_DATA((short)5, "dmap_data"),
      MIN_SEQ((short)6, "min_seq"),
      MAX_SEQ((short)7, "max_seq"),
      NUM_ENTRIES((short)8, "num_entries");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DIR_ID
            return DIR_ID;
          case 2: // PARENT_INDEX
            return PARENT_INDEX;
          case 3: // CHILD_INDEX
            return CHILD_INDEX;
          case 4: // PATH_SPLIT_FILES
            return PATH_SPLIT_FILES;
          case 5: // DMAP_DATA
            return DMAP_DATA;
          case 6: // MIN_SEQ
            return MIN_SEQ;
          case 7: // MAX_SEQ
            return MAX_SEQ;
          case 8: // NUM_ENTRIES
            return NUM_ENTRIES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DIR_ID_ISSET_ID = 0;
    private static final int __PARENT_INDEX_ISSET_ID = 1;
    private static final int __CHILD_INDEX_ISSET_ID = 2;
    private static final int __MIN_SEQ_ISSET_ID = 3;
    private static final int __MAX_SEQ_ISSET_ID = 4;
    private static final int __NUM_ENTRIES_ISSET_ID = 5;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DIR_ID, new org.apache.thrift.meta_data.FieldMetaData("dir_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.PARENT_INDEX, new org.apache.thrift.meta_data.FieldMetaData("parent_index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.CHILD_INDEX, new org.apache.thrift.meta_data.FieldMetaData("child_index", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
      tmpMap.put(_Fields.PATH_SPLIT_FILES, new org.apache.thrift.meta_data.FieldMetaData("path_split_files", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DMAP_DATA, new org.apache.thrift.meta_data.FieldMetaData("dmap_data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MIN_SEQ, new org.apache.thrift.meta_data.FieldMetaData("min_seq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.MAX_SEQ, new org.apache.thrift.meta_data.FieldMetaData("max_seq", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.NUM_ENTRIES, new org.apache.thrift.meta_data.FieldMetaData("num_entries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InsertSplit_args.class, metaDataMap);
    }

    public InsertSplit_args() {
    }

    public InsertSplit_args(
      long dir_id,
      short parent_index,
      short child_index,
      String path_split_files,
      String dmap_data,
      long min_seq,
      long max_seq,
      long num_entries)
    {
      this();
      this.dir_id = dir_id;
      setDir_idIsSet(true);
      this.parent_index = parent_index;
      setParent_indexIsSet(true);
      this.child_index = child_index;
      setChild_indexIsSet(true);
      this.path_split_files = path_split_files;
      this.dmap_data = dmap_data;
      this.min_seq = min_seq;
      setMin_seqIsSet(true);
      this.max_seq = max_seq;
      setMax_seqIsSet(true);
      this.num_entries = num_entries;
      setNum_entriesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public InsertSplit_args(InsertSplit_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.dir_id = other.dir_id;
      this.parent_index = other.parent_index;
      this.child_index = other.child_index;
      if (other.isSetPath_split_files()) {
        this.path_split_files = other.path_split_files;
      }
      if (other.isSetDmap_data()) {
        this.dmap_data = other.dmap_data;
      }
      this.min_seq = other.min_seq;
      this.max_seq = other.max_seq;
      this.num_entries = other.num_entries;
    }

    public InsertSplit_args deepCopy() {
      return new InsertSplit_args(this);
    }

    @Override
    public void clear() {
      setDir_idIsSet(false);
      this.dir_id = 0;
      setParent_indexIsSet(false);
      this.parent_index = 0;
      setChild_indexIsSet(false);
      this.child_index = 0;
      this.path_split_files = null;
      this.dmap_data = null;
      setMin_seqIsSet(false);
      this.min_seq = 0;
      setMax_seqIsSet(false);
      this.max_seq = 0;
      setNum_entriesIsSet(false);
      this.num_entries = 0;
    }

    public long getDir_id() {
      return this.dir_id;
    }

    public InsertSplit_args setDir_id(long dir_id) {
      this.dir_id = dir_id;
      setDir_idIsSet(true);
      return this;
    }

    public void unsetDir_id() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DIR_ID_ISSET_ID);
    }

    /** Returns true if field dir_id is set (has been assigned a value) and false otherwise */
    public boolean isSetDir_id() {
      return EncodingUtils.testBit(__isset_bitfield, __DIR_ID_ISSET_ID);
    }

    public void setDir_idIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DIR_ID_ISSET_ID, value);
    }

    public short getParent_index() {
      return this.parent_index;
    }

    public InsertSplit_args setParent_index(short parent_index) {
      this.parent_index = parent_index;
      setParent_indexIsSet(true);
      return this;
    }

    public void unsetParent_index() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENT_INDEX_ISSET_ID);
    }

    /** Returns true if field parent_index is set (has been assigned a value) and false otherwise */
    public boolean isSetParent_index() {
      return EncodingUtils.testBit(__isset_bitfield, __PARENT_INDEX_ISSET_ID);
    }

    public void setParent_indexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENT_INDEX_ISSET_ID, value);
    }

    public short getChild_index() {
      return this.child_index;
    }

    public InsertSplit_args setChild_index(short child_index) {
      this.child_index = child_index;
      setChild_indexIsSet(true);
      return this;
    }

    public void unsetChild_index() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __CHILD_INDEX_ISSET_ID);
    }

    /** Returns true if field child_index is set (has been assigned a value) and false otherwise */
    public boolean isSetChild_index() {
      return EncodingUtils.testBit(__isset_bitfield, __CHILD_INDEX_ISSET_ID);
    }

    public void setChild_indexIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __CHILD_INDEX_ISSET_ID, value);
    }

    public String getPath_split_files() {
      return this.path_split_files;
    }

    public InsertSplit_args setPath_split_files(String path_split_files) {
      this.path_split_files = path_split_files;
      return this;
    }

    public void unsetPath_split_files() {
      this.path_split_files = null;
    }

    /** Returns true if field path_split_files is set (has been assigned a value) and false otherwise */
    public boolean isSetPath_split_files() {
      return this.path_split_files != null;
    }

    public void setPath_split_filesIsSet(boolean value) {
      if (!value) {
        this.path_split_files = null;
      }
    }

    public String getDmap_data() {
      return this.dmap_data;
    }

    public InsertSplit_args setDmap_data(String dmap_data) {
      this.dmap_data = dmap_data;
      return this;
    }

    public void unsetDmap_data() {
      this.dmap_data = null;
    }

    /** Returns true if field dmap_data is set (has been assigned a value) and false otherwise */
    public boolean isSetDmap_data() {
      return this.dmap_data != null;
    }

    public void setDmap_dataIsSet(boolean value) {
      if (!value) {
        this.dmap_data = null;
      }
    }

    public long getMin_seq() {
      return this.min_seq;
    }

    public InsertSplit_args setMin_seq(long min_seq) {
      this.min_seq = min_seq;
      setMin_seqIsSet(true);
      return this;
    }

    public void unsetMin_seq() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_SEQ_ISSET_ID);
    }

    /** Returns true if field min_seq is set (has been assigned a value) and false otherwise */
    public boolean isSetMin_seq() {
      return EncodingUtils.testBit(__isset_bitfield, __MIN_SEQ_ISSET_ID);
    }

    public void setMin_seqIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_SEQ_ISSET_ID, value);
    }

    public long getMax_seq() {
      return this.max_seq;
    }

    public InsertSplit_args setMax_seq(long max_seq) {
      this.max_seq = max_seq;
      setMax_seqIsSet(true);
      return this;
    }

    public void unsetMax_seq() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAX_SEQ_ISSET_ID);
    }

    /** Returns true if field max_seq is set (has been assigned a value) and false otherwise */
    public boolean isSetMax_seq() {
      return EncodingUtils.testBit(__isset_bitfield, __MAX_SEQ_ISSET_ID);
    }

    public void setMax_seqIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAX_SEQ_ISSET_ID, value);
    }

    public long getNum_entries() {
      return this.num_entries;
    }

    public InsertSplit_args setNum_entries(long num_entries) {
      this.num_entries = num_entries;
      setNum_entriesIsSet(true);
      return this;
    }

    public void unsetNum_entries() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __NUM_ENTRIES_ISSET_ID);
    }

    /** Returns true if field num_entries is set (has been assigned a value) and false otherwise */
    public boolean isSetNum_entries() {
      return EncodingUtils.testBit(__isset_bitfield, __NUM_ENTRIES_ISSET_ID);
    }

    public void setNum_entriesIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __NUM_ENTRIES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DIR_ID:
        if (value == null) {
          unsetDir_id();
        } else {
          setDir_id((Long)value);
        }
        break;

      case PARENT_INDEX:
        if (value == null) {
          unsetParent_index();
        } else {
          setParent_index((Short)value);
        }
        break;

      case CHILD_INDEX:
        if (value == null) {
          unsetChild_index();
        } else {
          setChild_index((Short)value);
        }
        break;

      case PATH_SPLIT_FILES:
        if (value == null) {
          unsetPath_split_files();
        } else {
          setPath_split_files((String)value);
        }
        break;

      case DMAP_DATA:
        if (value == null) {
          unsetDmap_data();
        } else {
          setDmap_data((String)value);
        }
        break;

      case MIN_SEQ:
        if (value == null) {
          unsetMin_seq();
        } else {
          setMin_seq((Long)value);
        }
        break;

      case MAX_SEQ:
        if (value == null) {
          unsetMax_seq();
        } else {
          setMax_seq((Long)value);
        }
        break;

      case NUM_ENTRIES:
        if (value == null) {
          unsetNum_entries();
        } else {
          setNum_entries((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DIR_ID:
        return getDir_id();

      case PARENT_INDEX:
        return getParent_index();

      case CHILD_INDEX:
        return getChild_index();

      case PATH_SPLIT_FILES:
        return getPath_split_files();

      case DMAP_DATA:
        return getDmap_data();

      case MIN_SEQ:
        return getMin_seq();

      case MAX_SEQ:
        return getMax_seq();

      case NUM_ENTRIES:
        return getNum_entries();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DIR_ID:
        return isSetDir_id();
      case PARENT_INDEX:
        return isSetParent_index();
      case CHILD_INDEX:
        return isSetChild_index();
      case PATH_SPLIT_FILES:
        return isSetPath_split_files();
      case DMAP_DATA:
        return isSetDmap_data();
      case MIN_SEQ:
        return isSetMin_seq();
      case MAX_SEQ:
        return isSetMax_seq();
      case NUM_ENTRIES:
        return isSetNum_entries();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof InsertSplit_args)
        return this.equals((InsertSplit_args)that);
      return false;
    }

    public boolean equals(InsertSplit_args that) {
      if (that == null)
        return false;

      boolean this_present_dir_id = true;
      boolean that_present_dir_id = true;
      if (this_present_dir_id || that_present_dir_id) {
        if (!(this_present_dir_id && that_present_dir_id))
          return false;
        if (this.dir_id != that.dir_id)
          return false;
      }

      boolean this_present_parent_index = true;
      boolean that_present_parent_index = true;
      if (this_present_parent_index || that_present_parent_index) {
        if (!(this_present_parent_index && that_present_parent_index))
          return false;
        if (this.parent_index != that.parent_index)
          return false;
      }

      boolean this_present_child_index = true;
      boolean that_present_child_index = true;
      if (this_present_child_index || that_present_child_index) {
        if (!(this_present_child_index && that_present_child_index))
          return false;
        if (this.child_index != that.child_index)
          return false;
      }

      boolean this_present_path_split_files = true && this.isSetPath_split_files();
      boolean that_present_path_split_files = true && that.isSetPath_split_files();
      if (this_present_path_split_files || that_present_path_split_files) {
        if (!(this_present_path_split_files && that_present_path_split_files))
          return false;
        if (!this.path_split_files.equals(that.path_split_files))
          return false;
      }

      boolean this_present_dmap_data = true && this.isSetDmap_data();
      boolean that_present_dmap_data = true && that.isSetDmap_data();
      if (this_present_dmap_data || that_present_dmap_data) {
        if (!(this_present_dmap_data && that_present_dmap_data))
          return false;
        if (!this.dmap_data.equals(that.dmap_data))
          return false;
      }

      boolean this_present_min_seq = true;
      boolean that_present_min_seq = true;
      if (this_present_min_seq || that_present_min_seq) {
        if (!(this_present_min_seq && that_present_min_seq))
          return false;
        if (this.min_seq != that.min_seq)
          return false;
      }

      boolean this_present_max_seq = true;
      boolean that_present_max_seq = true;
      if (this_present_max_seq || that_present_max_seq) {
        if (!(this_present_max_seq && that_present_max_seq))
          return false;
        if (this.max_seq != that.max_seq)
          return false;
      }

      boolean this_present_num_entries = true;
      boolean that_present_num_entries = true;
      if (this_present_num_entries || that_present_num_entries) {
        if (!(this_present_num_entries && that_present_num_entries))
          return false;
        if (this.num_entries != that.num_entries)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_dir_id = true;
      list.add(present_dir_id);
      if (present_dir_id)
        list.add(dir_id);

      boolean present_parent_index = true;
      list.add(present_parent_index);
      if (present_parent_index)
        list.add(parent_index);

      boolean present_child_index = true;
      list.add(present_child_index);
      if (present_child_index)
        list.add(child_index);

      boolean present_path_split_files = true && (isSetPath_split_files());
      list.add(present_path_split_files);
      if (present_path_split_files)
        list.add(path_split_files);

      boolean present_dmap_data = true && (isSetDmap_data());
      list.add(present_dmap_data);
      if (present_dmap_data)
        list.add(dmap_data);

      boolean present_min_seq = true;
      list.add(present_min_seq);
      if (present_min_seq)
        list.add(min_seq);

      boolean present_max_seq = true;
      list.add(present_max_seq);
      if (present_max_seq)
        list.add(max_seq);

      boolean present_num_entries = true;
      list.add(present_num_entries);
      if (present_num_entries)
        list.add(num_entries);

      return list.hashCode();
    }

    @Override
    public int compareTo(InsertSplit_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetDir_id()).compareTo(other.isSetDir_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDir_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dir_id, other.dir_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetParent_index()).compareTo(other.isSetParent_index());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParent_index()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent_index, other.parent_index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetChild_index()).compareTo(other.isSetChild_index());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChild_index()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.child_index, other.child_index);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPath_split_files()).compareTo(other.isSetPath_split_files());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPath_split_files()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.path_split_files, other.path_split_files);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetDmap_data()).compareTo(other.isSetDmap_data());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDmap_data()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dmap_data, other.dmap_data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMin_seq()).compareTo(other.isSetMin_seq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMin_seq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min_seq, other.min_seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetMax_seq()).compareTo(other.isSetMax_seq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMax_seq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.max_seq, other.max_seq);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetNum_entries()).compareTo(other.isSetNum_entries());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNum_entries()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.num_entries, other.num_entries);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("InsertSplit_args(");
      boolean first = true;

      sb.append("dir_id:");
      sb.append(this.dir_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("parent_index:");
      sb.append(this.parent_index);
      first = false;
      if (!first) sb.append(", ");
      sb.append("child_index:");
      sb.append(this.child_index);
      first = false;
      if (!first) sb.append(", ");
      sb.append("path_split_files:");
      if (this.path_split_files == null) {
        sb.append("null");
      } else {
        sb.append(this.path_split_files);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dmap_data:");
      if (this.dmap_data == null) {
        sb.append("null");
      } else {
        sb.append(this.dmap_data);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("min_seq:");
      sb.append(this.min_seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("max_seq:");
      sb.append(this.max_seq);
      first = false;
      if (!first) sb.append(", ");
      sb.append("num_entries:");
      sb.append(this.num_entries);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class InsertSplit_argsStandardSchemeFactory implements SchemeFactory {
      public InsertSplit_argsStandardScheme getScheme() {
        return new InsertSplit_argsStandardScheme();
      }
    }

    private static class InsertSplit_argsStandardScheme extends StandardScheme<InsertSplit_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, InsertSplit_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DIR_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.dir_id = iprot.readI64();
                struct.setDir_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARENT_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.parent_index = iprot.readI16();
                struct.setParent_indexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHILD_INDEX
              if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
                struct.child_index = iprot.readI16();
                struct.setChild_indexIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PATH_SPLIT_FILES
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.path_split_files = iprot.readString();
                struct.setPath_split_filesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // DMAP_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dmap_data = iprot.readString();
                struct.setDmap_dataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // MIN_SEQ
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.min_seq = iprot.readI64();
                struct.setMin_seqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // MAX_SEQ
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.max_seq = iprot.readI64();
                struct.setMax_seqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 8: // NUM_ENTRIES
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.num_entries = iprot.readI64();
                struct.setNum_entriesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, InsertSplit_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(DIR_ID_FIELD_DESC);
        oprot.writeI64(struct.dir_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(PARENT_INDEX_FIELD_DESC);
        oprot.writeI16(struct.parent_index);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(CHILD_INDEX_FIELD_DESC);
        oprot.writeI16(struct.child_index);
        oprot.writeFieldEnd();
        if (struct.path_split_files != null) {
          oprot.writeFieldBegin(PATH_SPLIT_FILES_FIELD_DESC);
          oprot.writeString(struct.path_split_files);
          oprot.writeFieldEnd();
        }
        if (struct.dmap_data != null) {
          oprot.writeFieldBegin(DMAP_DATA_FIELD_DESC);
          oprot.writeString(struct.dmap_data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(MIN_SEQ_FIELD_DESC);
        oprot.writeI64(struct.min_seq);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_SEQ_FIELD_DESC);
        oprot.writeI64(struct.max_seq);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUM_ENTRIES_FIELD_DESC);
        oprot.writeI64(struct.num_entries);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class InsertSplit_argsTupleSchemeFactory implements SchemeFactory {
      public InsertSplit_argsTupleScheme getScheme() {
        return new InsertSplit_argsTupleScheme();
      }
    }

    private static class InsertSplit_argsTupleScheme extends TupleScheme<InsertSplit_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, InsertSplit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetDir_id()) {
          optionals.set(0);
        }
        if (struct.isSetParent_index()) {
          optionals.set(1);
        }
        if (struct.isSetChild_index()) {
          optionals.set(2);
        }
        if (struct.isSetPath_split_files()) {
          optionals.set(3);
        }
        if (struct.isSetDmap_data()) {
          optionals.set(4);
        }
        if (struct.isSetMin_seq()) {
          optionals.set(5);
        }
        if (struct.isSetMax_seq()) {
          optionals.set(6);
        }
        if (struct.isSetNum_entries()) {
          optionals.set(7);
        }
        oprot.writeBitSet(optionals, 8);
        if (struct.isSetDir_id()) {
          oprot.writeI64(struct.dir_id);
        }
        if (struct.isSetParent_index()) {
          oprot.writeI16(struct.parent_index);
        }
        if (struct.isSetChild_index()) {
          oprot.writeI16(struct.child_index);
        }
        if (struct.isSetPath_split_files()) {
          oprot.writeString(struct.path_split_files);
        }
        if (struct.isSetDmap_data()) {
          oprot.writeString(struct.dmap_data);
        }
        if (struct.isSetMin_seq()) {
          oprot.writeI64(struct.min_seq);
        }
        if (struct.isSetMax_seq()) {
          oprot.writeI64(struct.max_seq);
        }
        if (struct.isSetNum_entries()) {
          oprot.writeI64(struct.num_entries);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, InsertSplit_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(8);
        if (incoming.get(0)) {
          struct.dir_id = iprot.readI64();
          struct.setDir_idIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parent_index = iprot.readI16();
          struct.setParent_indexIsSet(true);
        }
        if (incoming.get(2)) {
          struct.child_index = iprot.readI16();
          struct.setChild_indexIsSet(true);
        }
        if (incoming.get(3)) {
          struct.path_split_files = iprot.readString();
          struct.setPath_split_filesIsSet(true);
        }
        if (incoming.get(4)) {
          struct.dmap_data = iprot.readString();
          struct.setDmap_dataIsSet(true);
        }
        if (incoming.get(5)) {
          struct.min_seq = iprot.readI64();
          struct.setMin_seqIsSet(true);
        }
        if (incoming.get(6)) {
          struct.max_seq = iprot.readI64();
          struct.setMax_seqIsSet(true);
        }
        if (incoming.get(7)) {
          struct.num_entries = iprot.readI64();
          struct.setNum_entriesIsSet(true);
        }
      }
    }

  }

  public static class InsertSplit_result implements org.apache.thrift.TBase<InsertSplit_result, InsertSplit_result._Fields>, java.io.Serializable, Cloneable, Comparable<InsertSplit_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InsertSplit_result");

    private static final org.apache.thrift.protocol.TField WRONG_SRV_FIELD_DESC = new org.apache.thrift.protocol.TField("wrong_srv", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_EXISTS_FIELD_DESC = new org.apache.thrift.protocol.TField("file_exists", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField IO_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("io_error", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField SRV_ERROR_FIELD_DESC = new org.apache.thrift.protocol.TField("srv_error", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new InsertSplit_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new InsertSplit_resultTupleSchemeFactory());
    }

    public WrongServerError wrong_srv; // required
    public FileAlreadyExistsException file_exists; // required
    public IOError io_error; // required
    public ServerInternalError srv_error; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      WRONG_SRV((short)1, "wrong_srv"),
      FILE_EXISTS((short)2, "file_exists"),
      IO_ERROR((short)3, "io_error"),
      SRV_ERROR((short)4, "srv_error");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // WRONG_SRV
            return WRONG_SRV;
          case 2: // FILE_EXISTS
            return FILE_EXISTS;
          case 3: // IO_ERROR
            return IO_ERROR;
          case 4: // SRV_ERROR
            return SRV_ERROR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.WRONG_SRV, new org.apache.thrift.meta_data.FieldMetaData("wrong_srv", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.FILE_EXISTS, new org.apache.thrift.meta_data.FieldMetaData("file_exists", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.IO_ERROR, new org.apache.thrift.meta_data.FieldMetaData("io_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SRV_ERROR, new org.apache.thrift.meta_data.FieldMetaData("srv_error", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InsertSplit_result.class, metaDataMap);
    }

    public InsertSplit_result() {
    }

    public InsertSplit_result(
      WrongServerError wrong_srv,
      FileAlreadyExistsException file_exists,
      IOError io_error,
      ServerInternalError srv_error)
    {
      this();
      this.wrong_srv = wrong_srv;
      this.file_exists = file_exists;
      this.io_error = io_error;
      this.srv_error = srv_error;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public InsertSplit_result(InsertSplit_result other) {
      if (other.isSetWrong_srv()) {
        this.wrong_srv = new WrongServerError(other.wrong_srv);
      }
      if (other.isSetFile_exists()) {
        this.file_exists = new FileAlreadyExistsException(other.file_exists);
      }
      if (other.isSetIo_error()) {
        this.io_error = new IOError(other.io_error);
      }
      if (other.isSetSrv_error()) {
        this.srv_error = new ServerInternalError(other.srv_error);
      }
    }

    public InsertSplit_result deepCopy() {
      return new InsertSplit_result(this);
    }

    @Override
    public void clear() {
      this.wrong_srv = null;
      this.file_exists = null;
      this.io_error = null;
      this.srv_error = null;
    }

    public WrongServerError getWrong_srv() {
      return this.wrong_srv;
    }

    public InsertSplit_result setWrong_srv(WrongServerError wrong_srv) {
      this.wrong_srv = wrong_srv;
      return this;
    }

    public void unsetWrong_srv() {
      this.wrong_srv = null;
    }

    /** Returns true if field wrong_srv is set (has been assigned a value) and false otherwise */
    public boolean isSetWrong_srv() {
      return this.wrong_srv != null;
    }

    public void setWrong_srvIsSet(boolean value) {
      if (!value) {
        this.wrong_srv = null;
      }
    }

    public FileAlreadyExistsException getFile_exists() {
      return this.file_exists;
    }

    public InsertSplit_result setFile_exists(FileAlreadyExistsException file_exists) {
      this.file_exists = file_exists;
      return this;
    }

    public void unsetFile_exists() {
      this.file_exists = null;
    }

    /** Returns true if field file_exists is set (has been assigned a value) and false otherwise */
    public boolean isSetFile_exists() {
      return this.file_exists != null;
    }

    public void setFile_existsIsSet(boolean value) {
      if (!value) {
        this.file_exists = null;
      }
    }

    public IOError getIo_error() {
      return this.io_error;
    }

    public InsertSplit_result setIo_error(IOError io_error) {
      this.io_error = io_error;
      return this;
    }

    public void unsetIo_error() {
      this.io_error = null;
    }

    /** Returns true if field io_error is set (has been assigned a value) and false otherwise */
    public boolean isSetIo_error() {
      return this.io_error != null;
    }

    public void setIo_errorIsSet(boolean value) {
      if (!value) {
        this.io_error = null;
      }
    }

    public ServerInternalError getSrv_error() {
      return this.srv_error;
    }

    public InsertSplit_result setSrv_error(ServerInternalError srv_error) {
      this.srv_error = srv_error;
      return this;
    }

    public void unsetSrv_error() {
      this.srv_error = null;
    }

    /** Returns true if field srv_error is set (has been assigned a value) and false otherwise */
    public boolean isSetSrv_error() {
      return this.srv_error != null;
    }

    public void setSrv_errorIsSet(boolean value) {
      if (!value) {
        this.srv_error = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case WRONG_SRV:
        if (value == null) {
          unsetWrong_srv();
        } else {
          setWrong_srv((WrongServerError)value);
        }
        break;

      case FILE_EXISTS:
        if (value == null) {
          unsetFile_exists();
        } else {
          setFile_exists((FileAlreadyExistsException)value);
        }
        break;

      case IO_ERROR:
        if (value == null) {
          unsetIo_error();
        } else {
          setIo_error((IOError)value);
        }
        break;

      case SRV_ERROR:
        if (value == null) {
          unsetSrv_error();
        } else {
          setSrv_error((ServerInternalError)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case WRONG_SRV:
        return getWrong_srv();

      case FILE_EXISTS:
        return getFile_exists();

      case IO_ERROR:
        return getIo_error();

      case SRV_ERROR:
        return getSrv_error();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case WRONG_SRV:
        return isSetWrong_srv();
      case FILE_EXISTS:
        return isSetFile_exists();
      case IO_ERROR:
        return isSetIo_error();
      case SRV_ERROR:
        return isSetSrv_error();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof InsertSplit_result)
        return this.equals((InsertSplit_result)that);
      return false;
    }

    public boolean equals(InsertSplit_result that) {
      if (that == null)
        return false;

      boolean this_present_wrong_srv = true && this.isSetWrong_srv();
      boolean that_present_wrong_srv = true && that.isSetWrong_srv();
      if (this_present_wrong_srv || that_present_wrong_srv) {
        if (!(this_present_wrong_srv && that_present_wrong_srv))
          return false;
        if (!this.wrong_srv.equals(that.wrong_srv))
          return false;
      }

      boolean this_present_file_exists = true && this.isSetFile_exists();
      boolean that_present_file_exists = true && that.isSetFile_exists();
      if (this_present_file_exists || that_present_file_exists) {
        if (!(this_present_file_exists && that_present_file_exists))
          return false;
        if (!this.file_exists.equals(that.file_exists))
          return false;
      }

      boolean this_present_io_error = true && this.isSetIo_error();
      boolean that_present_io_error = true && that.isSetIo_error();
      if (this_present_io_error || that_present_io_error) {
        if (!(this_present_io_error && that_present_io_error))
          return false;
        if (!this.io_error.equals(that.io_error))
          return false;
      }

      boolean this_present_srv_error = true && this.isSetSrv_error();
      boolean that_present_srv_error = true && that.isSetSrv_error();
      if (this_present_srv_error || that_present_srv_error) {
        if (!(this_present_srv_error && that_present_srv_error))
          return false;
        if (!this.srv_error.equals(that.srv_error))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_wrong_srv = true && (isSetWrong_srv());
      list.add(present_wrong_srv);
      if (present_wrong_srv)
        list.add(wrong_srv);

      boolean present_file_exists = true && (isSetFile_exists());
      list.add(present_file_exists);
      if (present_file_exists)
        list.add(file_exists);

      boolean present_io_error = true && (isSetIo_error());
      list.add(present_io_error);
      if (present_io_error)
        list.add(io_error);

      boolean present_srv_error = true && (isSetSrv_error());
      list.add(present_srv_error);
      if (present_srv_error)
        list.add(srv_error);

      return list.hashCode();
    }

    @Override
    public int compareTo(InsertSplit_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetWrong_srv()).compareTo(other.isSetWrong_srv());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetWrong_srv()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.wrong_srv, other.wrong_srv);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFile_exists()).compareTo(other.isSetFile_exists());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile_exists()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_exists, other.file_exists);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIo_error()).compareTo(other.isSetIo_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIo_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.io_error, other.io_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSrv_error()).compareTo(other.isSetSrv_error());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSrv_error()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.srv_error, other.srv_error);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("InsertSplit_result(");
      boolean first = true;

      sb.append("wrong_srv:");
      if (this.wrong_srv == null) {
        sb.append("null");
      } else {
        sb.append(this.wrong_srv);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("file_exists:");
      if (this.file_exists == null) {
        sb.append("null");
      } else {
        sb.append(this.file_exists);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("io_error:");
      if (this.io_error == null) {
        sb.append("null");
      } else {
        sb.append(this.io_error);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("srv_error:");
      if (this.srv_error == null) {
        sb.append("null");
      } else {
        sb.append(this.srv_error);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class InsertSplit_resultStandardSchemeFactory implements SchemeFactory {
      public InsertSplit_resultStandardScheme getScheme() {
        return new InsertSplit_resultStandardScheme();
      }
    }

    private static class InsertSplit_resultStandardScheme extends StandardScheme<InsertSplit_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, InsertSplit_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // WRONG_SRV
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.wrong_srv = new WrongServerError();
                struct.wrong_srv.read(iprot);
                struct.setWrong_srvIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_EXISTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.file_exists = new FileAlreadyExistsException();
                struct.file_exists.read(iprot);
                struct.setFile_existsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // IO_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.io_error = new IOError();
                struct.io_error.read(iprot);
                struct.setIo_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SRV_ERROR
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.srv_error = new ServerInternalError();
                struct.srv_error.read(iprot);
                struct.setSrv_errorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, InsertSplit_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.wrong_srv != null) {
          oprot.writeFieldBegin(WRONG_SRV_FIELD_DESC);
          struct.wrong_srv.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.file_exists != null) {
          oprot.writeFieldBegin(FILE_EXISTS_FIELD_DESC);
          struct.file_exists.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.io_error != null) {
          oprot.writeFieldBegin(IO_ERROR_FIELD_DESC);
          struct.io_error.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.srv_error != null) {
          oprot.writeFieldBegin(SRV_ERROR_FIELD_DESC);
          struct.srv_error.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class InsertSplit_resultTupleSchemeFactory implements SchemeFactory {
      public InsertSplit_resultTupleScheme getScheme() {
        return new InsertSplit_resultTupleScheme();
      }
    }

    private static class InsertSplit_resultTupleScheme extends TupleScheme<InsertSplit_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, InsertSplit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetWrong_srv()) {
          optionals.set(0);
        }
        if (struct.isSetFile_exists()) {
          optionals.set(1);
        }
        if (struct.isSetIo_error()) {
          optionals.set(2);
        }
        if (struct.isSetSrv_error()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetWrong_srv()) {
          struct.wrong_srv.write(oprot);
        }
        if (struct.isSetFile_exists()) {
          struct.file_exists.write(oprot);
        }
        if (struct.isSetIo_error()) {
          struct.io_error.write(oprot);
        }
        if (struct.isSetSrv_error()) {
          struct.srv_error.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, InsertSplit_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.wrong_srv = new WrongServerError();
          struct.wrong_srv.read(iprot);
          struct.setWrong_srvIsSet(true);
        }
        if (incoming.get(1)) {
          struct.file_exists = new FileAlreadyExistsException();
          struct.file_exists.read(iprot);
          struct.setFile_existsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.io_error = new IOError();
          struct.io_error.read(iprot);
          struct.setIo_errorIsSet(true);
        }
        if (incoming.get(3)) {
          struct.srv_error = new ServerInternalError();
          struct.srv_error.read(iprot);
          struct.setSrv_errorIsSet(true);
        }
      }
    }

  }

}
