/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.cmu.pdl.indexfs.srvless;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2021-12-06")
public class LookupInfo implements org.apache.thrift.TBase<LookupInfo, LookupInfo._Fields>, java.io.Serializable, Cloneable, Comparable<LookupInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LookupInfo");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField ZEROTH_SERVER_FIELD_DESC = new org.apache.thrift.protocol.TField("zeroth_server", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField PERM_FIELD_DESC = new org.apache.thrift.protocol.TField("perm", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField GID_FIELD_DESC = new org.apache.thrift.protocol.TField("gid", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField LEASE_DUE_FIELD_DESC = new org.apache.thrift.protocol.TField("lease_due", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new LookupInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new LookupInfoTupleSchemeFactory());
  }

  public long id; // required
  public short zeroth_server; // required
  public short perm; // required
  public short uid; // required
  public short gid; // required
  public long lease_due; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    ZEROTH_SERVER((short)2, "zeroth_server"),
    PERM((short)3, "perm"),
    UID((short)4, "uid"),
    GID((short)5, "gid"),
    LEASE_DUE((short)6, "lease_due");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // ZEROTH_SERVER
          return ZEROTH_SERVER;
        case 3: // PERM
          return PERM;
        case 4: // UID
          return UID;
        case 5: // GID
          return GID;
        case 6: // LEASE_DUE
          return LEASE_DUE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ID_ISSET_ID = 0;
  private static final int __ZEROTH_SERVER_ISSET_ID = 1;
  private static final int __PERM_ISSET_ID = 2;
  private static final int __UID_ISSET_ID = 3;
  private static final int __GID_ISSET_ID = 4;
  private static final int __LEASE_DUE_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.ZEROTH_SERVER, new org.apache.thrift.meta_data.FieldMetaData("zeroth_server", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.PERM, new org.apache.thrift.meta_data.FieldMetaData("perm", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.GID, new org.apache.thrift.meta_data.FieldMetaData("gid", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.LEASE_DUE, new org.apache.thrift.meta_data.FieldMetaData("lease_due", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LookupInfo.class, metaDataMap);
  }

  public LookupInfo() {
  }

  public LookupInfo(
    long id,
    short zeroth_server,
    short perm,
    short uid,
    short gid,
    long lease_due)
  {
    this();
    this.id = id;
    setIdIsSet(true);
    this.zeroth_server = zeroth_server;
    setZeroth_serverIsSet(true);
    this.perm = perm;
    setPermIsSet(true);
    this.uid = uid;
    setUidIsSet(true);
    this.gid = gid;
    setGidIsSet(true);
    this.lease_due = lease_due;
    setLease_dueIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LookupInfo(LookupInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    this.id = other.id;
    this.zeroth_server = other.zeroth_server;
    this.perm = other.perm;
    this.uid = other.uid;
    this.gid = other.gid;
    this.lease_due = other.lease_due;
  }

  public LookupInfo deepCopy() {
    return new LookupInfo(this);
  }

  @Override
  public void clear() {
    setIdIsSet(false);
    this.id = 0;
    setZeroth_serverIsSet(false);
    this.zeroth_server = 0;
    setPermIsSet(false);
    this.perm = 0;
    setUidIsSet(false);
    this.uid = 0;
    setGidIsSet(false);
    this.gid = 0;
    setLease_dueIsSet(false);
    this.lease_due = 0;
  }

  public long getId() {
    return this.id;
  }

  public LookupInfo setId(long id) {
    this.id = id;
    setIdIsSet(true);
    return this;
  }

  public void unsetId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
  }

  public void setIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
  }

  public short getZeroth_server() {
    return this.zeroth_server;
  }

  public LookupInfo setZeroth_server(short zeroth_server) {
    this.zeroth_server = zeroth_server;
    setZeroth_serverIsSet(true);
    return this;
  }

  public void unsetZeroth_server() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ZEROTH_SERVER_ISSET_ID);
  }

  /** Returns true if field zeroth_server is set (has been assigned a value) and false otherwise */
  public boolean isSetZeroth_server() {
    return EncodingUtils.testBit(__isset_bitfield, __ZEROTH_SERVER_ISSET_ID);
  }

  public void setZeroth_serverIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ZEROTH_SERVER_ISSET_ID, value);
  }

  public short getPerm() {
    return this.perm;
  }

  public LookupInfo setPerm(short perm) {
    this.perm = perm;
    setPermIsSet(true);
    return this;
  }

  public void unsetPerm() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PERM_ISSET_ID);
  }

  /** Returns true if field perm is set (has been assigned a value) and false otherwise */
  public boolean isSetPerm() {
    return EncodingUtils.testBit(__isset_bitfield, __PERM_ISSET_ID);
  }

  public void setPermIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PERM_ISSET_ID, value);
  }

  public short getUid() {
    return this.uid;
  }

  public LookupInfo setUid(short uid) {
    this.uid = uid;
    setUidIsSet(true);
    return this;
  }

  public void unsetUid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __UID_ISSET_ID);
  }

  /** Returns true if field uid is set (has been assigned a value) and false otherwise */
  public boolean isSetUid() {
    return EncodingUtils.testBit(__isset_bitfield, __UID_ISSET_ID);
  }

  public void setUidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __UID_ISSET_ID, value);
  }

  public short getGid() {
    return this.gid;
  }

  public LookupInfo setGid(short gid) {
    this.gid = gid;
    setGidIsSet(true);
    return this;
  }

  public void unsetGid() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __GID_ISSET_ID);
  }

  /** Returns true if field gid is set (has been assigned a value) and false otherwise */
  public boolean isSetGid() {
    return EncodingUtils.testBit(__isset_bitfield, __GID_ISSET_ID);
  }

  public void setGidIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __GID_ISSET_ID, value);
  }

  public long getLease_due() {
    return this.lease_due;
  }

  public LookupInfo setLease_due(long lease_due) {
    this.lease_due = lease_due;
    setLease_dueIsSet(true);
    return this;
  }

  public void unsetLease_due() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LEASE_DUE_ISSET_ID);
  }

  /** Returns true if field lease_due is set (has been assigned a value) and false otherwise */
  public boolean isSetLease_due() {
    return EncodingUtils.testBit(__isset_bitfield, __LEASE_DUE_ISSET_ID);
  }

  public void setLease_dueIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LEASE_DUE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((Long)value);
      }
      break;

    case ZEROTH_SERVER:
      if (value == null) {
        unsetZeroth_server();
      } else {
        setZeroth_server((Short)value);
      }
      break;

    case PERM:
      if (value == null) {
        unsetPerm();
      } else {
        setPerm((Short)value);
      }
      break;

    case UID:
      if (value == null) {
        unsetUid();
      } else {
        setUid((Short)value);
      }
      break;

    case GID:
      if (value == null) {
        unsetGid();
      } else {
        setGid((Short)value);
      }
      break;

    case LEASE_DUE:
      if (value == null) {
        unsetLease_due();
      } else {
        setLease_due((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case ZEROTH_SERVER:
      return getZeroth_server();

    case PERM:
      return getPerm();

    case UID:
      return getUid();

    case GID:
      return getGid();

    case LEASE_DUE:
      return getLease_due();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case ZEROTH_SERVER:
      return isSetZeroth_server();
    case PERM:
      return isSetPerm();
    case UID:
      return isSetUid();
    case GID:
      return isSetGid();
    case LEASE_DUE:
      return isSetLease_due();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof LookupInfo)
      return this.equals((LookupInfo)that);
    return false;
  }

  public boolean equals(LookupInfo that) {
    if (that == null)
      return false;

    boolean this_present_id = true;
    boolean that_present_id = true;
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (this.id != that.id)
        return false;
    }

    boolean this_present_zeroth_server = true;
    boolean that_present_zeroth_server = true;
    if (this_present_zeroth_server || that_present_zeroth_server) {
      if (!(this_present_zeroth_server && that_present_zeroth_server))
        return false;
      if (this.zeroth_server != that.zeroth_server)
        return false;
    }

    boolean this_present_perm = true;
    boolean that_present_perm = true;
    if (this_present_perm || that_present_perm) {
      if (!(this_present_perm && that_present_perm))
        return false;
      if (this.perm != that.perm)
        return false;
    }

    boolean this_present_uid = true;
    boolean that_present_uid = true;
    if (this_present_uid || that_present_uid) {
      if (!(this_present_uid && that_present_uid))
        return false;
      if (this.uid != that.uid)
        return false;
    }

    boolean this_present_gid = true;
    boolean that_present_gid = true;
    if (this_present_gid || that_present_gid) {
      if (!(this_present_gid && that_present_gid))
        return false;
      if (this.gid != that.gid)
        return false;
    }

    boolean this_present_lease_due = true;
    boolean that_present_lease_due = true;
    if (this_present_lease_due || that_present_lease_due) {
      if (!(this_present_lease_due && that_present_lease_due))
        return false;
      if (this.lease_due != that.lease_due)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_id = true;
    list.add(present_id);
    if (present_id)
      list.add(id);

    boolean present_zeroth_server = true;
    list.add(present_zeroth_server);
    if (present_zeroth_server)
      list.add(zeroth_server);

    boolean present_perm = true;
    list.add(present_perm);
    if (present_perm)
      list.add(perm);

    boolean present_uid = true;
    list.add(present_uid);
    if (present_uid)
      list.add(uid);

    boolean present_gid = true;
    list.add(present_gid);
    if (present_gid)
      list.add(gid);

    boolean present_lease_due = true;
    list.add(present_lease_due);
    if (present_lease_due)
      list.add(lease_due);

    return list.hashCode();
  }

  @Override
  public int compareTo(LookupInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetZeroth_server()).compareTo(other.isSetZeroth_server());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetZeroth_server()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.zeroth_server, other.zeroth_server);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPerm()).compareTo(other.isSetPerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.perm, other.perm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetGid()).compareTo(other.isSetGid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gid, other.gid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLease_due()).compareTo(other.isSetLease_due());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLease_due()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lease_due, other.lease_due);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("LookupInfo(");
    boolean first = true;

    sb.append("id:");
    sb.append(this.id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("zeroth_server:");
    sb.append(this.zeroth_server);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perm:");
    sb.append(this.perm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("uid:");
    sb.append(this.uid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("gid:");
    sb.append(this.gid);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lease_due:");
    sb.append(this.lease_due);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'id' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'zeroth_server' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'perm' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'uid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'gid' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'lease_due' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LookupInfoStandardSchemeFactory implements SchemeFactory {
    public LookupInfoStandardScheme getScheme() {
      return new LookupInfoStandardScheme();
    }
  }

  private static class LookupInfoStandardScheme extends StandardScheme<LookupInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LookupInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.id = iprot.readI64();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ZEROTH_SERVER
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.zeroth_server = iprot.readI16();
              struct.setZeroth_serverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PERM
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.perm = iprot.readI16();
              struct.setPermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // UID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.uid = iprot.readI16();
              struct.setUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // GID
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.gid = iprot.readI16();
              struct.setGidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LEASE_DUE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lease_due = iprot.readI64();
              struct.setLease_dueIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'id' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetZeroth_server()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'zeroth_server' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPerm()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'perm' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetUid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'uid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetGid()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'gid' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLease_due()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'lease_due' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LookupInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(ID_FIELD_DESC);
      oprot.writeI64(struct.id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(ZEROTH_SERVER_FIELD_DESC);
      oprot.writeI16(struct.zeroth_server);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PERM_FIELD_DESC);
      oprot.writeI16(struct.perm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(UID_FIELD_DESC);
      oprot.writeI16(struct.uid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(GID_FIELD_DESC);
      oprot.writeI16(struct.gid);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEASE_DUE_FIELD_DESC);
      oprot.writeI64(struct.lease_due);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LookupInfoTupleSchemeFactory implements SchemeFactory {
    public LookupInfoTupleScheme getScheme() {
      return new LookupInfoTupleScheme();
    }
  }

  private static class LookupInfoTupleScheme extends TupleScheme<LookupInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LookupInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.id);
      oprot.writeI16(struct.zeroth_server);
      oprot.writeI16(struct.perm);
      oprot.writeI16(struct.uid);
      oprot.writeI16(struct.gid);
      oprot.writeI64(struct.lease_due);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LookupInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.id = iprot.readI64();
      struct.setIdIsSet(true);
      struct.zeroth_server = iprot.readI16();
      struct.setZeroth_serverIsSet(true);
      struct.perm = iprot.readI16();
      struct.setPermIsSet(true);
      struct.uid = iprot.readI16();
      struct.setUidIsSet(true);
      struct.gid = iprot.readI16();
      struct.setGidIsSet(true);
      struct.lease_due = iprot.readI64();
      struct.setLease_dueIsSet(true);
    }
  }

}

