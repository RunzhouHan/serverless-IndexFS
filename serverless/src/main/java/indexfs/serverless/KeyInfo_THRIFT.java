/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package main.java.indexfs.serverless;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2021-12-06")
public class KeyInfo_THRIFT implements org.apache.thrift.TBase<KeyInfo_THRIFT, KeyInfo_THRIFT._Fields>, java.io.Serializable, Cloneable, Comparable<KeyInfo_THRIFT> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("KeyInfo_THRIFT");

  private static final org.apache.thrift.protocol.TField PARENT_ID__FIELD_DESC = new org.apache.thrift.protocol.TField("parent_id_", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField PARTITION_ID__FIELD_DESC = new org.apache.thrift.protocol.TField("partition_id_", org.apache.thrift.protocol.TType.I16, (short)2);
  private static final org.apache.thrift.protocol.TField FILE_NAME__FIELD_DESC = new org.apache.thrift.protocol.TField("file_name_", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new KeyInfo_THRIFTStandardSchemeFactory());
    schemes.put(TupleScheme.class, new KeyInfo_THRIFTTupleSchemeFactory());
  }

  public long parent_id_; // required
  public short partition_id_; // required
  public String file_name_; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    PARENT_ID_((short)1, "parent_id_"),
    PARTITION_ID_((short)2, "partition_id_"),
    FILE_NAME_((short)3, "file_name_");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PARENT_ID_
          return PARENT_ID_;
        case 2: // PARTITION_ID_
          return PARTITION_ID_;
        case 3: // FILE_NAME_
          return FILE_NAME_;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PARENT_ID__ISSET_ID = 0;
  private static final int __PARTITION_ID__ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PARENT_ID_, new org.apache.thrift.meta_data.FieldMetaData("parent_id_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARTITION_ID_, new org.apache.thrift.meta_data.FieldMetaData("partition_id_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.FILE_NAME_, new org.apache.thrift.meta_data.FieldMetaData("file_name_", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(KeyInfo_THRIFT.class, metaDataMap);
  }

  public KeyInfo_THRIFT() {
  }

  public KeyInfo_THRIFT(
    long parent_id_,
    short partition_id_,
    String file_name_)
  {
    this();
    this.parent_id_ = parent_id_;
    setParent_id_IsSet(true);
    this.partition_id_ = partition_id_;
    setPartition_id_IsSet(true);
    this.file_name_ = file_name_;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public KeyInfo_THRIFT(KeyInfo_THRIFT other) {
    __isset_bitfield = other.__isset_bitfield;
    this.parent_id_ = other.parent_id_;
    this.partition_id_ = other.partition_id_;
    if (other.isSetFile_name_()) {
      this.file_name_ = other.file_name_;
    }
  }

  public KeyInfo_THRIFT deepCopy() {
    return new KeyInfo_THRIFT(this);
  }

  @Override
  public void clear() {
    setParent_id_IsSet(false);
    this.parent_id_ = 0;
    setPartition_id_IsSet(false);
    this.partition_id_ = 0;
    this.file_name_ = null;
  }

  public long getParent_id_() {
    return this.parent_id_;
  }

  public KeyInfo_THRIFT setParent_id_(long parent_id_) {
    this.parent_id_ = parent_id_;
    setParent_id_IsSet(true);
    return this;
  }

  public void unsetParent_id_() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARENT_ID__ISSET_ID);
  }

  /** Returns true if field parent_id_ is set (has been assigned a value) and false otherwise */
  public boolean isSetParent_id_() {
    return EncodingUtils.testBit(__isset_bitfield, __PARENT_ID__ISSET_ID);
  }

  public void setParent_id_IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARENT_ID__ISSET_ID, value);
  }

  public short getPartition_id_() {
    return this.partition_id_;
  }

  public KeyInfo_THRIFT setPartition_id_(short partition_id_) {
    this.partition_id_ = partition_id_;
    setPartition_id_IsSet(true);
    return this;
  }

  public void unsetPartition_id_() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PARTITION_ID__ISSET_ID);
  }

  /** Returns true if field partition_id_ is set (has been assigned a value) and false otherwise */
  public boolean isSetPartition_id_() {
    return EncodingUtils.testBit(__isset_bitfield, __PARTITION_ID__ISSET_ID);
  }

  public void setPartition_id_IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PARTITION_ID__ISSET_ID, value);
  }

  public String getFile_name_() {
    return this.file_name_;
  }

  public KeyInfo_THRIFT setFile_name_(String file_name_) {
    this.file_name_ = file_name_;
    return this;
  }

  public void unsetFile_name_() {
    this.file_name_ = null;
  }

  /** Returns true if field file_name_ is set (has been assigned a value) and false otherwise */
  public boolean isSetFile_name_() {
    return this.file_name_ != null;
  }

  public void setFile_name_IsSet(boolean value) {
    if (!value) {
      this.file_name_ = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case PARENT_ID_:
      if (value == null) {
        unsetParent_id_();
      } else {
        setParent_id_((Long)value);
      }
      break;

    case PARTITION_ID_:
      if (value == null) {
        unsetPartition_id_();
      } else {
        setPartition_id_((Short)value);
      }
      break;

    case FILE_NAME_:
      if (value == null) {
        unsetFile_name_();
      } else {
        setFile_name_((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case PARENT_ID_:
      return getParent_id_();

    case PARTITION_ID_:
      return getPartition_id_();

    case FILE_NAME_:
      return getFile_name_();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case PARENT_ID_:
      return isSetParent_id_();
    case PARTITION_ID_:
      return isSetPartition_id_();
    case FILE_NAME_:
      return isSetFile_name_();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof KeyInfo_THRIFT)
      return this.equals((KeyInfo_THRIFT)that);
    return false;
  }

  public boolean equals(KeyInfo_THRIFT that) {
    if (that == null)
      return false;

    boolean this_present_parent_id_ = true;
    boolean that_present_parent_id_ = true;
    if (this_present_parent_id_ || that_present_parent_id_) {
      if (!(this_present_parent_id_ && that_present_parent_id_))
        return false;
      if (this.parent_id_ != that.parent_id_)
        return false;
    }

    boolean this_present_partition_id_ = true;
    boolean that_present_partition_id_ = true;
    if (this_present_partition_id_ || that_present_partition_id_) {
      if (!(this_present_partition_id_ && that_present_partition_id_))
        return false;
      if (this.partition_id_ != that.partition_id_)
        return false;
    }

    boolean this_present_file_name_ = true && this.isSetFile_name_();
    boolean that_present_file_name_ = true && that.isSetFile_name_();
    if (this_present_file_name_ || that_present_file_name_) {
      if (!(this_present_file_name_ && that_present_file_name_))
        return false;
      if (!this.file_name_.equals(that.file_name_))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_parent_id_ = true;
    list.add(present_parent_id_);
    if (present_parent_id_)
      list.add(parent_id_);

    boolean present_partition_id_ = true;
    list.add(present_partition_id_);
    if (present_partition_id_)
      list.add(partition_id_);

    boolean present_file_name_ = true && (isSetFile_name_());
    list.add(present_file_name_);
    if (present_file_name_)
      list.add(file_name_);

    return list.hashCode();
  }

  @Override
  public int compareTo(KeyInfo_THRIFT other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetParent_id_()).compareTo(other.isSetParent_id_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParent_id_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent_id_, other.parent_id_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPartition_id_()).compareTo(other.isSetPartition_id_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPartition_id_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.partition_id_, other.partition_id_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFile_name_()).compareTo(other.isSetFile_name_());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFile_name_()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file_name_, other.file_name_);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("KeyInfo_THRIFT(");
    boolean first = true;

    sb.append("parent_id_:");
    sb.append(this.parent_id_);
    first = false;
    if (!first) sb.append(", ");
    sb.append("partition_id_:");
    sb.append(this.partition_id_);
    first = false;
    if (!first) sb.append(", ");
    sb.append("file_name_:");
    if (this.file_name_ == null) {
      sb.append("null");
    } else {
      sb.append(this.file_name_);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'parent_id_' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'partition_id_' because it's a primitive and you chose the non-beans generator.
    if (file_name_ == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'file_name_' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class KeyInfo_THRIFTStandardSchemeFactory implements SchemeFactory {
    public KeyInfo_THRIFTStandardScheme getScheme() {
      return new KeyInfo_THRIFTStandardScheme();
    }
  }

  private static class KeyInfo_THRIFTStandardScheme extends StandardScheme<KeyInfo_THRIFT> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, KeyInfo_THRIFT struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PARENT_ID_
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parent_id_ = iprot.readI64();
              struct.setParent_id_IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PARTITION_ID_
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.partition_id_ = iprot.readI16();
              struct.setPartition_id_IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FILE_NAME_
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.file_name_ = iprot.readString();
              struct.setFile_name_IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetParent_id_()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'parent_id_' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetPartition_id_()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'partition_id_' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, KeyInfo_THRIFT struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(PARENT_ID__FIELD_DESC);
      oprot.writeI64(struct.parent_id_);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PARTITION_ID__FIELD_DESC);
      oprot.writeI16(struct.partition_id_);
      oprot.writeFieldEnd();
      if (struct.file_name_ != null) {
        oprot.writeFieldBegin(FILE_NAME__FIELD_DESC);
        oprot.writeString(struct.file_name_);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class KeyInfo_THRIFTTupleSchemeFactory implements SchemeFactory {
    public KeyInfo_THRIFTTupleScheme getScheme() {
      return new KeyInfo_THRIFTTupleScheme();
    }
  }

  private static class KeyInfo_THRIFTTupleScheme extends TupleScheme<KeyInfo_THRIFT> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, KeyInfo_THRIFT struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.parent_id_);
      oprot.writeI16(struct.partition_id_);
      oprot.writeString(struct.file_name_);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, KeyInfo_THRIFT struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.parent_id_ = iprot.readI64();
      struct.setParent_id_IsSet(true);
      struct.partition_id_ = iprot.readI16();
      struct.setPartition_id_IsSet(true);
      struct.file_name_ = iprot.readString();
      struct.setFile_name_IsSet(true);
    }
  }

}

